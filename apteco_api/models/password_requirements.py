# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PasswordRequirements(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'minimum_password_length': 'int',
        'minimum_number_of_digits_in_password': 'int',
        'minimum_number_of_letters_in_password': 'int',
        'minimum_number_of_lowercase_letters_in_password': 'int',
        'minimum_number_of_uppercase_letters_in_password': 'int',
        'minimum_number_of_symbols_in_password': 'int'
    }

    attribute_map = {
        'minimum_password_length': 'minimumPasswordLength',
        'minimum_number_of_digits_in_password': 'minimumNumberOfDigitsInPassword',
        'minimum_number_of_letters_in_password': 'minimumNumberOfLettersInPassword',
        'minimum_number_of_lowercase_letters_in_password': 'minimumNumberOfLowercaseLettersInPassword',
        'minimum_number_of_uppercase_letters_in_password': 'minimumNumberOfUppercaseLettersInPassword',
        'minimum_number_of_symbols_in_password': 'minimumNumberOfSymbolsInPassword'
    }

    def __init__(self, minimum_password_length=None, minimum_number_of_digits_in_password=None, minimum_number_of_letters_in_password=None, minimum_number_of_lowercase_letters_in_password=None, minimum_number_of_uppercase_letters_in_password=None, minimum_number_of_symbols_in_password=None):  # noqa: E501
        """PasswordRequirements - a model defined in OpenAPI"""  # noqa: E501

        self._minimum_password_length = None
        self._minimum_number_of_digits_in_password = None
        self._minimum_number_of_letters_in_password = None
        self._minimum_number_of_lowercase_letters_in_password = None
        self._minimum_number_of_uppercase_letters_in_password = None
        self._minimum_number_of_symbols_in_password = None
        self.discriminator = None

        self.minimum_password_length = minimum_password_length
        self.minimum_number_of_digits_in_password = minimum_number_of_digits_in_password
        self.minimum_number_of_letters_in_password = minimum_number_of_letters_in_password
        self.minimum_number_of_lowercase_letters_in_password = minimum_number_of_lowercase_letters_in_password
        self.minimum_number_of_uppercase_letters_in_password = minimum_number_of_uppercase_letters_in_password
        self.minimum_number_of_symbols_in_password = minimum_number_of_symbols_in_password

    @property
    def minimum_password_length(self):
        """Gets the minimum_password_length of this PasswordRequirements.  # noqa: E501

        The minimum number of characters required for a new password  # noqa: E501

        :return: The minimum_password_length of this PasswordRequirements.  # noqa: E501
        :rtype: int
        """
        return self._minimum_password_length

    @minimum_password_length.setter
    def minimum_password_length(self, minimum_password_length):
        """Sets the minimum_password_length of this PasswordRequirements.

        The minimum number of characters required for a new password  # noqa: E501

        :param minimum_password_length: The minimum_password_length of this PasswordRequirements.  # noqa: E501
        :type: int
        """
        if minimum_password_length is None:
            raise ValueError("Invalid value for `minimum_password_length`, must not be `None`")  # noqa: E501

        self._minimum_password_length = minimum_password_length

    @property
    def minimum_number_of_digits_in_password(self):
        """Gets the minimum_number_of_digits_in_password of this PasswordRequirements.  # noqa: E501

        The minimum number of numeric digit characters required in a new password  # noqa: E501

        :return: The minimum_number_of_digits_in_password of this PasswordRequirements.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_digits_in_password

    @minimum_number_of_digits_in_password.setter
    def minimum_number_of_digits_in_password(self, minimum_number_of_digits_in_password):
        """Sets the minimum_number_of_digits_in_password of this PasswordRequirements.

        The minimum number of numeric digit characters required in a new password  # noqa: E501

        :param minimum_number_of_digits_in_password: The minimum_number_of_digits_in_password of this PasswordRequirements.  # noqa: E501
        :type: int
        """
        if minimum_number_of_digits_in_password is None:
            raise ValueError("Invalid value for `minimum_number_of_digits_in_password`, must not be `None`")  # noqa: E501

        self._minimum_number_of_digits_in_password = minimum_number_of_digits_in_password

    @property
    def minimum_number_of_letters_in_password(self):
        """Gets the minimum_number_of_letters_in_password of this PasswordRequirements.  # noqa: E501

        The minimum number of alphabetic characters required in a new password  # noqa: E501

        :return: The minimum_number_of_letters_in_password of this PasswordRequirements.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_letters_in_password

    @minimum_number_of_letters_in_password.setter
    def minimum_number_of_letters_in_password(self, minimum_number_of_letters_in_password):
        """Sets the minimum_number_of_letters_in_password of this PasswordRequirements.

        The minimum number of alphabetic characters required in a new password  # noqa: E501

        :param minimum_number_of_letters_in_password: The minimum_number_of_letters_in_password of this PasswordRequirements.  # noqa: E501
        :type: int
        """
        if minimum_number_of_letters_in_password is None:
            raise ValueError("Invalid value for `minimum_number_of_letters_in_password`, must not be `None`")  # noqa: E501

        self._minimum_number_of_letters_in_password = minimum_number_of_letters_in_password

    @property
    def minimum_number_of_lowercase_letters_in_password(self):
        """Gets the minimum_number_of_lowercase_letters_in_password of this PasswordRequirements.  # noqa: E501

        The minimum number of lowercase characters required in a new password  # noqa: E501

        :return: The minimum_number_of_lowercase_letters_in_password of this PasswordRequirements.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_lowercase_letters_in_password

    @minimum_number_of_lowercase_letters_in_password.setter
    def minimum_number_of_lowercase_letters_in_password(self, minimum_number_of_lowercase_letters_in_password):
        """Sets the minimum_number_of_lowercase_letters_in_password of this PasswordRequirements.

        The minimum number of lowercase characters required in a new password  # noqa: E501

        :param minimum_number_of_lowercase_letters_in_password: The minimum_number_of_lowercase_letters_in_password of this PasswordRequirements.  # noqa: E501
        :type: int
        """
        if minimum_number_of_lowercase_letters_in_password is None:
            raise ValueError("Invalid value for `minimum_number_of_lowercase_letters_in_password`, must not be `None`")  # noqa: E501

        self._minimum_number_of_lowercase_letters_in_password = minimum_number_of_lowercase_letters_in_password

    @property
    def minimum_number_of_uppercase_letters_in_password(self):
        """Gets the minimum_number_of_uppercase_letters_in_password of this PasswordRequirements.  # noqa: E501

        The minimum number of uppercase characters required in a new password  # noqa: E501

        :return: The minimum_number_of_uppercase_letters_in_password of this PasswordRequirements.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_uppercase_letters_in_password

    @minimum_number_of_uppercase_letters_in_password.setter
    def minimum_number_of_uppercase_letters_in_password(self, minimum_number_of_uppercase_letters_in_password):
        """Sets the minimum_number_of_uppercase_letters_in_password of this PasswordRequirements.

        The minimum number of uppercase characters required in a new password  # noqa: E501

        :param minimum_number_of_uppercase_letters_in_password: The minimum_number_of_uppercase_letters_in_password of this PasswordRequirements.  # noqa: E501
        :type: int
        """
        if minimum_number_of_uppercase_letters_in_password is None:
            raise ValueError("Invalid value for `minimum_number_of_uppercase_letters_in_password`, must not be `None`")  # noqa: E501

        self._minimum_number_of_uppercase_letters_in_password = minimum_number_of_uppercase_letters_in_password

    @property
    def minimum_number_of_symbols_in_password(self):
        """Gets the minimum_number_of_symbols_in_password of this PasswordRequirements.  # noqa: E501

        The minimum number of symbols (i.e. not digits or letters) required in a new password  # noqa: E501

        :return: The minimum_number_of_symbols_in_password of this PasswordRequirements.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_symbols_in_password

    @minimum_number_of_symbols_in_password.setter
    def minimum_number_of_symbols_in_password(self, minimum_number_of_symbols_in_password):
        """Sets the minimum_number_of_symbols_in_password of this PasswordRequirements.

        The minimum number of symbols (i.e. not digits or letters) required in a new password  # noqa: E501

        :param minimum_number_of_symbols_in_password: The minimum_number_of_symbols_in_password of this PasswordRequirements.  # noqa: E501
        :type: int
        """
        if minimum_number_of_symbols_in_password is None:
            raise ValueError("Invalid value for `minimum_number_of_symbols_in_password`, must not be `None`")  # noqa: E501

        self._minimum_number_of_symbols_in_password = minimum_number_of_symbols_in_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordRequirements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
