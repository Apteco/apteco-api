# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProcessingTimeStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'categories': 'list[str]',
        'frequencies': 'list[int]',
        'minimum_durations_in_seconds': 'list[float]',
        'maximum_durations_in_seconds': 'list[float]',
        'mean_durations_in_seconds': 'list[float]',
        'standard_deviation_of_durations_in_seconds': 'list[float]',
        'median_durations_in_seconds': 'list[float]',
        'percent75_durations_in_seconds': 'list[float]',
        'percent90_durations_in_seconds': 'list[float]',
        'percent95_durations_in_seconds': 'list[float]',
        'percent99_durations_in_seconds': 'list[float]'
    }

    attribute_map = {
        'categories': 'categories',
        'frequencies': 'frequencies',
        'minimum_durations_in_seconds': 'minimumDurationsInSeconds',
        'maximum_durations_in_seconds': 'maximumDurationsInSeconds',
        'mean_durations_in_seconds': 'meanDurationsInSeconds',
        'standard_deviation_of_durations_in_seconds': 'standardDeviationOfDurationsInSeconds',
        'median_durations_in_seconds': 'medianDurationsInSeconds',
        'percent75_durations_in_seconds': 'percent75DurationsInSeconds',
        'percent90_durations_in_seconds': 'percent90DurationsInSeconds',
        'percent95_durations_in_seconds': 'percent95DurationsInSeconds',
        'percent99_durations_in_seconds': 'percent99DurationsInSeconds'
    }

    def __init__(self, categories=None, frequencies=None, minimum_durations_in_seconds=None, maximum_durations_in_seconds=None, mean_durations_in_seconds=None, standard_deviation_of_durations_in_seconds=None, median_durations_in_seconds=None, percent75_durations_in_seconds=None, percent90_durations_in_seconds=None, percent95_durations_in_seconds=None, percent99_durations_in_seconds=None):  # noqa: E501
        """ProcessingTimeStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._categories = None
        self._frequencies = None
        self._minimum_durations_in_seconds = None
        self._maximum_durations_in_seconds = None
        self._mean_durations_in_seconds = None
        self._standard_deviation_of_durations_in_seconds = None
        self._median_durations_in_seconds = None
        self._percent75_durations_in_seconds = None
        self._percent90_durations_in_seconds = None
        self._percent95_durations_in_seconds = None
        self._percent99_durations_in_seconds = None
        self.discriminator = None

        self.categories = categories
        self.frequencies = frequencies
        self.minimum_durations_in_seconds = minimum_durations_in_seconds
        self.maximum_durations_in_seconds = maximum_durations_in_seconds
        self.mean_durations_in_seconds = mean_durations_in_seconds
        self.standard_deviation_of_durations_in_seconds = standard_deviation_of_durations_in_seconds
        self.median_durations_in_seconds = median_durations_in_seconds
        self.percent75_durations_in_seconds = percent75_durations_in_seconds
        self.percent90_durations_in_seconds = percent90_durations_in_seconds
        self.percent95_durations_in_seconds = percent95_durations_in_seconds
        self.percent99_durations_in_seconds = percent99_durations_in_seconds

    @property
    def categories(self):
        """Gets the categories of this ProcessingTimeStatistics.  # noqa: E501

        The set of categories that the jobs have been broken down into  # noqa: E501

        :return: The categories of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ProcessingTimeStatistics.

        The set of categories that the jobs have been broken down into  # noqa: E501

        :param categories: The categories of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def frequencies(self):
        """Gets the frequencies of this ProcessingTimeStatistics.  # noqa: E501

        The set of counts representing the number of jobs in each corresponding time period.  The first figure is data for the first category in the Categories list, and so on.  # noqa: E501

        :return: The frequencies of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[int]
        """
        return self._frequencies

    @frequencies.setter
    def frequencies(self, frequencies):
        """Sets the frequencies of this ProcessingTimeStatistics.

        The set of counts representing the number of jobs in each corresponding time period.  The first figure is data for the first category in the Categories list, and so on.  # noqa: E501

        :param frequencies: The frequencies of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[int]
        """
        if frequencies is None:
            raise ValueError("Invalid value for `frequencies`, must not be `None`")  # noqa: E501

        self._frequencies = frequencies

    @property
    def minimum_durations_in_seconds(self):
        """Gets the minimum_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the minimum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The minimum_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._minimum_durations_in_seconds

    @minimum_durations_in_seconds.setter
    def minimum_durations_in_seconds(self, minimum_durations_in_seconds):
        """Sets the minimum_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the minimum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param minimum_durations_in_seconds: The minimum_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if minimum_durations_in_seconds is None:
            raise ValueError("Invalid value for `minimum_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._minimum_durations_in_seconds = minimum_durations_in_seconds

    @property
    def maximum_durations_in_seconds(self):
        """Gets the maximum_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the maximum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The maximum_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._maximum_durations_in_seconds

    @maximum_durations_in_seconds.setter
    def maximum_durations_in_seconds(self, maximum_durations_in_seconds):
        """Sets the maximum_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the maximum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param maximum_durations_in_seconds: The maximum_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if maximum_durations_in_seconds is None:
            raise ValueError("Invalid value for `maximum_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._maximum_durations_in_seconds = maximum_durations_in_seconds

    @property
    def mean_durations_in_seconds(self):
        """Gets the mean_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the mean job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The mean_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._mean_durations_in_seconds

    @mean_durations_in_seconds.setter
    def mean_durations_in_seconds(self, mean_durations_in_seconds):
        """Sets the mean_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the mean job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param mean_durations_in_seconds: The mean_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if mean_durations_in_seconds is None:
            raise ValueError("Invalid value for `mean_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._mean_durations_in_seconds = mean_durations_in_seconds

    @property
    def standard_deviation_of_durations_in_seconds(self):
        """Gets the standard_deviation_of_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the standard deviation for job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The standard_deviation_of_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._standard_deviation_of_durations_in_seconds

    @standard_deviation_of_durations_in_seconds.setter
    def standard_deviation_of_durations_in_seconds(self, standard_deviation_of_durations_in_seconds):
        """Sets the standard_deviation_of_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the standard deviation for job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param standard_deviation_of_durations_in_seconds: The standard_deviation_of_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if standard_deviation_of_durations_in_seconds is None:
            raise ValueError("Invalid value for `standard_deviation_of_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._standard_deviation_of_durations_in_seconds = standard_deviation_of_durations_in_seconds

    @property
    def median_durations_in_seconds(self):
        """Gets the median_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the median job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The median_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._median_durations_in_seconds

    @median_durations_in_seconds.setter
    def median_durations_in_seconds(self, median_durations_in_seconds):
        """Sets the median_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the median job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param median_durations_in_seconds: The median_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if median_durations_in_seconds is None:
            raise ValueError("Invalid value for `median_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._median_durations_in_seconds = median_durations_in_seconds

    @property
    def percent75_durations_in_seconds(self):
        """Gets the percent75_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the 75th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The percent75_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._percent75_durations_in_seconds

    @percent75_durations_in_seconds.setter
    def percent75_durations_in_seconds(self, percent75_durations_in_seconds):
        """Sets the percent75_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the 75th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param percent75_durations_in_seconds: The percent75_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if percent75_durations_in_seconds is None:
            raise ValueError("Invalid value for `percent75_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._percent75_durations_in_seconds = percent75_durations_in_seconds

    @property
    def percent90_durations_in_seconds(self):
        """Gets the percent90_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the 90th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The percent90_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._percent90_durations_in_seconds

    @percent90_durations_in_seconds.setter
    def percent90_durations_in_seconds(self, percent90_durations_in_seconds):
        """Sets the percent90_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the 90th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param percent90_durations_in_seconds: The percent90_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if percent90_durations_in_seconds is None:
            raise ValueError("Invalid value for `percent90_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._percent90_durations_in_seconds = percent90_durations_in_seconds

    @property
    def percent95_durations_in_seconds(self):
        """Gets the percent95_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the 95th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The percent95_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._percent95_durations_in_seconds

    @percent95_durations_in_seconds.setter
    def percent95_durations_in_seconds(self, percent95_durations_in_seconds):
        """Sets the percent95_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the 95th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param percent95_durations_in_seconds: The percent95_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if percent95_durations_in_seconds is None:
            raise ValueError("Invalid value for `percent95_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._percent95_durations_in_seconds = percent95_durations_in_seconds

    @property
    def percent99_durations_in_seconds(self):
        """Gets the percent99_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501

        The set of figures representing the 99th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :return: The percent99_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :rtype: list[float]
        """
        return self._percent99_durations_in_seconds

    @percent99_durations_in_seconds.setter
    def percent99_durations_in_seconds(self, percent99_durations_in_seconds):
        """Sets the percent99_durations_in_seconds of this ProcessingTimeStatistics.

        The set of figures representing the 99th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.  # noqa: E501

        :param percent99_durations_in_seconds: The percent99_durations_in_seconds of this ProcessingTimeStatistics.  # noqa: E501
        :type: list[float]
        """
        if percent99_durations_in_seconds is None:
            raise ValueError("Invalid value for `percent99_durations_in_seconds`, must not be `None`")  # noqa: E501

        self._percent99_durations_in_seconds = percent99_durations_in_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessingTimeStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
