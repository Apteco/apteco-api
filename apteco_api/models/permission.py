# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Permission(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_resource_path': 'str',
        'file_permission': 'FilePermission',
        'orbit_feature_permission': 'OrbitFeaturePermission'
    }

    attribute_map = {
        '_resource_path': 'resourcePath',
        'file_permission': 'filePermission',
        'orbit_feature_permission': 'orbitFeaturePermission'
    }

    def __init__(self, _resource_path=None, file_permission=None, orbit_feature_permission=None):  # noqa: E501
        """Permission - a model defined in OpenAPI"""  # noqa: E501

        self.__resource_path = None
        self._file_permission = None
        self._orbit_feature_permission = None
        self.discriminator = None

        self._resource_path = _resource_path
        if file_permission is not None:
            self.file_permission = file_permission
        if orbit_feature_permission is not None:
            self.orbit_feature_permission = orbit_feature_permission

    @property
    def _resource_path(self):
        """Gets the _resource_path of this Permission.  # noqa: E501

        The path to the resource associated with this permission  # noqa: E501

        :return: The _resource_path of this Permission.  # noqa: E501
        :rtype: str
        """
        return self.__resource_path

    @_resource_path.setter
    def _resource_path(self, _resource_path):
        """Sets the _resource_path of this Permission.

        The path to the resource associated with this permission  # noqa: E501

        :param _resource_path: The _resource_path of this Permission.  # noqa: E501
        :type: str
        """
        if _resource_path is None:
            raise ValueError("Invalid value for `_resource_path`, must not be `None`")  # noqa: E501

        self.__resource_path = _resource_path

    @property
    def file_permission(self):
        """Gets the file_permission of this Permission.  # noqa: E501


        :return: The file_permission of this Permission.  # noqa: E501
        :rtype: FilePermission
        """
        return self._file_permission

    @file_permission.setter
    def file_permission(self, file_permission):
        """Sets the file_permission of this Permission.


        :param file_permission: The file_permission of this Permission.  # noqa: E501
        :type: FilePermission
        """

        self._file_permission = file_permission

    @property
    def orbit_feature_permission(self):
        """Gets the orbit_feature_permission of this Permission.  # noqa: E501


        :return: The orbit_feature_permission of this Permission.  # noqa: E501
        :rtype: OrbitFeaturePermission
        """
        return self._orbit_feature_permission

    @orbit_feature_permission.setter
    def orbit_feature_permission(self, orbit_feature_permission):
        """Sets the orbit_feature_permission of this Permission.


        :param orbit_feature_permission: The orbit_feature_permission of this Permission.  # noqa: E501
        :type: OrbitFeaturePermission
        """

        self._orbit_feature_permission = orbit_feature_permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
