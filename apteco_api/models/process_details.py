# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProcessDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'process_id': 'int',
        'private_memory_in_bytes': 'int',
        'working_set_in_bytes': 'int',
        'heap_size_in_bytes': 'int',
        'is_server_garbage_collection_enabled': 'bool'
    }

    attribute_map = {
        'process_id': 'processId',
        'private_memory_in_bytes': 'privateMemoryInBytes',
        'working_set_in_bytes': 'workingSetInBytes',
        'heap_size_in_bytes': 'heapSizeInBytes',
        'is_server_garbage_collection_enabled': 'isServerGarbageCollectionEnabled'
    }

    def __init__(self, process_id=None, private_memory_in_bytes=None, working_set_in_bytes=None, heap_size_in_bytes=None, is_server_garbage_collection_enabled=None):  # noqa: E501
        """ProcessDetails - a model defined in OpenAPI"""  # noqa: E501

        self._process_id = None
        self._private_memory_in_bytes = None
        self._working_set_in_bytes = None
        self._heap_size_in_bytes = None
        self._is_server_garbage_collection_enabled = None
        self.discriminator = None

        self.process_id = process_id
        self.private_memory_in_bytes = private_memory_in_bytes
        self.working_set_in_bytes = working_set_in_bytes
        self.heap_size_in_bytes = heap_size_in_bytes
        self.is_server_garbage_collection_enabled = is_server_garbage_collection_enabled

    @property
    def process_id(self):
        """Gets the process_id of this ProcessDetails.  # noqa: E501

        The process id of the API's process  # noqa: E501

        :return: The process_id of this ProcessDetails.  # noqa: E501
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this ProcessDetails.

        The process id of the API's process  # noqa: E501

        :param process_id: The process_id of this ProcessDetails.  # noqa: E501
        :type: int
        """
        if process_id is None:
            raise ValueError("Invalid value for `process_id`, must not be `None`")  # noqa: E501

        self._process_id = process_id

    @property
    def private_memory_in_bytes(self):
        """Gets the private_memory_in_bytes of this ProcessDetails.  # noqa: E501

        The amount of \"private memory\" used by the API's process, in bytes  # noqa: E501

        :return: The private_memory_in_bytes of this ProcessDetails.  # noqa: E501
        :rtype: int
        """
        return self._private_memory_in_bytes

    @private_memory_in_bytes.setter
    def private_memory_in_bytes(self, private_memory_in_bytes):
        """Sets the private_memory_in_bytes of this ProcessDetails.

        The amount of \"private memory\" used by the API's process, in bytes  # noqa: E501

        :param private_memory_in_bytes: The private_memory_in_bytes of this ProcessDetails.  # noqa: E501
        :type: int
        """
        if private_memory_in_bytes is None:
            raise ValueError("Invalid value for `private_memory_in_bytes`, must not be `None`")  # noqa: E501

        self._private_memory_in_bytes = private_memory_in_bytes

    @property
    def working_set_in_bytes(self):
        """Gets the working_set_in_bytes of this ProcessDetails.  # noqa: E501

        The amount of physical memory used by the API's process, in bytes  # noqa: E501

        :return: The working_set_in_bytes of this ProcessDetails.  # noqa: E501
        :rtype: int
        """
        return self._working_set_in_bytes

    @working_set_in_bytes.setter
    def working_set_in_bytes(self, working_set_in_bytes):
        """Sets the working_set_in_bytes of this ProcessDetails.

        The amount of physical memory used by the API's process, in bytes  # noqa: E501

        :param working_set_in_bytes: The working_set_in_bytes of this ProcessDetails.  # noqa: E501
        :type: int
        """
        if working_set_in_bytes is None:
            raise ValueError("Invalid value for `working_set_in_bytes`, must not be `None`")  # noqa: E501

        self._working_set_in_bytes = working_set_in_bytes

    @property
    def heap_size_in_bytes(self):
        """Gets the heap_size_in_bytes of this ProcessDetails.  # noqa: E501

        The amount of memory in the .Net heap used by the API's process, in bytes  # noqa: E501

        :return: The heap_size_in_bytes of this ProcessDetails.  # noqa: E501
        :rtype: int
        """
        return self._heap_size_in_bytes

    @heap_size_in_bytes.setter
    def heap_size_in_bytes(self, heap_size_in_bytes):
        """Sets the heap_size_in_bytes of this ProcessDetails.

        The amount of memory in the .Net heap used by the API's process, in bytes  # noqa: E501

        :param heap_size_in_bytes: The heap_size_in_bytes of this ProcessDetails.  # noqa: E501
        :type: int
        """
        if heap_size_in_bytes is None:
            raise ValueError("Invalid value for `heap_size_in_bytes`, must not be `None`")  # noqa: E501

        self._heap_size_in_bytes = heap_size_in_bytes

    @property
    def is_server_garbage_collection_enabled(self):
        """Gets the is_server_garbage_collection_enabled of this ProcessDetails.  # noqa: E501

        Whether the \"Server\" garbage collection strategy is enabled or not  # noqa: E501

        :return: The is_server_garbage_collection_enabled of this ProcessDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_server_garbage_collection_enabled

    @is_server_garbage_collection_enabled.setter
    def is_server_garbage_collection_enabled(self, is_server_garbage_collection_enabled):
        """Sets the is_server_garbage_collection_enabled of this ProcessDetails.

        Whether the \"Server\" garbage collection strategy is enabled or not  # noqa: E501

        :param is_server_garbage_collection_enabled: The is_server_garbage_collection_enabled of this ProcessDetails.  # noqa: E501
        :type: bool
        """
        if is_server_garbage_collection_enabled is None:
            raise ValueError("Invalid value for `is_server_garbage_collection_enabled`, must not be `None`")  # noqa: E501

        self._is_server_garbage_collection_enabled = is_server_garbage_collection_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
