# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ListRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'banding_type': 'str',
        'list': 'str',
        'variable_name': 'str'
    }

    attribute_map = {
        'banding_type': 'bandingType',
        'list': 'list',
        'variable_name': 'variableName'
    }

    def __init__(self, banding_type=None, list=None, variable_name=None):  # noqa: E501
        """ListRule - a model defined in OpenAPI"""  # noqa: E501

        self._banding_type = None
        self._list = None
        self._variable_name = None
        self.discriminator = None

        if banding_type is not None:
            self.banding_type = banding_type
        if list is not None:
            self.list = list
        if variable_name is not None:
            self.variable_name = variable_name

    @property
    def banding_type(self):
        """Gets the banding_type of this ListRule.  # noqa: E501


        :return: The banding_type of this ListRule.  # noqa: E501
        :rtype: str
        """
        return self._banding_type

    @banding_type.setter
    def banding_type(self, banding_type):
        """Sets the banding_type of this ListRule.


        :param banding_type: The banding_type of this ListRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Years", "Quarters", "Months", "Weeks", "DayOfWeek", "WeekOfYear", "MonthOfYear", "QuarterOfYear", "DayMonthOfYear", "HourOfDay", "DayHour", "DayHourMinute", "Day", "AgeInYears", "AgeInMonths", "AgeInQuarters", "AgeInWeeks", "AgeInDays", "YearsBusiness", "QuartersBusiness", "QuarterOfYearBusiness", "MonthsBusiness", "MonthOfYearBusiness", "WeeksBusiness", "DaysBusiness", "WeekOfYearBusiness", "Custom"]  # noqa: E501
        if banding_type not in allowed_values:
            raise ValueError(
                "Invalid value for `banding_type` ({0}), must be one of {1}"  # noqa: E501
                .format(banding_type, allowed_values)
            )

        self._banding_type = banding_type

    @property
    def list(self):
        """Gets the list of this ListRule.  # noqa: E501


        :return: The list of this ListRule.  # noqa: E501
        :rtype: str
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this ListRule.


        :param list: The list of this ListRule.  # noqa: E501
        :type: str
        """

        self._list = list

    @property
    def variable_name(self):
        """Gets the variable_name of this ListRule.  # noqa: E501


        :return: The variable_name of this ListRule.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this ListRule.


        :param variable_name: The variable_name of this ListRule.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
