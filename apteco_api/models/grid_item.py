# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GridItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'variable_name': 'str',
        'detail': 'str',
        'unclassified_format': 'str',
        'description': 'str'
    }

    attribute_map = {
        'variable_name': 'variableName',
        'detail': 'detail',
        'unclassified_format': 'unclassifiedFormat',
        'description': 'description'
    }

    def __init__(self, variable_name=None, detail=None, unclassified_format=None, description=None):  # noqa: E501
        """GridItem - a model defined in OpenAPI"""  # noqa: E501

        self._variable_name = None
        self._detail = None
        self._unclassified_format = None
        self._description = None
        self.discriminator = None

        self.variable_name = variable_name
        self.detail = detail
        self.unclassified_format = unclassified_format
        self.description = description

    @property
    def variable_name(self):
        """Gets the variable_name of this GridItem.  # noqa: E501

        The name of the FastStats variable to display data for in the grid  # noqa: E501

        :return: The variable_name of this GridItem.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this GridItem.

        The name of the FastStats variable to display data for in the grid  # noqa: E501

        :param variable_name: The variable_name of this GridItem.  # noqa: E501
        :type: str
        """
        if variable_name is None:
            raise ValueError("Invalid value for `variable_name`, must not be `None`")  # noqa: E501

        self._variable_name = variable_name

    @property
    def detail(self):
        """Gets the detail of this GridItem.  # noqa: E501

        Whether to show codes or descriptions for this grid item  # noqa: E501

        :return: The detail of this GridItem.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this GridItem.

        Whether to show codes or descriptions for this grid item  # noqa: E501

        :param detail: The detail of this GridItem.  # noqa: E501
        :type: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501
        allowed_values = ["Code", "Description"]  # noqa: E501
        if detail not in allowed_values:
            raise ValueError(
                "Invalid value for `detail` ({0}), must be one of {1}"  # noqa: E501
                .format(detail, allowed_values)
            )

        self._detail = detail

    @property
    def unclassified_format(self):
        """Gets the unclassified_format of this GridItem.  # noqa: E501

        Whether to output unclassified as empty or taken from the design  # noqa: E501

        :return: The unclassified_format of this GridItem.  # noqa: E501
        :rtype: str
        """
        return self._unclassified_format

    @unclassified_format.setter
    def unclassified_format(self, unclassified_format):
        """Sets the unclassified_format of this GridItem.

        Whether to output unclassified as empty or taken from the design  # noqa: E501

        :param unclassified_format: The unclassified_format of this GridItem.  # noqa: E501
        :type: str
        """
        if unclassified_format is None:
            raise ValueError("Invalid value for `unclassified_format`, must not be `None`")  # noqa: E501
        allowed_values = ["FromDesign", "Empty"]  # noqa: E501
        if unclassified_format not in allowed_values:
            raise ValueError(
                "Invalid value for `unclassified_format` ({0}), must be one of {1}"  # noqa: E501
                .format(unclassified_format, allowed_values)
            )

        self._unclassified_format = unclassified_format

    @property
    def description(self):
        """Gets the description of this GridItem.  # noqa: E501

        The description to use for this item  # noqa: E501

        :return: The description of this GridItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GridItem.

        The description to use for this item  # noqa: E501

        :param description: The description of this GridItem.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
