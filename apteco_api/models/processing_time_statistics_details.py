# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProcessingTimeStatisticsDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start': 'datetime',
        'end': 'datetime',
        'measure': 'str',
        'dimension': 'str',
        'job_property_selection_type': 'str',
        'job_property_selections': 'list[str]'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'measure': 'measure',
        'dimension': 'dimension',
        'job_property_selection_type': 'jobPropertySelectionType',
        'job_property_selections': 'jobPropertySelections'
    }

    def __init__(self, start=None, end=None, measure=None, dimension=None, job_property_selection_type=None, job_property_selections=None):  # noqa: E501
        """ProcessingTimeStatisticsDetails - a model defined in OpenAPI"""  # noqa: E501

        self._start = None
        self._end = None
        self._measure = None
        self._dimension = None
        self._job_property_selection_type = None
        self._job_property_selections = None
        self.discriminator = None

        self.start = start
        self.end = end
        self.measure = measure
        self.dimension = dimension
        self.job_property_selection_type = job_property_selection_type
        self.job_property_selections = job_property_selections

    @property
    def start(self):
        """Gets the start of this ProcessingTimeStatisticsDetails.  # noqa: E501

        The start date and time of window of jobs to analyse  # noqa: E501

        :return: The start of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ProcessingTimeStatisticsDetails.

        The start date and time of window of jobs to analyse  # noqa: E501

        :param start: The start of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :type: datetime
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this ProcessingTimeStatisticsDetails.  # noqa: E501

        The end date and time of window of jobs to analyse  # noqa: E501

        :return: The end of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ProcessingTimeStatisticsDetails.

        The end date and time of window of jobs to analyse  # noqa: E501

        :param end: The end of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :type: datetime
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def measure(self):
        """Gets the measure of this ProcessingTimeStatisticsDetails.  # noqa: E501

        The type of processing time to measure  # noqa: E501

        :return: The measure of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :rtype: str
        """
        return self._measure

    @measure.setter
    def measure(self, measure):
        """Sets the measure of this ProcessingTimeStatisticsDetails.

        The type of processing time to measure  # noqa: E501

        :param measure: The measure of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :type: str
        """
        if measure is None:
            raise ValueError("Invalid value for `measure`, must not be `None`")  # noqa: E501
        allowed_values = ["ProcessingTime", "QueueTime", "TotalTime"]  # noqa: E501
        if measure not in allowed_values:
            raise ValueError(
                "Invalid value for `measure` ({0}), must be one of {1}"  # noqa: E501
                .format(measure, allowed_values)
            )

        self._measure = measure

    @property
    def dimension(self):
        """Gets the dimension of this ProcessingTimeStatisticsDetails.  # noqa: E501

        The type of thing to break down the jobs into - either a time period or other property such as job type  # noqa: E501

        :return: The dimension of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this ProcessingTimeStatisticsDetails.

        The type of thing to break down the jobs into - either a time period or other property such as job type  # noqa: E501

        :param dimension: The dimension of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :type: str
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")  # noqa: E501
        allowed_values = ["Years", "Quarters", "Months", "Weeks", "Days", "Hours", "Minutes", "JobType", "Username"]  # noqa: E501
        if dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `dimension` ({0}), must be one of {1}"  # noqa: E501
                .format(dimension, allowed_values)
            )

        self._dimension = dimension

    @property
    def job_property_selection_type(self):
        """Gets the job_property_selection_type of this ProcessingTimeStatisticsDetails.  # noqa: E501

        The property to use to select on the jobs to analyse  # noqa: E501

        :return: The job_property_selection_type of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :rtype: str
        """
        return self._job_property_selection_type

    @job_property_selection_type.setter
    def job_property_selection_type(self, job_property_selection_type):
        """Sets the job_property_selection_type of this ProcessingTimeStatisticsDetails.

        The property to use to select on the jobs to analyse  # noqa: E501

        :param job_property_selection_type: The job_property_selection_type of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :type: str
        """
        if job_property_selection_type is None:
            raise ValueError("Invalid value for `job_property_selection_type`, must not be `None`")  # noqa: E501
        allowed_values = ["AllJobs", "Username", "JobType"]  # noqa: E501
        if job_property_selection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_property_selection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_property_selection_type, allowed_values)
            )

        self._job_property_selection_type = job_property_selection_type

    @property
    def job_property_selections(self):
        """Gets the job_property_selections of this ProcessingTimeStatisticsDetails.  # noqa: E501

        The set of property values to use to select the jobs  # noqa: E501

        :return: The job_property_selections of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._job_property_selections

    @job_property_selections.setter
    def job_property_selections(self, job_property_selections):
        """Sets the job_property_selections of this ProcessingTimeStatisticsDetails.

        The set of property values to use to select the jobs  # noqa: E501

        :param job_property_selections: The job_property_selections of this ProcessingTimeStatisticsDetails.  # noqa: E501
        :type: list[str]
        """
        if job_property_selections is None:
            raise ValueError("Invalid value for `job_property_selections`, must not be `None`")  # noqa: E501

        self._job_property_selections = job_property_selections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessingTimeStatisticsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
