# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AudienceCheckDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audience_update_id': 'int',
        'timestamp': 'datetime',
        'fast_stats_build_date': 'datetime',
        'user': 'UserDisplayDetails',
        'nett_counts': 'list[Count]',
        'dimension_results': 'list[CheckDimensionResult]'
    }

    attribute_map = {
        'audience_update_id': 'audienceUpdateId',
        'timestamp': 'timestamp',
        'fast_stats_build_date': 'fastStatsBuildDate',
        'user': 'user',
        'nett_counts': 'nettCounts',
        'dimension_results': 'dimensionResults'
    }

    def __init__(self, audience_update_id=None, timestamp=None, fast_stats_build_date=None, user=None, nett_counts=None, dimension_results=None):  # noqa: E501
        """AudienceCheckDetail - a model defined in OpenAPI"""  # noqa: E501

        self._audience_update_id = None
        self._timestamp = None
        self._fast_stats_build_date = None
        self._user = None
        self._nett_counts = None
        self._dimension_results = None
        self.discriminator = None

        self.audience_update_id = audience_update_id
        self.timestamp = timestamp
        self.fast_stats_build_date = fast_stats_build_date
        self.user = user
        self.nett_counts = nett_counts
        self.dimension_results = dimension_results

    @property
    def audience_update_id(self):
        """Gets the audience_update_id of this AudienceCheckDetail.  # noqa: E501

        The id of the update (audience version) that the export was created from  # noqa: E501

        :return: The audience_update_id of this AudienceCheckDetail.  # noqa: E501
        :rtype: int
        """
        return self._audience_update_id

    @audience_update_id.setter
    def audience_update_id(self, audience_update_id):
        """Sets the audience_update_id of this AudienceCheckDetail.

        The id of the update (audience version) that the export was created from  # noqa: E501

        :param audience_update_id: The audience_update_id of this AudienceCheckDetail.  # noqa: E501
        :type: int
        """
        if audience_update_id is None:
            raise ValueError("Invalid value for `audience_update_id`, must not be `None`")  # noqa: E501

        self._audience_update_id = audience_update_id

    @property
    def timestamp(self):
        """Gets the timestamp of this AudienceCheckDetail.  # noqa: E501

        The date and time that the export was produced  # noqa: E501

        :return: The timestamp of this AudienceCheckDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AudienceCheckDetail.

        The date and time that the export was produced  # noqa: E501

        :param timestamp: The timestamp of this AudienceCheckDetail.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def fast_stats_build_date(self):
        """Gets the fast_stats_build_date of this AudienceCheckDetail.  # noqa: E501

        The date and time that the FastStats system used to create this export was built  # noqa: E501

        :return: The fast_stats_build_date of this AudienceCheckDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._fast_stats_build_date

    @fast_stats_build_date.setter
    def fast_stats_build_date(self, fast_stats_build_date):
        """Sets the fast_stats_build_date of this AudienceCheckDetail.

        The date and time that the FastStats system used to create this export was built  # noqa: E501

        :param fast_stats_build_date: The fast_stats_build_date of this AudienceCheckDetail.  # noqa: E501
        :type: datetime
        """
        if fast_stats_build_date is None:
            raise ValueError("Invalid value for `fast_stats_build_date`, must not be `None`")  # noqa: E501

        self._fast_stats_build_date = fast_stats_build_date

    @property
    def user(self):
        """Gets the user of this AudienceCheckDetail.  # noqa: E501


        :return: The user of this AudienceCheckDetail.  # noqa: E501
        :rtype: UserDisplayDetails
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AudienceCheckDetail.


        :param user: The user of this AudienceCheckDetail.  # noqa: E501
        :type: UserDisplayDetails
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def nett_counts(self):
        """Gets the nett_counts of this AudienceCheckDetail.  # noqa: E501

        The set of overall counts for the audience behind this export  # noqa: E501

        :return: The nett_counts of this AudienceCheckDetail.  # noqa: E501
        :rtype: list[Count]
        """
        return self._nett_counts

    @nett_counts.setter
    def nett_counts(self, nett_counts):
        """Sets the nett_counts of this AudienceCheckDetail.

        The set of overall counts for the audience behind this export  # noqa: E501

        :param nett_counts: The nett_counts of this AudienceCheckDetail.  # noqa: E501
        :type: list[Count]
        """
        if nett_counts is None:
            raise ValueError("Invalid value for `nett_counts`, must not be `None`")  # noqa: E501

        self._nett_counts = nett_counts

    @property
    def dimension_results(self):
        """Gets the dimension_results of this AudienceCheckDetail.  # noqa: E501

        The list of dimension results containing audience and base counts  # noqa: E501

        :return: The dimension_results of this AudienceCheckDetail.  # noqa: E501
        :rtype: list[CheckDimensionResult]
        """
        return self._dimension_results

    @dimension_results.setter
    def dimension_results(self, dimension_results):
        """Sets the dimension_results of this AudienceCheckDetail.

        The list of dimension results containing audience and base counts  # noqa: E501

        :param dimension_results: The dimension_results of this AudienceCheckDetail.  # noqa: E501
        :type: list[CheckDimensionResult]
        """
        if dimension_results is None:
            raise ValueError("Invalid value for `dimension_results`, must not be `None`")  # noqa: E501

        self._dimension_results = dimension_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceCheckDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
