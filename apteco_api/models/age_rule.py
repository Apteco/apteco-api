# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AgeRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'range_low': 'int',
        'range_high': 'int',
        'units': 'str',
        'relative_to': 'str',
        'reference_type': 'str',
        'reference_date': 'datetime'
    }

    attribute_map = {
        'range_low': 'rangeLow',
        'range_high': 'rangeHigh',
        'units': 'units',
        'relative_to': 'relativeTo',
        'reference_type': 'referenceType',
        'reference_date': 'referenceDate'
    }

    def __init__(self, range_low=None, range_high=None, units=None, relative_to=None, reference_type=None, reference_date=None):  # noqa: E501
        """AgeRule - a model defined in OpenAPI"""  # noqa: E501

        self._range_low = None
        self._range_high = None
        self._units = None
        self._relative_to = None
        self._reference_type = None
        self._reference_date = None
        self.discriminator = None

        if range_low is not None:
            self.range_low = range_low
        if range_high is not None:
            self.range_high = range_high
        if units is not None:
            self.units = units
        if relative_to is not None:
            self.relative_to = relative_to
        if reference_type is not None:
            self.reference_type = reference_type
        if reference_date is not None:
            self.reference_date = reference_date

    @property
    def range_low(self):
        """Gets the range_low of this AgeRule.  # noqa: E501


        :return: The range_low of this AgeRule.  # noqa: E501
        :rtype: int
        """
        return self._range_low

    @range_low.setter
    def range_low(self, range_low):
        """Sets the range_low of this AgeRule.


        :param range_low: The range_low of this AgeRule.  # noqa: E501
        :type: int
        """

        self._range_low = range_low

    @property
    def range_high(self):
        """Gets the range_high of this AgeRule.  # noqa: E501


        :return: The range_high of this AgeRule.  # noqa: E501
        :rtype: int
        """
        return self._range_high

    @range_high.setter
    def range_high(self, range_high):
        """Sets the range_high of this AgeRule.


        :param range_high: The range_high of this AgeRule.  # noqa: E501
        :type: int
        """

        self._range_high = range_high

    @property
    def units(self):
        """Gets the units of this AgeRule.  # noqa: E501


        :return: The units of this AgeRule.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this AgeRule.


        :param units: The units of this AgeRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Days", "Weeks", "Months", "Quarters", "Years"]  # noqa: E501
        if units not in allowed_values:
            raise ValueError(
                "Invalid value for `units` ({0}), must be one of {1}"  # noqa: E501
                .format(units, allowed_values)
            )

        self._units = units

    @property
    def relative_to(self):
        """Gets the relative_to of this AgeRule.  # noqa: E501


        :return: The relative_to of this AgeRule.  # noqa: E501
        :rtype: str
        """
        return self._relative_to

    @relative_to.setter
    def relative_to(self, relative_to):
        """Sets the relative_to of this AgeRule.


        :param relative_to: The relative_to of this AgeRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Actual", "Relative"]  # noqa: E501
        if relative_to not in allowed_values:
            raise ValueError(
                "Invalid value for `relative_to` ({0}), must be one of {1}"  # noqa: E501
                .format(relative_to, allowed_values)
            )

        self._relative_to = relative_to

    @property
    def reference_type(self):
        """Gets the reference_type of this AgeRule.  # noqa: E501


        :return: The reference_type of this AgeRule.  # noqa: E501
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this AgeRule.


        :param reference_type: The reference_type of this AgeRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Today", "ThisWeek", "ThisMonth", "ThisQuarter", "ThisYear", "ThisBusinessMonth", "ThisBusinessQuarter", "ThisBusinessYear", "LoadDate", "LoadWeek", "LoadMonth", "LoadQuarter", "LoadYear", "FirstPopulatedDate", "FirstPopulatedWeek", "FirstPopulatedMonth", "FirstPopulatedQuarter", "FirstPopulatedYear", "LastPopulatedDate", "LastPopulatedWeek", "LastPopulatedMonth", "LastPopulatedQuarter", "LastPopulatedYear"]  # noqa: E501
        if reference_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_type` ({0}), must be one of {1}"  # noqa: E501
                .format(reference_type, allowed_values)
            )

        self._reference_type = reference_type

    @property
    def reference_date(self):
        """Gets the reference_date of this AgeRule.  # noqa: E501


        :return: The reference_date of this AgeRule.  # noqa: E501
        :rtype: datetime
        """
        return self._reference_date

    @reference_date.setter
    def reference_date(self, reference_date):
        """Sets the reference_date of this AgeRule.


        :param reference_date: The reference_date of this AgeRule.  # noqa: E501
        :type: datetime
        """

        self._reference_date = reference_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgeRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
