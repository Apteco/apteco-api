# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AudienceUpdateSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'timestamp': 'datetime',
        'user': 'UserDisplayDetails',
        'title': 'str',
        'description': 'str',
        'owner': 'UserDisplayDetails',
        'is_deleted': 'bool',
        'resolve_table_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'timestamp': 'timestamp',
        'user': 'user',
        'title': 'title',
        'description': 'description',
        'owner': 'owner',
        'is_deleted': 'isDeleted',
        'resolve_table_name': 'resolveTableName'
    }

    def __init__(self, id=None, timestamp=None, user=None, title=None, description=None, owner=None, is_deleted=None, resolve_table_name=None):  # noqa: E501
        """AudienceUpdateSummary - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._timestamp = None
        self._user = None
        self._title = None
        self._description = None
        self._owner = None
        self._is_deleted = None
        self._resolve_table_name = None
        self.discriminator = None

        self.id = id
        self.timestamp = timestamp
        self.user = user
        self.title = title
        self.description = description
        self.owner = owner
        self.is_deleted = is_deleted
        self.resolve_table_name = resolve_table_name

    @property
    def id(self):
        """Gets the id of this AudienceUpdateSummary.  # noqa: E501

        The audience update's id  # noqa: E501

        :return: The id of this AudienceUpdateSummary.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudienceUpdateSummary.

        The audience update's id  # noqa: E501

        :param id: The id of this AudienceUpdateSummary.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this AudienceUpdateSummary.  # noqa: E501

        The timestamp of when the update happened  # noqa: E501

        :return: The timestamp of this AudienceUpdateSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AudienceUpdateSummary.

        The timestamp of when the update happened  # noqa: E501

        :param timestamp: The timestamp of this AudienceUpdateSummary.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this AudienceUpdateSummary.  # noqa: E501


        :return: The user of this AudienceUpdateSummary.  # noqa: E501
        :rtype: UserDisplayDetails
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AudienceUpdateSummary.


        :param user: The user of this AudienceUpdateSummary.  # noqa: E501
        :type: UserDisplayDetails
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def title(self):
        """Gets the title of this AudienceUpdateSummary.  # noqa: E501

        The title of the audience at the time of this update  # noqa: E501

        :return: The title of this AudienceUpdateSummary.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AudienceUpdateSummary.

        The title of the audience at the time of this update  # noqa: E501

        :param title: The title of this AudienceUpdateSummary.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this AudienceUpdateSummary.  # noqa: E501

        The description of the audience at the time of this update  # noqa: E501

        :return: The description of this AudienceUpdateSummary.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AudienceUpdateSummary.

        The description of the audience at the time of this update  # noqa: E501

        :param description: The description of this AudienceUpdateSummary.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this AudienceUpdateSummary.  # noqa: E501


        :return: The owner of this AudienceUpdateSummary.  # noqa: E501
        :rtype: UserDisplayDetails
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AudienceUpdateSummary.


        :param owner: The owner of this AudienceUpdateSummary.  # noqa: E501
        :type: UserDisplayDetails
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def is_deleted(self):
        """Gets the is_deleted of this AudienceUpdateSummary.  # noqa: E501

        Whether this update set the audience to be deleted or not  # noqa: E501

        :return: The is_deleted of this AudienceUpdateSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this AudienceUpdateSummary.

        Whether this update set the audience to be deleted or not  # noqa: E501

        :param is_deleted: The is_deleted of this AudienceUpdateSummary.  # noqa: E501
        :type: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def resolve_table_name(self):
        """Gets the resolve_table_name of this AudienceUpdateSummary.  # noqa: E501

        The FastStats table that the audience is defined against at the time of this update  # noqa: E501

        :return: The resolve_table_name of this AudienceUpdateSummary.  # noqa: E501
        :rtype: str
        """
        return self._resolve_table_name

    @resolve_table_name.setter
    def resolve_table_name(self, resolve_table_name):
        """Sets the resolve_table_name of this AudienceUpdateSummary.

        The FastStats table that the audience is defined against at the time of this update  # noqa: E501

        :param resolve_table_name: The resolve_table_name of this AudienceUpdateSummary.  # noqa: E501
        :type: str
        """
        if resolve_table_name is None:
            raise ValueError("Invalid value for `resolve_table_name`, must not be `None`")  # noqa: E501

        self._resolve_table_name = resolve_table_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudienceUpdateSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
