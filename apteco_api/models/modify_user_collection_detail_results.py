# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModifyUserCollectionDetailResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collection': 'UserCollectionDetail',
        'id': 'int',
        'succeeded': 'bool',
        'status': 'str',
        'status_code': 'int'
    }

    attribute_map = {
        'collection': 'collection',
        'id': 'id',
        'succeeded': 'succeeded',
        'status': 'status',
        'status_code': 'statusCode'
    }

    def __init__(self, collection=None, id=None, succeeded=None, status=None, status_code=None):  # noqa: E501
        """ModifyUserCollectionDetailResults - a model defined in OpenAPI"""  # noqa: E501

        self._collection = None
        self._id = None
        self._succeeded = None
        self._status = None
        self._status_code = None
        self.discriminator = None

        if collection is not None:
            self.collection = collection
        self.id = id
        self.succeeded = succeeded
        self.status = status
        self.status_code = status_code

    @property
    def collection(self):
        """Gets the collection of this ModifyUserCollectionDetailResults.  # noqa: E501


        :return: The collection of this ModifyUserCollectionDetailResults.  # noqa: E501
        :rtype: UserCollectionDetail
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ModifyUserCollectionDetailResults.


        :param collection: The collection of this ModifyUserCollectionDetailResults.  # noqa: E501
        :type: UserCollectionDetail
        """

        self._collection = collection

    @property
    def id(self):
        """Gets the id of this ModifyUserCollectionDetailResults.  # noqa: E501

        The id of the updated item  # noqa: E501

        :return: The id of this ModifyUserCollectionDetailResults.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModifyUserCollectionDetailResults.

        The id of the updated item  # noqa: E501

        :param id: The id of this ModifyUserCollectionDetailResults.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def succeeded(self):
        """Gets the succeeded of this ModifyUserCollectionDetailResults.  # noqa: E501

        Whether the modification succeeded or not  # noqa: E501

        :return: The succeeded of this ModifyUserCollectionDetailResults.  # noqa: E501
        :rtype: bool
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this ModifyUserCollectionDetailResults.

        Whether the modification succeeded or not  # noqa: E501

        :param succeeded: The succeeded of this ModifyUserCollectionDetailResults.  # noqa: E501
        :type: bool
        """
        if succeeded is None:
            raise ValueError("Invalid value for `succeeded`, must not be `None`")  # noqa: E501

        self._succeeded = succeeded

    @property
    def status(self):
        """Gets the status of this ModifyUserCollectionDetailResults.  # noqa: E501

        A status message associated with the modification  # noqa: E501

        :return: The status of this ModifyUserCollectionDetailResults.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModifyUserCollectionDetailResults.

        A status message associated with the modification  # noqa: E501

        :param status: The status of this ModifyUserCollectionDetailResults.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this ModifyUserCollectionDetailResults.  # noqa: E501

        A status code associated with the modification  # noqa: E501

        :return: The status_code of this ModifyUserCollectionDetailResults.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ModifyUserCollectionDetailResults.

        A status code associated with the modification  # noqa: E501

        :param status_code: The status_code of this ModifyUserCollectionDetailResults.  # noqa: E501
        :type: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyUserCollectionDetailResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
