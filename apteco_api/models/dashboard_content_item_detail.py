# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DashboardContentItemDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'drilldown_level': 'int',
        'description': 'str',
        'chart_type': 'str',
        'resolve_table_name': 'str',
        'dimensions': 'list[Dimension]',
        'measures': 'list[Measure]',
        'omit_zeros': 'bool',
        'omit_unclassified': 'bool'
    }

    attribute_map = {
        'drilldown_level': 'drilldownLevel',
        'description': 'description',
        'chart_type': 'chartType',
        'resolve_table_name': 'resolveTableName',
        'dimensions': 'dimensions',
        'measures': 'measures',
        'omit_zeros': 'omitZeros',
        'omit_unclassified': 'omitUnclassified'
    }

    def __init__(self, drilldown_level=None, description=None, chart_type=None, resolve_table_name=None, dimensions=None, measures=None, omit_zeros=None, omit_unclassified=None):  # noqa: E501
        """DashboardContentItemDetail - a model defined in OpenAPI"""  # noqa: E501

        self._drilldown_level = None
        self._description = None
        self._chart_type = None
        self._resolve_table_name = None
        self._dimensions = None
        self._measures = None
        self._omit_zeros = None
        self._omit_unclassified = None
        self.discriminator = None

        self.drilldown_level = drilldown_level
        if description is not None:
            self.description = description
        self.chart_type = chart_type
        self.resolve_table_name = resolve_table_name
        if dimensions is not None:
            self.dimensions = dimensions
        if measures is not None:
            self.measures = measures
        if omit_zeros is not None:
            self.omit_zeros = omit_zeros
        if omit_unclassified is not None:
            self.omit_unclassified = omit_unclassified

    @property
    def drilldown_level(self):
        """Gets the drilldown_level of this DashboardContentItemDetail.  # noqa: E501

        The drill down level of the dashboard item  # noqa: E501

        :return: The drilldown_level of this DashboardContentItemDetail.  # noqa: E501
        :rtype: int
        """
        return self._drilldown_level

    @drilldown_level.setter
    def drilldown_level(self, drilldown_level):
        """Sets the drilldown_level of this DashboardContentItemDetail.

        The drill down level of the dashboard item  # noqa: E501

        :param drilldown_level: The drilldown_level of this DashboardContentItemDetail.  # noqa: E501
        :type: int
        """
        if drilldown_level is None:
            raise ValueError("Invalid value for `drilldown_level`, must not be `None`")  # noqa: E501

        self._drilldown_level = drilldown_level

    @property
    def description(self):
        """Gets the description of this DashboardContentItemDetail.  # noqa: E501

        The description of the dashboard item  # noqa: E501

        :return: The description of this DashboardContentItemDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardContentItemDetail.

        The description of the dashboard item  # noqa: E501

        :param description: The description of this DashboardContentItemDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def chart_type(self):
        """Gets the chart_type of this DashboardContentItemDetail.  # noqa: E501

        The chart type that will be shown in the dashboard item  # noqa: E501

        :return: The chart_type of this DashboardContentItemDetail.  # noqa: E501
        :rtype: str
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this DashboardContentItemDetail.

        The chart type that will be shown in the dashboard item  # noqa: E501

        :param chart_type: The chart_type of this DashboardContentItemDetail.  # noqa: E501
        :type: str
        """
        if chart_type is None:
            raise ValueError("Invalid value for `chart_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Bar", "Column", "Pie", "Donut", "Line", "UKPostArea", "NLProvinces", "NLMunicipalities", "DE2DigitPostCode", "CH2DigitPostCode", "AU2DigitPostCode", "USStates", "NumberCard"]  # noqa: E501
        if chart_type not in allowed_values:
            raise ValueError(
                "Invalid value for `chart_type` ({0}), must be one of {1}"  # noqa: E501
                .format(chart_type, allowed_values)
            )

        self._chart_type = chart_type

    @property
    def resolve_table_name(self):
        """Gets the resolve_table_name of this DashboardContentItemDetail.  # noqa: E501

        The table name that the data will resolve to  # noqa: E501

        :return: The resolve_table_name of this DashboardContentItemDetail.  # noqa: E501
        :rtype: str
        """
        return self._resolve_table_name

    @resolve_table_name.setter
    def resolve_table_name(self, resolve_table_name):
        """Sets the resolve_table_name of this DashboardContentItemDetail.

        The table name that the data will resolve to  # noqa: E501

        :param resolve_table_name: The resolve_table_name of this DashboardContentItemDetail.  # noqa: E501
        :type: str
        """
        if resolve_table_name is None:
            raise ValueError("Invalid value for `resolve_table_name`, must not be `None`")  # noqa: E501

        self._resolve_table_name = resolve_table_name

    @property
    def dimensions(self):
        """Gets the dimensions of this DashboardContentItemDetail.  # noqa: E501

        The dimensions of the dashboard item chart  # noqa: E501

        :return: The dimensions of this DashboardContentItemDetail.  # noqa: E501
        :rtype: list[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this DashboardContentItemDetail.

        The dimensions of the dashboard item chart  # noqa: E501

        :param dimensions: The dimensions of this DashboardContentItemDetail.  # noqa: E501
        :type: list[Dimension]
        """

        self._dimensions = dimensions

    @property
    def measures(self):
        """Gets the measures of this DashboardContentItemDetail.  # noqa: E501

        The measures of the dashboard item chart  # noqa: E501

        :return: The measures of this DashboardContentItemDetail.  # noqa: E501
        :rtype: list[Measure]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this DashboardContentItemDetail.

        The measures of the dashboard item chart  # noqa: E501

        :param measures: The measures of this DashboardContentItemDetail.  # noqa: E501
        :type: list[Measure]
        """

        self._measures = measures

    @property
    def omit_zeros(self):
        """Gets the omit_zeros of this DashboardContentItemDetail.  # noqa: E501

        Whether to omit zeroes in the data of the dashboard item  # noqa: E501

        :return: The omit_zeros of this DashboardContentItemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._omit_zeros

    @omit_zeros.setter
    def omit_zeros(self, omit_zeros):
        """Sets the omit_zeros of this DashboardContentItemDetail.

        Whether to omit zeroes in the data of the dashboard item  # noqa: E501

        :param omit_zeros: The omit_zeros of this DashboardContentItemDetail.  # noqa: E501
        :type: bool
        """

        self._omit_zeros = omit_zeros

    @property
    def omit_unclassified(self):
        """Gets the omit_unclassified of this DashboardContentItemDetail.  # noqa: E501

        Whether to omit unclassifieds in the data of the dashboard item  # noqa: E501

        :return: The omit_unclassified of this DashboardContentItemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._omit_unclassified

    @omit_unclassified.setter
    def omit_unclassified(self, omit_unclassified):
        """Sets the omit_unclassified of this DashboardContentItemDetail.

        Whether to omit unclassifieds in the data of the dashboard item  # noqa: E501

        :param omit_unclassified: The omit_unclassified of this DashboardContentItemDetail.  # noqa: E501
        :type: bool
        """

        self._omit_unclassified = omit_unclassified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardContentItemDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
