# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PerResponseTypePerChannelStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'responses_counts': 'list[int]',
        'total_responses_count': 'int'
    }

    attribute_map = {
        'responses_counts': 'responsesCounts',
        'total_responses_count': 'totalResponsesCount'
    }

    def __init__(self, responses_counts=None, total_responses_count=None):  # noqa: E501
        """PerResponseTypePerChannelStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._responses_counts = None
        self._total_responses_count = None
        self.discriminator = None

        self.responses_counts = responses_counts
        self.total_responses_count = total_responses_count

    @property
    def responses_counts(self):
        """Gets the responses_counts of this PerResponseTypePerChannelStatistics.  # noqa: E501

        The set of counts representing the number of responses for the corresponding response type and channel.  The first figure is data for the first day in the days list in the parent object, and so on.  # noqa: E501

        :return: The responses_counts of this PerResponseTypePerChannelStatistics.  # noqa: E501
        :rtype: list[int]
        """
        return self._responses_counts

    @responses_counts.setter
    def responses_counts(self, responses_counts):
        """Sets the responses_counts of this PerResponseTypePerChannelStatistics.

        The set of counts representing the number of responses for the corresponding response type and channel.  The first figure is data for the first day in the days list in the parent object, and so on.  # noqa: E501

        :param responses_counts: The responses_counts of this PerResponseTypePerChannelStatistics.  # noqa: E501
        :type: list[int]
        """
        if responses_counts is None:
            raise ValueError("Invalid value for `responses_counts`, must not be `None`")  # noqa: E501

        self._responses_counts = responses_counts

    @property
    def total_responses_count(self):
        """Gets the total_responses_count of this PerResponseTypePerChannelStatistics.  # noqa: E501

        The total number of responses for the given response type and channel  # noqa: E501

        :return: The total_responses_count of this PerResponseTypePerChannelStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_responses_count

    @total_responses_count.setter
    def total_responses_count(self, total_responses_count):
        """Sets the total_responses_count of this PerResponseTypePerChannelStatistics.

        The total number of responses for the given response type and channel  # noqa: E501

        :param total_responses_count: The total_responses_count of this PerResponseTypePerChannelStatistics.  # noqa: E501
        :type: int
        """
        if total_responses_count is None:
            raise ValueError("Invalid value for `total_responses_count`, must not be `None`")  # noqa: E501

        self._total_responses_count = total_responses_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerResponseTypePerChannelStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
