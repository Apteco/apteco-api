# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ResponseStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'days': 'list[str]',
        'per_response_type_statistics_map': 'ResponseStatisticsPerResponseTypeStatisticsMap',
        'statistics_timestamp': 'datetime'
    }

    attribute_map = {
        'days': 'days',
        'per_response_type_statistics_map': 'perResponseTypeStatisticsMap',
        'statistics_timestamp': 'statisticsTimestamp'
    }

    def __init__(self, days=None, per_response_type_statistics_map=None, statistics_timestamp=None):  # noqa: E501
        """ResponseStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._days = None
        self._per_response_type_statistics_map = None
        self._statistics_timestamp = None
        self.discriminator = None

        self.days = days
        self.per_response_type_statistics_map = per_response_type_statistics_map
        if statistics_timestamp is not None:
            self.statistics_timestamp = statistics_timestamp

    @property
    def days(self):
        """Gets the days of this ResponseStatistics.  # noqa: E501

        The set of days where response information is available  # noqa: E501

        :return: The days of this ResponseStatistics.  # noqa: E501
        :rtype: list[str]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this ResponseStatistics.

        The set of days where response information is available  # noqa: E501

        :param days: The days of this ResponseStatistics.  # noqa: E501
        :type: list[str]
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501

        self._days = days

    @property
    def per_response_type_statistics_map(self):
        """Gets the per_response_type_statistics_map of this ResponseStatistics.  # noqa: E501


        :return: The per_response_type_statistics_map of this ResponseStatistics.  # noqa: E501
        :rtype: ResponseStatisticsPerResponseTypeStatisticsMap
        """
        return self._per_response_type_statistics_map

    @per_response_type_statistics_map.setter
    def per_response_type_statistics_map(self, per_response_type_statistics_map):
        """Sets the per_response_type_statistics_map of this ResponseStatistics.


        :param per_response_type_statistics_map: The per_response_type_statistics_map of this ResponseStatistics.  # noqa: E501
        :type: ResponseStatisticsPerResponseTypeStatisticsMap
        """
        if per_response_type_statistics_map is None:
            raise ValueError("Invalid value for `per_response_type_statistics_map`, must not be `None`")  # noqa: E501

        self._per_response_type_statistics_map = per_response_type_statistics_map

    @property
    def statistics_timestamp(self):
        """Gets the statistics_timestamp of this ResponseStatistics.  # noqa: E501

        The date and time that the response statistics were calculated  # noqa: E501

        :return: The statistics_timestamp of this ResponseStatistics.  # noqa: E501
        :rtype: datetime
        """
        return self._statistics_timestamp

    @statistics_timestamp.setter
    def statistics_timestamp(self, statistics_timestamp):
        """Sets the statistics_timestamp of this ResponseStatistics.

        The date and time that the response statistics were calculated  # noqa: E501

        :param statistics_timestamp: The statistics_timestamp of this ResponseStatistics.  # noqa: E501
        :type: datetime
        """

        self._statistics_timestamp = statistics_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
