# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreatedShareUpdateDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'share_update': 'ShareUpdate',
        'invalid_users_to_add': 'list[InvalidToShareUserDisplayDetails]',
        'invalid_users_to_remove': 'list[InvalidToShareUserDisplayDetails]'
    }

    attribute_map = {
        'share_update': 'shareUpdate',
        'invalid_users_to_add': 'invalidUsersToAdd',
        'invalid_users_to_remove': 'invalidUsersToRemove'
    }

    def __init__(self, share_update=None, invalid_users_to_add=None, invalid_users_to_remove=None):  # noqa: E501
        """CreatedShareUpdateDetail - a model defined in OpenAPI"""  # noqa: E501

        self._share_update = None
        self._invalid_users_to_add = None
        self._invalid_users_to_remove = None
        self.discriminator = None

        self.share_update = share_update
        self.invalid_users_to_add = invalid_users_to_add
        self.invalid_users_to_remove = invalid_users_to_remove

    @property
    def share_update(self):
        """Gets the share_update of this CreatedShareUpdateDetail.  # noqa: E501


        :return: The share_update of this CreatedShareUpdateDetail.  # noqa: E501
        :rtype: ShareUpdate
        """
        return self._share_update

    @share_update.setter
    def share_update(self, share_update):
        """Sets the share_update of this CreatedShareUpdateDetail.


        :param share_update: The share_update of this CreatedShareUpdateDetail.  # noqa: E501
        :type: ShareUpdate
        """
        if share_update is None:
            raise ValueError("Invalid value for `share_update`, must not be `None`")  # noqa: E501

        self._share_update = share_update

    @property
    def invalid_users_to_add(self):
        """Gets the invalid_users_to_add of this CreatedShareUpdateDetail.  # noqa: E501

        Details of the users that were specified to be added to the  share in the update, but that were not valid users to be shared to  # noqa: E501

        :return: The invalid_users_to_add of this CreatedShareUpdateDetail.  # noqa: E501
        :rtype: list[InvalidToShareUserDisplayDetails]
        """
        return self._invalid_users_to_add

    @invalid_users_to_add.setter
    def invalid_users_to_add(self, invalid_users_to_add):
        """Sets the invalid_users_to_add of this CreatedShareUpdateDetail.

        Details of the users that were specified to be added to the  share in the update, but that were not valid users to be shared to  # noqa: E501

        :param invalid_users_to_add: The invalid_users_to_add of this CreatedShareUpdateDetail.  # noqa: E501
        :type: list[InvalidToShareUserDisplayDetails]
        """
        if invalid_users_to_add is None:
            raise ValueError("Invalid value for `invalid_users_to_add`, must not be `None`")  # noqa: E501

        self._invalid_users_to_add = invalid_users_to_add

    @property
    def invalid_users_to_remove(self):
        """Gets the invalid_users_to_remove of this CreatedShareUpdateDetail.  # noqa: E501

        Details of the users that were specified to be removed from the  share in the update, but that were not valid users to be removed from  sharing the shareable item  # noqa: E501

        :return: The invalid_users_to_remove of this CreatedShareUpdateDetail.  # noqa: E501
        :rtype: list[InvalidToShareUserDisplayDetails]
        """
        return self._invalid_users_to_remove

    @invalid_users_to_remove.setter
    def invalid_users_to_remove(self, invalid_users_to_remove):
        """Sets the invalid_users_to_remove of this CreatedShareUpdateDetail.

        Details of the users that were specified to be removed from the  share in the update, but that were not valid users to be removed from  sharing the shareable item  # noqa: E501

        :param invalid_users_to_remove: The invalid_users_to_remove of this CreatedShareUpdateDetail.  # noqa: E501
        :type: list[InvalidToShareUserDisplayDetails]
        """
        if invalid_users_to_remove is None:
            raise ValueError("Invalid value for `invalid_users_to_remove`, must not be `None`")  # noqa: E501

        self._invalid_users_to_remove = invalid_users_to_remove

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatedShareUpdateDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
