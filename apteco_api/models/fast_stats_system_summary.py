# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FastStatsSystemSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'view_name': 'str',
        'description': 'str',
        'fast_stats_build_date': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'view_name': 'viewName',
        'description': 'description',
        'fast_stats_build_date': 'fastStatsBuildDate'
    }

    def __init__(self, name=None, view_name=None, description=None, fast_stats_build_date=None):  # noqa: E501
        """FastStatsSystemSummary - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._view_name = None
        self._description = None
        self._fast_stats_build_date = None
        self.discriminator = None

        self.name = name
        self.view_name = view_name
        self.description = description
        if fast_stats_build_date is not None:
            self.fast_stats_build_date = fast_stats_build_date

    @property
    def name(self):
        """Gets the name of this FastStatsSystemSummary.  # noqa: E501

        The name of the FastStats system held in the API's configuration  # noqa: E501

        :return: The name of this FastStatsSystemSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FastStatsSystemSummary.

        The name of the FastStats system held in the API's configuration  # noqa: E501

        :param name: The name of this FastStatsSystemSummary.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def view_name(self):
        """Gets the view_name of this FastStatsSystemSummary.  # noqa: E501

        The name of the FastStats system as defined when the system was built  # noqa: E501

        :return: The view_name of this FastStatsSystemSummary.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this FastStatsSystemSummary.

        The name of the FastStats system as defined when the system was built  # noqa: E501

        :param view_name: The view_name of this FastStatsSystemSummary.  # noqa: E501
        :type: str
        """
        if view_name is None:
            raise ValueError("Invalid value for `view_name`, must not be `None`")  # noqa: E501

        self._view_name = view_name

    @property
    def description(self):
        """Gets the description of this FastStatsSystemSummary.  # noqa: E501

        The description for the FastStats system  # noqa: E501

        :return: The description of this FastStatsSystemSummary.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FastStatsSystemSummary.

        The description for the FastStats system  # noqa: E501

        :param description: The description of this FastStatsSystemSummary.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def fast_stats_build_date(self):
        """Gets the fast_stats_build_date of this FastStatsSystemSummary.  # noqa: E501

        The date and time that the FastStats system was built  # noqa: E501

        :return: The fast_stats_build_date of this FastStatsSystemSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._fast_stats_build_date

    @fast_stats_build_date.setter
    def fast_stats_build_date(self, fast_stats_build_date):
        """Sets the fast_stats_build_date of this FastStatsSystemSummary.

        The date and time that the FastStats system was built  # noqa: E501

        :param fast_stats_build_date: The fast_stats_build_date of this FastStatsSystemSummary.  # noqa: E501
        :type: datetime
        """

        self._fast_stats_build_date = fast_stats_build_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FastStatsSystemSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
