# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RFV(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'frequency': 'RFVFrequency',
        'recency': 'RFVRecency',
        'value': 'RFVValue',
        'grouping_table': 'str',
        'transactional_table': 'str'
    }

    attribute_map = {
        'frequency': 'frequency',
        'recency': 'recency',
        'value': 'value',
        'grouping_table': 'groupingTable',
        'transactional_table': 'transactionalTable'
    }

    def __init__(self, frequency=None, recency=None, value=None, grouping_table=None, transactional_table=None):  # noqa: E501
        """RFV - a model defined in OpenAPI"""  # noqa: E501

        self._frequency = None
        self._recency = None
        self._value = None
        self._grouping_table = None
        self._transactional_table = None
        self.discriminator = None

        if frequency is not None:
            self.frequency = frequency
        if recency is not None:
            self.recency = recency
        if value is not None:
            self.value = value
        if grouping_table is not None:
            self.grouping_table = grouping_table
        if transactional_table is not None:
            self.transactional_table = transactional_table

    @property
    def frequency(self):
        """Gets the frequency of this RFV.  # noqa: E501


        :return: The frequency of this RFV.  # noqa: E501
        :rtype: RFVFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RFV.


        :param frequency: The frequency of this RFV.  # noqa: E501
        :type: RFVFrequency
        """

        self._frequency = frequency

    @property
    def recency(self):
        """Gets the recency of this RFV.  # noqa: E501


        :return: The recency of this RFV.  # noqa: E501
        :rtype: RFVRecency
        """
        return self._recency

    @recency.setter
    def recency(self, recency):
        """Sets the recency of this RFV.


        :param recency: The recency of this RFV.  # noqa: E501
        :type: RFVRecency
        """

        self._recency = recency

    @property
    def value(self):
        """Gets the value of this RFV.  # noqa: E501


        :return: The value of this RFV.  # noqa: E501
        :rtype: RFVValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RFV.


        :param value: The value of this RFV.  # noqa: E501
        :type: RFVValue
        """

        self._value = value

    @property
    def grouping_table(self):
        """Gets the grouping_table of this RFV.  # noqa: E501


        :return: The grouping_table of this RFV.  # noqa: E501
        :rtype: str
        """
        return self._grouping_table

    @grouping_table.setter
    def grouping_table(self, grouping_table):
        """Sets the grouping_table of this RFV.


        :param grouping_table: The grouping_table of this RFV.  # noqa: E501
        :type: str
        """

        self._grouping_table = grouping_table

    @property
    def transactional_table(self):
        """Gets the transactional_table of this RFV.  # noqa: E501


        :return: The transactional_table of this RFV.  # noqa: E501
        :rtype: str
        """
        return self._transactional_table

    @transactional_table.setter
    def transactional_table(self, transactional_table):
        """Sets the transactional_table of this RFV.


        :param transactional_table: The transactional_table of this RFV.  # noqa: E501
        :type: str
        """

        self._transactional_table = transactional_table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RFV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
