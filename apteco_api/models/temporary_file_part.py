# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemporaryFilePart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'part_number': 'int',
        'temporary_file_created': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'part_number': 'partNumber',
        'temporary_file_created': 'temporaryFileCreated'
    }

    def __init__(self, id=None, part_number=None, temporary_file_created=None):  # noqa: E501
        """TemporaryFilePart - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._part_number = None
        self._temporary_file_created = None
        self.discriminator = None

        self.id = id
        self.part_number = part_number
        self.temporary_file_created = temporary_file_created

    @property
    def id(self):
        """Gets the id of this TemporaryFilePart.  # noqa: E501

        The id of the temporary file that this part is for  # noqa: E501

        :return: The id of this TemporaryFilePart.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemporaryFilePart.

        The id of the temporary file that this part is for  # noqa: E501

        :param id: The id of this TemporaryFilePart.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def part_number(self):
        """Gets the part_number of this TemporaryFilePart.  # noqa: E501

        The number of this part of the temporary file  # noqa: E501

        :return: The part_number of this TemporaryFilePart.  # noqa: E501
        :rtype: int
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this TemporaryFilePart.

        The number of this part of the temporary file  # noqa: E501

        :param part_number: The part_number of this TemporaryFilePart.  # noqa: E501
        :type: int
        """
        if part_number is None:
            raise ValueError("Invalid value for `part_number`, must not be `None`")  # noqa: E501

        self._part_number = part_number

    @property
    def temporary_file_created(self):
        """Gets the temporary_file_created of this TemporaryFilePart.  # noqa: E501

        Whether the specified temporary file has been created from all the given parts or not.  If this is the case then the parts will no longer exist separately and will have been  combined into the temporary file.  # noqa: E501

        :return: The temporary_file_created of this TemporaryFilePart.  # noqa: E501
        :rtype: bool
        """
        return self._temporary_file_created

    @temporary_file_created.setter
    def temporary_file_created(self, temporary_file_created):
        """Sets the temporary_file_created of this TemporaryFilePart.

        Whether the specified temporary file has been created from all the given parts or not.  If this is the case then the parts will no longer exist separately and will have been  combined into the temporary file.  # noqa: E501

        :param temporary_file_created: The temporary_file_created of this TemporaryFilePart.  # noqa: E501
        :type: bool
        """
        if temporary_file_created is None:
            raise ValueError("Invalid value for `temporary_file_created`, must not be `None`")  # noqa: E501

        self._temporary_file_created = temporary_file_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemporaryFilePart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
