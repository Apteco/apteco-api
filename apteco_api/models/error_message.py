# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ErrorMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'int',
        'id': 'int',
        'message': 'str',
        'parameters': 'list[ErrorMessageParameter]'
    }

    attribute_map = {
        'code': 'code',
        'id': 'id',
        'message': 'message',
        'parameters': 'parameters'
    }

    def __init__(self, code=None, id=None, message=None, parameters=None):  # noqa: E501
        """ErrorMessage - a model defined in OpenAPI"""  # noqa: E501

        self._code = None
        self._id = None
        self._message = None
        self._parameters = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if parameters is not None:
            self.parameters = parameters

    @property
    def code(self):
        """Gets the code of this ErrorMessage.  # noqa: E501

        If present a code number for this type of error  # noqa: E501

        :return: The code of this ErrorMessage.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorMessage.

        If present a code number for this type of error  # noqa: E501

        :param code: The code of this ErrorMessage.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def id(self):
        """Gets the id of this ErrorMessage.  # noqa: E501

        If present an id which can be looked up by an administrator on the server-side for more details  # noqa: E501

        :return: The id of this ErrorMessage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorMessage.

        If present an id which can be looked up by an administrator on the server-side for more details  # noqa: E501

        :param id: The id of this ErrorMessage.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this ErrorMessage.  # noqa: E501

        If present a message describing the error  # noqa: E501

        :return: The message of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorMessage.

        If present a message describing the error  # noqa: E501

        :param message: The message of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def parameters(self):
        """Gets the parameters of this ErrorMessage.  # noqa: E501

        If present a list of parameters associated with this error  # noqa: E501

        :return: The parameters of this ErrorMessage.  # noqa: E501
        :rtype: list[ErrorMessageParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ErrorMessage.

        If present a list of parameters associated with this error  # noqa: E501

        :param parameters: The parameters of this ErrorMessage.  # noqa: E501
        :type: list[ErrorMessageParameter]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
