# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Row(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'codes': 'str',
        'descriptions': 'str'
    }

    attribute_map = {
        'codes': 'codes',
        'descriptions': 'descriptions'
    }

    def __init__(self, codes=None, descriptions=None):  # noqa: E501
        """Row - a model defined in OpenAPI"""  # noqa: E501

        self._codes = None
        self._descriptions = None
        self.discriminator = None

        self.codes = codes
        self.descriptions = descriptions

    @property
    def codes(self):
        """Gets the codes of this Row.  # noqa: E501

        A tab delimited list of variable codes for this row of the results.  There should be one value per column.  If the value of the item in the tab delimited list for a particular column is empty then the description  for the corresponding column should be used as the code.  # noqa: E501

        :return: The codes of this Row.  # noqa: E501
        :rtype: str
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this Row.

        A tab delimited list of variable codes for this row of the results.  There should be one value per column.  If the value of the item in the tab delimited list for a particular column is empty then the description  for the corresponding column should be used as the code.  # noqa: E501

        :param codes: The codes of this Row.  # noqa: E501
        :type: str
        """
        if codes is None:
            raise ValueError("Invalid value for `codes`, must not be `None`")  # noqa: E501

        self._codes = codes

    @property
    def descriptions(self):
        """Gets the descriptions of this Row.  # noqa: E501

        A tab delimited list of variable descriptions for this row of the results.  There should be one value per column  # noqa: E501

        :return: The descriptions of this Row.  # noqa: E501
        :rtype: str
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this Row.

        A tab delimited list of variable descriptions for this row of the results.  There should be one value per column  # noqa: E501

        :param descriptions: The descriptions of this Row.  # noqa: E501
        :type: str
        """
        if descriptions is None:
            raise ValueError("Invalid value for `descriptions`, must not be `None`")  # noqa: E501

        self._descriptions = descriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Row):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
