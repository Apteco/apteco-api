# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AbstractRenderSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'title': 'str',
        'page_width': 'int',
        'page_height': 'int',
        'visualisation_width': 'int',
        'visualisation_height': 'int',
        'ran_successfully': 'bool',
        'notes_title': 'str',
        'notes': 'str',
        'show_notes': 'bool',
        'selection_title': 'str',
        'show_selection': 'bool',
        'last_run_details': 'LastRunDetails',
        'query_details': 'QueryDetails'
    }

    attribute_map = {
        'type': 'type',
        'title': 'title',
        'page_width': 'pageWidth',
        'page_height': 'pageHeight',
        'visualisation_width': 'visualisationWidth',
        'visualisation_height': 'visualisationHeight',
        'ran_successfully': 'ranSuccessfully',
        'notes_title': 'notesTitle',
        'notes': 'notes',
        'show_notes': 'showNotes',
        'selection_title': 'selectionTitle',
        'show_selection': 'showSelection',
        'last_run_details': 'lastRunDetails',
        'query_details': 'queryDetails'
    }

    def __init__(self, type=None, title=None, page_width=None, page_height=None, visualisation_width=None, visualisation_height=None, ran_successfully=None, notes_title=None, notes=None, show_notes=None, selection_title=None, show_selection=None, last_run_details=None, query_details=None):  # noqa: E501
        """AbstractRenderSpec - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._title = None
        self._page_width = None
        self._page_height = None
        self._visualisation_width = None
        self._visualisation_height = None
        self._ran_successfully = None
        self._notes_title = None
        self._notes = None
        self._show_notes = None
        self._selection_title = None
        self._show_selection = None
        self._last_run_details = None
        self._query_details = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if title is not None:
            self.title = title
        if page_width is not None:
            self.page_width = page_width
        if page_height is not None:
            self.page_height = page_height
        if visualisation_width is not None:
            self.visualisation_width = visualisation_width
        if visualisation_height is not None:
            self.visualisation_height = visualisation_height
        if ran_successfully is not None:
            self.ran_successfully = ran_successfully
        if notes_title is not None:
            self.notes_title = notes_title
        if notes is not None:
            self.notes = notes
        if show_notes is not None:
            self.show_notes = show_notes
        if selection_title is not None:
            self.selection_title = selection_title
        if show_selection is not None:
            self.show_selection = show_selection
        if last_run_details is not None:
            self.last_run_details = last_run_details
        if query_details is not None:
            self.query_details = query_details

    @property
    def type(self):
        """Gets the type of this AbstractRenderSpec.  # noqa: E501


        :return: The type of this AbstractRenderSpec.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AbstractRenderSpec.


        :param type: The type of this AbstractRenderSpec.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def title(self):
        """Gets the title of this AbstractRenderSpec.  # noqa: E501


        :return: The title of this AbstractRenderSpec.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AbstractRenderSpec.


        :param title: The title of this AbstractRenderSpec.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def page_width(self):
        """Gets the page_width of this AbstractRenderSpec.  # noqa: E501


        :return: The page_width of this AbstractRenderSpec.  # noqa: E501
        :rtype: int
        """
        return self._page_width

    @page_width.setter
    def page_width(self, page_width):
        """Sets the page_width of this AbstractRenderSpec.


        :param page_width: The page_width of this AbstractRenderSpec.  # noqa: E501
        :type: int
        """

        self._page_width = page_width

    @property
    def page_height(self):
        """Gets the page_height of this AbstractRenderSpec.  # noqa: E501


        :return: The page_height of this AbstractRenderSpec.  # noqa: E501
        :rtype: int
        """
        return self._page_height

    @page_height.setter
    def page_height(self, page_height):
        """Sets the page_height of this AbstractRenderSpec.


        :param page_height: The page_height of this AbstractRenderSpec.  # noqa: E501
        :type: int
        """

        self._page_height = page_height

    @property
    def visualisation_width(self):
        """Gets the visualisation_width of this AbstractRenderSpec.  # noqa: E501


        :return: The visualisation_width of this AbstractRenderSpec.  # noqa: E501
        :rtype: int
        """
        return self._visualisation_width

    @visualisation_width.setter
    def visualisation_width(self, visualisation_width):
        """Sets the visualisation_width of this AbstractRenderSpec.


        :param visualisation_width: The visualisation_width of this AbstractRenderSpec.  # noqa: E501
        :type: int
        """

        self._visualisation_width = visualisation_width

    @property
    def visualisation_height(self):
        """Gets the visualisation_height of this AbstractRenderSpec.  # noqa: E501


        :return: The visualisation_height of this AbstractRenderSpec.  # noqa: E501
        :rtype: int
        """
        return self._visualisation_height

    @visualisation_height.setter
    def visualisation_height(self, visualisation_height):
        """Sets the visualisation_height of this AbstractRenderSpec.


        :param visualisation_height: The visualisation_height of this AbstractRenderSpec.  # noqa: E501
        :type: int
        """

        self._visualisation_height = visualisation_height

    @property
    def ran_successfully(self):
        """Gets the ran_successfully of this AbstractRenderSpec.  # noqa: E501


        :return: The ran_successfully of this AbstractRenderSpec.  # noqa: E501
        :rtype: bool
        """
        return self._ran_successfully

    @ran_successfully.setter
    def ran_successfully(self, ran_successfully):
        """Sets the ran_successfully of this AbstractRenderSpec.


        :param ran_successfully: The ran_successfully of this AbstractRenderSpec.  # noqa: E501
        :type: bool
        """

        self._ran_successfully = ran_successfully

    @property
    def notes_title(self):
        """Gets the notes_title of this AbstractRenderSpec.  # noqa: E501


        :return: The notes_title of this AbstractRenderSpec.  # noqa: E501
        :rtype: str
        """
        return self._notes_title

    @notes_title.setter
    def notes_title(self, notes_title):
        """Sets the notes_title of this AbstractRenderSpec.


        :param notes_title: The notes_title of this AbstractRenderSpec.  # noqa: E501
        :type: str
        """

        self._notes_title = notes_title

    @property
    def notes(self):
        """Gets the notes of this AbstractRenderSpec.  # noqa: E501


        :return: The notes of this AbstractRenderSpec.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AbstractRenderSpec.


        :param notes: The notes of this AbstractRenderSpec.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def show_notes(self):
        """Gets the show_notes of this AbstractRenderSpec.  # noqa: E501


        :return: The show_notes of this AbstractRenderSpec.  # noqa: E501
        :rtype: bool
        """
        return self._show_notes

    @show_notes.setter
    def show_notes(self, show_notes):
        """Sets the show_notes of this AbstractRenderSpec.


        :param show_notes: The show_notes of this AbstractRenderSpec.  # noqa: E501
        :type: bool
        """

        self._show_notes = show_notes

    @property
    def selection_title(self):
        """Gets the selection_title of this AbstractRenderSpec.  # noqa: E501


        :return: The selection_title of this AbstractRenderSpec.  # noqa: E501
        :rtype: str
        """
        return self._selection_title

    @selection_title.setter
    def selection_title(self, selection_title):
        """Sets the selection_title of this AbstractRenderSpec.


        :param selection_title: The selection_title of this AbstractRenderSpec.  # noqa: E501
        :type: str
        """

        self._selection_title = selection_title

    @property
    def show_selection(self):
        """Gets the show_selection of this AbstractRenderSpec.  # noqa: E501


        :return: The show_selection of this AbstractRenderSpec.  # noqa: E501
        :rtype: bool
        """
        return self._show_selection

    @show_selection.setter
    def show_selection(self, show_selection):
        """Sets the show_selection of this AbstractRenderSpec.


        :param show_selection: The show_selection of this AbstractRenderSpec.  # noqa: E501
        :type: bool
        """

        self._show_selection = show_selection

    @property
    def last_run_details(self):
        """Gets the last_run_details of this AbstractRenderSpec.  # noqa: E501


        :return: The last_run_details of this AbstractRenderSpec.  # noqa: E501
        :rtype: LastRunDetails
        """
        return self._last_run_details

    @last_run_details.setter
    def last_run_details(self, last_run_details):
        """Sets the last_run_details of this AbstractRenderSpec.


        :param last_run_details: The last_run_details of this AbstractRenderSpec.  # noqa: E501
        :type: LastRunDetails
        """

        self._last_run_details = last_run_details

    @property
    def query_details(self):
        """Gets the query_details of this AbstractRenderSpec.  # noqa: E501


        :return: The query_details of this AbstractRenderSpec.  # noqa: E501
        :rtype: QueryDetails
        """
        return self._query_details

    @query_details.setter
    def query_details(self, query_details):
        """Sets the query_details of this AbstractRenderSpec.


        :param query_details: The query_details of this AbstractRenderSpec.  # noqa: E501
        :type: QueryDetails
        """

        self._query_details = query_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractRenderSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
