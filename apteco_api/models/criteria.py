# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Criteria(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'variable_name': 'str',
        'path': 'str',
        'include': 'bool',
        'logic': 'str',
        'ignore_case': 'bool',
        'text_match_type': 'str',
        'value_rules': 'list[ValueRule]',
        'expression_rule': 'Expression',
        'today_at': 'str',
        'table_name': 'str',
        'name': 'str'
    }

    attribute_map = {
        'variable_name': 'variableName',
        'path': 'path',
        'include': 'include',
        'logic': 'logic',
        'ignore_case': 'ignoreCase',
        'text_match_type': 'textMatchType',
        'value_rules': 'valueRules',
        'expression_rule': 'expressionRule',
        'today_at': 'todayAt',
        'table_name': 'tableName',
        'name': 'name'
    }

    def __init__(self, variable_name=None, path=None, include=None, logic=None, ignore_case=None, text_match_type=None, value_rules=None, expression_rule=None, today_at=None, table_name=None, name=None):  # noqa: E501
        """Criteria - a model defined in OpenAPI"""  # noqa: E501

        self._variable_name = None
        self._path = None
        self._include = None
        self._logic = None
        self._ignore_case = None
        self._text_match_type = None
        self._value_rules = None
        self._expression_rule = None
        self._today_at = None
        self._table_name = None
        self._name = None
        self.discriminator = None

        if variable_name is not None:
            self.variable_name = variable_name
        if path is not None:
            self.path = path
        if include is not None:
            self.include = include
        if logic is not None:
            self.logic = logic
        if ignore_case is not None:
            self.ignore_case = ignore_case
        if text_match_type is not None:
            self.text_match_type = text_match_type
        if value_rules is not None:
            self.value_rules = value_rules
        if expression_rule is not None:
            self.expression_rule = expression_rule
        if today_at is not None:
            self.today_at = today_at
        self.table_name = table_name
        if name is not None:
            self.name = name

    @property
    def variable_name(self):
        """Gets the variable_name of this Criteria.  # noqa: E501


        :return: The variable_name of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this Criteria.


        :param variable_name: The variable_name of this Criteria.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def path(self):
        """Gets the path of this Criteria.  # noqa: E501


        :return: The path of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Criteria.


        :param path: The path of this Criteria.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def include(self):
        """Gets the include of this Criteria.  # noqa: E501


        :return: The include of this Criteria.  # noqa: E501
        :rtype: bool
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this Criteria.


        :param include: The include of this Criteria.  # noqa: E501
        :type: bool
        """

        self._include = include

    @property
    def logic(self):
        """Gets the logic of this Criteria.  # noqa: E501


        :return: The logic of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._logic

    @logic.setter
    def logic(self, logic):
        """Sets the logic of this Criteria.


        :param logic: The logic of this Criteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["OR", "AND"]  # noqa: E501
        if logic not in allowed_values:
            raise ValueError(
                "Invalid value for `logic` ({0}), must be one of {1}"  # noqa: E501
                .format(logic, allowed_values)
            )

        self._logic = logic

    @property
    def ignore_case(self):
        """Gets the ignore_case of this Criteria.  # noqa: E501


        :return: The ignore_case of this Criteria.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """Sets the ignore_case of this Criteria.


        :param ignore_case: The ignore_case of this Criteria.  # noqa: E501
        :type: bool
        """

        self._ignore_case = ignore_case

    @property
    def text_match_type(self):
        """Gets the text_match_type of this Criteria.  # noqa: E501


        :return: The text_match_type of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._text_match_type

    @text_match_type.setter
    def text_match_type(self, text_match_type):
        """Sets the text_match_type of this Criteria.


        :param text_match_type: The text_match_type of this Criteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["Ranges", "Is", "Begins", "Ends", "Contains"]  # noqa: E501
        if text_match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `text_match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(text_match_type, allowed_values)
            )

        self._text_match_type = text_match_type

    @property
    def value_rules(self):
        """Gets the value_rules of this Criteria.  # noqa: E501


        :return: The value_rules of this Criteria.  # noqa: E501
        :rtype: list[ValueRule]
        """
        return self._value_rules

    @value_rules.setter
    def value_rules(self, value_rules):
        """Sets the value_rules of this Criteria.


        :param value_rules: The value_rules of this Criteria.  # noqa: E501
        :type: list[ValueRule]
        """

        self._value_rules = value_rules

    @property
    def expression_rule(self):
        """Gets the expression_rule of this Criteria.  # noqa: E501


        :return: The expression_rule of this Criteria.  # noqa: E501
        :rtype: Expression
        """
        return self._expression_rule

    @expression_rule.setter
    def expression_rule(self, expression_rule):
        """Sets the expression_rule of this Criteria.


        :param expression_rule: The expression_rule of this Criteria.  # noqa: E501
        :type: Expression
        """

        self._expression_rule = expression_rule

    @property
    def today_at(self):
        """Gets the today_at of this Criteria.  # noqa: E501


        :return: The today_at of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._today_at

    @today_at.setter
    def today_at(self, today_at):
        """Sets the today_at of this Criteria.


        :param today_at: The today_at of this Criteria.  # noqa: E501
        :type: str
        """

        self._today_at = today_at

    @property
    def table_name(self):
        """Gets the table_name of this Criteria.  # noqa: E501


        :return: The table_name of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this Criteria.


        :param table_name: The table_name of this Criteria.  # noqa: E501
        :type: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def name(self):
        """Gets the name of this Criteria.  # noqa: E501


        :return: The name of this Criteria.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Criteria.


        :param name: The name of this Criteria.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Criteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
