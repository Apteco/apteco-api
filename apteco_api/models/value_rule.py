# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ValueRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'age_rule': 'AgeRule',
        'date_rule': 'DateRule',
        'list_rule': 'ListRule',
        'time_rule': 'TimeRule',
        'predefined_rule': 'str',
        'name': 'str'
    }

    attribute_map = {
        'age_rule': 'ageRule',
        'date_rule': 'dateRule',
        'list_rule': 'listRule',
        'time_rule': 'timeRule',
        'predefined_rule': 'predefinedRule',
        'name': 'name'
    }

    def __init__(self, age_rule=None, date_rule=None, list_rule=None, time_rule=None, predefined_rule=None, name=None):  # noqa: E501
        """ValueRule - a model defined in OpenAPI"""  # noqa: E501

        self._age_rule = None
        self._date_rule = None
        self._list_rule = None
        self._time_rule = None
        self._predefined_rule = None
        self._name = None
        self.discriminator = None

        if age_rule is not None:
            self.age_rule = age_rule
        if date_rule is not None:
            self.date_rule = date_rule
        if list_rule is not None:
            self.list_rule = list_rule
        if time_rule is not None:
            self.time_rule = time_rule
        if predefined_rule is not None:
            self.predefined_rule = predefined_rule
        if name is not None:
            self.name = name

    @property
    def age_rule(self):
        """Gets the age_rule of this ValueRule.  # noqa: E501


        :return: The age_rule of this ValueRule.  # noqa: E501
        :rtype: AgeRule
        """
        return self._age_rule

    @age_rule.setter
    def age_rule(self, age_rule):
        """Sets the age_rule of this ValueRule.


        :param age_rule: The age_rule of this ValueRule.  # noqa: E501
        :type: AgeRule
        """

        self._age_rule = age_rule

    @property
    def date_rule(self):
        """Gets the date_rule of this ValueRule.  # noqa: E501


        :return: The date_rule of this ValueRule.  # noqa: E501
        :rtype: DateRule
        """
        return self._date_rule

    @date_rule.setter
    def date_rule(self, date_rule):
        """Sets the date_rule of this ValueRule.


        :param date_rule: The date_rule of this ValueRule.  # noqa: E501
        :type: DateRule
        """

        self._date_rule = date_rule

    @property
    def list_rule(self):
        """Gets the list_rule of this ValueRule.  # noqa: E501


        :return: The list_rule of this ValueRule.  # noqa: E501
        :rtype: ListRule
        """
        return self._list_rule

    @list_rule.setter
    def list_rule(self, list_rule):
        """Sets the list_rule of this ValueRule.


        :param list_rule: The list_rule of this ValueRule.  # noqa: E501
        :type: ListRule
        """

        self._list_rule = list_rule

    @property
    def time_rule(self):
        """Gets the time_rule of this ValueRule.  # noqa: E501


        :return: The time_rule of this ValueRule.  # noqa: E501
        :rtype: TimeRule
        """
        return self._time_rule

    @time_rule.setter
    def time_rule(self, time_rule):
        """Sets the time_rule of this ValueRule.


        :param time_rule: The time_rule of this ValueRule.  # noqa: E501
        :type: TimeRule
        """

        self._time_rule = time_rule

    @property
    def predefined_rule(self):
        """Gets the predefined_rule of this ValueRule.  # noqa: E501


        :return: The predefined_rule of this ValueRule.  # noqa: E501
        :rtype: str
        """
        return self._predefined_rule

    @predefined_rule.setter
    def predefined_rule(self, predefined_rule):
        """Sets the predefined_rule of this ValueRule.


        :param predefined_rule: The predefined_rule of this ValueRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["DateRange", "AdhocDates", "AdhocValues", "Today", "Yesterday", "Tomorrow", "ThisWeek", "ThisMonth", "ThisQuarter", "ThisYear", "LastWeek", "Last4Weeks", "LastMonth", "LastQuarter", "LastYear", "NextWeek", "Next4Weeks", "NextMonth", "NextQuarter", "NextYear", "ThisWeekToDate", "ThisMonthToDate", "ThisQuarterToDate", "ThisYearToDate", "LastWeekToDate", "LastMonthToDate", "LastQuarterToDate", "LastYearToDate", "TheLastWeek", "TheLast4Weeks", "TheLastMonth", "TheLastQuarter", "TheLastYear", "TheNextWeek", "TheNext4Weeks", "TheNextMonth", "TheNextQuarter", "TheNextYear", "ThisBusinessMonth", "ThisBusinessQuarter", "ThisBusinessYear", "LastBusinessMonth", "LastBusinessQuarter", "LastBusinessYear", "NextBusinessMonth", "NextBusinessQuarter", "NextBusinessYear", "ThisBusinessMonthToDate", "ThisBusinessQuarterToDate", "ThisBusinessYearToDate", "LastBusinessMonthToDate", "LastBusinessQuarterToDate", "LastBusinessYearToDate", "CustomRule", "CustomAgeRule", "CustomTimeRule"]  # noqa: E501
        if predefined_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `predefined_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(predefined_rule, allowed_values)
            )

        self._predefined_rule = predefined_rule

    @property
    def name(self):
        """Gets the name of this ValueRule.  # noqa: E501


        :return: The name of this ValueRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ValueRule.


        :param name: The name of this ValueRule.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
