# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TelemetrySession(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'api_version': 'str',
        'client_type': 'str',
        'client_version': 'str',
        'session_start': 'datetime',
        'session_end': 'datetime',
        'last_session_action': 'datetime',
        'user_agent_details': 'str'
    }

    attribute_map = {
        'id': 'id',
        'api_version': 'apiVersion',
        'client_type': 'clientType',
        'client_version': 'clientVersion',
        'session_start': 'sessionStart',
        'session_end': 'sessionEnd',
        'last_session_action': 'lastSessionAction',
        'user_agent_details': 'userAgentDetails'
    }

    def __init__(self, id=None, api_version=None, client_type=None, client_version=None, session_start=None, session_end=None, last_session_action=None, user_agent_details=None):  # noqa: E501
        """TelemetrySession - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._api_version = None
        self._client_type = None
        self._client_version = None
        self._session_start = None
        self._session_end = None
        self._last_session_action = None
        self._user_agent_details = None
        self.discriminator = None

        self.id = id
        if api_version is not None:
            self.api_version = api_version
        self.client_type = client_type
        if client_version is not None:
            self.client_version = client_version
        if session_start is not None:
            self.session_start = session_start
        if session_end is not None:
            self.session_end = session_end
        if last_session_action is not None:
            self.last_session_action = last_session_action
        if user_agent_details is not None:
            self.user_agent_details = user_agent_details

    @property
    def id(self):
        """Gets the id of this TelemetrySession.  # noqa: E501

        The Id for this telemetry session  # noqa: E501

        :return: The id of this TelemetrySession.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TelemetrySession.

        The Id for this telemetry session  # noqa: E501

        :param id: The id of this TelemetrySession.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def api_version(self):
        """Gets the api_version of this TelemetrySession.  # noqa: E501

        The API version for this telemetry session  # noqa: E501

        :return: The api_version of this TelemetrySession.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this TelemetrySession.

        The API version for this telemetry session  # noqa: E501

        :param api_version: The api_version of this TelemetrySession.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def client_type(self):
        """Gets the client_type of this TelemetrySession.  # noqa: E501

        The client type for this telemetry session  # noqa: E501

        :return: The client_type of this TelemetrySession.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this TelemetrySession.

        The client type for this telemetry session  # noqa: E501

        :param client_type: The client_type of this TelemetrySession.  # noqa: E501
        :type: str
        """
        if client_type is None:
            raise ValueError("Invalid value for `client_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Orbit"]  # noqa: E501
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"  # noqa: E501
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def client_version(self):
        """Gets the client_version of this TelemetrySession.  # noqa: E501

        The client version for this telemetry session  # noqa: E501

        :return: The client_version of this TelemetrySession.  # noqa: E501
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this TelemetrySession.

        The client version for this telemetry session  # noqa: E501

        :param client_version: The client_version of this TelemetrySession.  # noqa: E501
        :type: str
        """

        self._client_version = client_version

    @property
    def session_start(self):
        """Gets the session_start of this TelemetrySession.  # noqa: E501

        The start time for this telemetry session  # noqa: E501

        :return: The session_start of this TelemetrySession.  # noqa: E501
        :rtype: datetime
        """
        return self._session_start

    @session_start.setter
    def session_start(self, session_start):
        """Sets the session_start of this TelemetrySession.

        The start time for this telemetry session  # noqa: E501

        :param session_start: The session_start of this TelemetrySession.  # noqa: E501
        :type: datetime
        """

        self._session_start = session_start

    @property
    def session_end(self):
        """Gets the session_end of this TelemetrySession.  # noqa: E501

        The end time for this telemetry session  # noqa: E501

        :return: The session_end of this TelemetrySession.  # noqa: E501
        :rtype: datetime
        """
        return self._session_end

    @session_end.setter
    def session_end(self, session_end):
        """Sets the session_end of this TelemetrySession.

        The end time for this telemetry session  # noqa: E501

        :param session_end: The session_end of this TelemetrySession.  # noqa: E501
        :type: datetime
        """

        self._session_end = session_end

    @property
    def last_session_action(self):
        """Gets the last_session_action of this TelemetrySession.  # noqa: E501

        The last action time for this telemetry session  # noqa: E501

        :return: The last_session_action of this TelemetrySession.  # noqa: E501
        :rtype: datetime
        """
        return self._last_session_action

    @last_session_action.setter
    def last_session_action(self, last_session_action):
        """Sets the last_session_action of this TelemetrySession.

        The last action time for this telemetry session  # noqa: E501

        :param last_session_action: The last_session_action of this TelemetrySession.  # noqa: E501
        :type: datetime
        """

        self._last_session_action = last_session_action

    @property
    def user_agent_details(self):
        """Gets the user_agent_details of this TelemetrySession.  # noqa: E501

        The user agent details for this telemetry session  # noqa: E501

        :return: The user_agent_details of this TelemetrySession.  # noqa: E501
        :rtype: str
        """
        return self._user_agent_details

    @user_agent_details.setter
    def user_agent_details(self, user_agent_details):
        """Sets the user_agent_details of this TelemetrySession.

        The user agent details for this telemetry session  # noqa: E501

        :param user_agent_details: The user_agent_details of this TelemetrySession.  # noqa: E501
        :type: str
        """

        self._user_agent_details = user_agent_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TelemetrySession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
