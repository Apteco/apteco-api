# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class VariableLookup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'variable': 'Variable',
        'var_codes_lookup': 'list[VarCode]'
    }

    attribute_map = {
        'variable': 'variable',
        'var_codes_lookup': 'varCodesLookup'
    }

    def __init__(self, variable=None, var_codes_lookup=None):  # noqa: E501
        """VariableLookup - a model defined in OpenAPI"""  # noqa: E501

        self._variable = None
        self._var_codes_lookup = None
        self.discriminator = None

        self.variable = variable
        if var_codes_lookup is not None:
            self.var_codes_lookup = var_codes_lookup

    @property
    def variable(self):
        """Gets the variable of this VariableLookup.  # noqa: E501


        :return: The variable of this VariableLookup.  # noqa: E501
        :rtype: Variable
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this VariableLookup.


        :param variable: The variable of this VariableLookup.  # noqa: E501
        :type: Variable
        """
        if variable is None:
            raise ValueError("Invalid value for `variable`, must not be `None`")  # noqa: E501

        self._variable = variable

    @property
    def var_codes_lookup(self):
        """Gets the var_codes_lookup of this VariableLookup.  # noqa: E501

        A partial list of var codes for the variable in question  # noqa: E501

        :return: The var_codes_lookup of this VariableLookup.  # noqa: E501
        :rtype: list[VarCode]
        """
        return self._var_codes_lookup

    @var_codes_lookup.setter
    def var_codes_lookup(self, var_codes_lookup):
        """Sets the var_codes_lookup of this VariableLookup.

        A partial list of var codes for the variable in question  # noqa: E501

        :param var_codes_lookup: The var_codes_lookup of this VariableLookup.  # noqa: E501
        :type: list[VarCode]
        """

        self._var_codes_lookup = var_codes_lookup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableLookup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
