# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RFVValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'variable_name': 'str',
        'action': 'str',
        'values': 'str'
    }

    attribute_map = {
        'variable_name': 'variableName',
        'action': 'action',
        'values': 'values'
    }

    def __init__(self, variable_name=None, action=None, values=None):  # noqa: E501
        """RFVValue - a model defined in OpenAPI"""  # noqa: E501

        self._variable_name = None
        self._action = None
        self._values = None
        self.discriminator = None

        if variable_name is not None:
            self.variable_name = variable_name
        if action is not None:
            self.action = action
        if values is not None:
            self.values = values

    @property
    def variable_name(self):
        """Gets the variable_name of this RFVValue.  # noqa: E501


        :return: The variable_name of this RFVValue.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this RFVValue.


        :param variable_name: The variable_name of this RFVValue.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def action(self):
        """Gets the action of this RFVValue.  # noqa: E501


        :return: The action of this RFVValue.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RFVValue.


        :param action: The action of this RFVValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sum", "Average", "Median", "Mode", "Minimum", "Maximum", "Distinct", "RankCoefficient"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def values(self):
        """Gets the values of this RFVValue.  # noqa: E501


        :return: The values of this RFVValue.  # noqa: E501
        :rtype: str
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this RFVValue.


        :param values: The values of this RFVValue.  # noqa: E501
        :type: str
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RFVValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
