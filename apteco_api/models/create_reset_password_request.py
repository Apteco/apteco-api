# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateResetPasswordRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email_address': 'str',
        'reset_password_url': 'str'
    }

    attribute_map = {
        'email_address': 'emailAddress',
        'reset_password_url': 'resetPasswordUrl'
    }

    def __init__(self, email_address=None, reset_password_url=None):  # noqa: E501
        """CreateResetPasswordRequest - a model defined in OpenAPI"""  # noqa: E501

        self._email_address = None
        self._reset_password_url = None
        self.discriminator = None

        self.email_address = email_address
        if reset_password_url is not None:
            self.reset_password_url = reset_password_url

    @property
    def email_address(self):
        """Gets the email_address of this CreateResetPasswordRequest.  # noqa: E501

        The email address for the user resetting their password  # noqa: E501

        :return: The email_address of this CreateResetPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CreateResetPasswordRequest.

        The email address for the user resetting their password  # noqa: E501

        :param email_address: The email_address of this CreateResetPasswordRequest.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def reset_password_url(self):
        """Gets the reset_password_url of this CreateResetPasswordRequest.  # noqa: E501

        A URL to send in the notification to the user to allow them to confirm they want to reset their password.    If the URL is specified, it can use the {token}, {emailAddress} and {username} parameters:    http://www.example.com/resetPassword/{token}?email={emailAddress}&amp;username={username}    If present, the {token} parameter will be replaced with the token of the password reset request, which  will be needed when performing the reset.  The {emailAddress} parameter will be replaced with the email address  of the user resetting their password.  The {username} parameter will be replaced with the username of the  user resetting their password.  # noqa: E501

        :return: The reset_password_url of this CreateResetPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._reset_password_url

    @reset_password_url.setter
    def reset_password_url(self, reset_password_url):
        """Sets the reset_password_url of this CreateResetPasswordRequest.

        A URL to send in the notification to the user to allow them to confirm they want to reset their password.    If the URL is specified, it can use the {token}, {emailAddress} and {username} parameters:    http://www.example.com/resetPassword/{token}?email={emailAddress}&amp;username={username}    If present, the {token} parameter will be replaced with the token of the password reset request, which  will be needed when performing the reset.  The {emailAddress} parameter will be replaced with the email address  of the user resetting their password.  The {username} parameter will be replaced with the username of the  user resetting their password.  # noqa: E501

        :param reset_password_url: The reset_password_url of this CreateResetPasswordRequest.  # noqa: E501
        :type: str
        """

        self._reset_password_url = reset_password_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateResetPasswordRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
