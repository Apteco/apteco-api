# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubSelection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'by_reference': 'bool',
        'path': 'str',
        'selection': 'Selection'
    }

    attribute_map = {
        'by_reference': 'byReference',
        'path': 'path',
        'selection': 'selection'
    }

    def __init__(self, by_reference=None, path=None, selection=None):  # noqa: E501
        """SubSelection - a model defined in OpenAPI"""  # noqa: E501

        self._by_reference = None
        self._path = None
        self._selection = None
        self.discriminator = None

        if by_reference is not None:
            self.by_reference = by_reference
        if path is not None:
            self.path = path
        if selection is not None:
            self.selection = selection

    @property
    def by_reference(self):
        """Gets the by_reference of this SubSelection.  # noqa: E501


        :return: The by_reference of this SubSelection.  # noqa: E501
        :rtype: bool
        """
        return self._by_reference

    @by_reference.setter
    def by_reference(self, by_reference):
        """Sets the by_reference of this SubSelection.


        :param by_reference: The by_reference of this SubSelection.  # noqa: E501
        :type: bool
        """

        self._by_reference = by_reference

    @property
    def path(self):
        """Gets the path of this SubSelection.  # noqa: E501


        :return: The path of this SubSelection.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SubSelection.


        :param path: The path of this SubSelection.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def selection(self):
        """Gets the selection of this SubSelection.  # noqa: E501


        :return: The selection of this SubSelection.  # noqa: E501
        :rtype: Selection
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this SubSelection.


        :param selection: The selection of this SubSelection.  # noqa: E501
        :type: Selection
        """

        self._selection = selection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubSelection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
