# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ShareSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'shareable_type': 'str',
        'shareable_id': 'int',
        'shareable_title': 'str',
        'number_of_users_shared_with': 'int'
    }

    attribute_map = {
        'id': 'id',
        'shareable_type': 'shareableType',
        'shareable_id': 'shareableId',
        'shareable_title': 'shareableTitle',
        'number_of_users_shared_with': 'numberOfUsersSharedWith'
    }

    def __init__(self, id=None, shareable_type=None, shareable_id=None, shareable_title=None, number_of_users_shared_with=None):  # noqa: E501
        """ShareSummary - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._shareable_type = None
        self._shareable_id = None
        self._shareable_title = None
        self._number_of_users_shared_with = None
        self.discriminator = None

        self.id = id
        self.shareable_type = shareable_type
        self.shareable_id = shareable_id
        self.shareable_title = shareable_title
        self.number_of_users_shared_with = number_of_users_shared_with

    @property
    def id(self):
        """Gets the id of this ShareSummary.  # noqa: E501

        The id of the share  # noqa: E501

        :return: The id of this ShareSummary.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShareSummary.

        The id of the share  # noqa: E501

        :param id: The id of this ShareSummary.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def shareable_type(self):
        """Gets the shareable_type of this ShareSummary.  # noqa: E501

        The type of the shareable item (collection, list, etc.)  # noqa: E501

        :return: The shareable_type of this ShareSummary.  # noqa: E501
        :rtype: str
        """
        return self._shareable_type

    @shareable_type.setter
    def shareable_type(self, shareable_type):
        """Sets the shareable_type of this ShareSummary.

        The type of the shareable item (collection, list, etc.)  # noqa: E501

        :param shareable_type: The shareable_type of this ShareSummary.  # noqa: E501
        :type: str
        """
        if shareable_type is None:
            raise ValueError("Invalid value for `shareable_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "Collection", "Audience"]  # noqa: E501
        if shareable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `shareable_type` ({0}), must be one of {1}"  # noqa: E501
                .format(shareable_type, allowed_values)
            )

        self._shareable_type = shareable_type

    @property
    def shareable_id(self):
        """Gets the shareable_id of this ShareSummary.  # noqa: E501

        The id of the shareable item  # noqa: E501

        :return: The shareable_id of this ShareSummary.  # noqa: E501
        :rtype: int
        """
        return self._shareable_id

    @shareable_id.setter
    def shareable_id(self, shareable_id):
        """Sets the shareable_id of this ShareSummary.

        The id of the shareable item  # noqa: E501

        :param shareable_id: The shareable_id of this ShareSummary.  # noqa: E501
        :type: int
        """
        if shareable_id is None:
            raise ValueError("Invalid value for `shareable_id`, must not be `None`")  # noqa: E501

        self._shareable_id = shareable_id

    @property
    def shareable_title(self):
        """Gets the shareable_title of this ShareSummary.  # noqa: E501

        The title of the shareable item  # noqa: E501

        :return: The shareable_title of this ShareSummary.  # noqa: E501
        :rtype: str
        """
        return self._shareable_title

    @shareable_title.setter
    def shareable_title(self, shareable_title):
        """Sets the shareable_title of this ShareSummary.

        The title of the shareable item  # noqa: E501

        :param shareable_title: The shareable_title of this ShareSummary.  # noqa: E501
        :type: str
        """
        if shareable_title is None:
            raise ValueError("Invalid value for `shareable_title`, must not be `None`")  # noqa: E501

        self._shareable_title = shareable_title

    @property
    def number_of_users_shared_with(self):
        """Gets the number_of_users_shared_with of this ShareSummary.  # noqa: E501

        The number of people the shareable item has been shared with  # noqa: E501

        :return: The number_of_users_shared_with of this ShareSummary.  # noqa: E501
        :rtype: int
        """
        return self._number_of_users_shared_with

    @number_of_users_shared_with.setter
    def number_of_users_shared_with(self, number_of_users_shared_with):
        """Sets the number_of_users_shared_with of this ShareSummary.

        The number of people the shareable item has been shared with  # noqa: E501

        :param number_of_users_shared_with: The number_of_users_shared_with of this ShareSummary.  # noqa: E501
        :type: int
        """
        if number_of_users_shared_with is None:
            raise ValueError("Invalid value for `number_of_users_shared_with`, must not be `None`")  # noqa: E501

        self._number_of_users_shared_with = number_of_users_shared_with

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
