# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class DashboardContentItemDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'drilldown_level': 'int',
        'description': 'str',
        'chart_type': 'str',
        'data_specification': 'DashboardItemDataSpecification',
        'allow_category_display': 'bool',
        'category_display': 'DashboardItemCategoryDisplay',
        'omit_zeros': 'bool',
        'omit_unclassified': 'bool',
        'sort_order': 'str',
        'show_underlying_data': 'bool',
        'notes': 'str'
    }

    attribute_map = {
        'drilldown_level': 'drilldownLevel',
        'description': 'description',
        'chart_type': 'chartType',
        'data_specification': 'dataSpecification',
        'allow_category_display': 'allowCategoryDisplay',
        'category_display': 'categoryDisplay',
        'omit_zeros': 'omitZeros',
        'omit_unclassified': 'omitUnclassified',
        'sort_order': 'sortOrder',
        'show_underlying_data': 'showUnderlyingData',
        'notes': 'notes'
    }

    def __init__(self, drilldown_level=None, description=None, chart_type=None, data_specification=None, allow_category_display=None, category_display=None, omit_zeros=None, omit_unclassified=None, sort_order=None, show_underlying_data=None, notes=None, local_vars_configuration=None):  # noqa: E501
        """DashboardContentItemDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._drilldown_level = None
        self._description = None
        self._chart_type = None
        self._data_specification = None
        self._allow_category_display = None
        self._category_display = None
        self._omit_zeros = None
        self._omit_unclassified = None
        self._sort_order = None
        self._show_underlying_data = None
        self._notes = None
        self.discriminator = None

        self.drilldown_level = drilldown_level
        if description is not None:
            self.description = description
        self.chart_type = chart_type
        if data_specification is not None:
            self.data_specification = data_specification
        if allow_category_display is not None:
            self.allow_category_display = allow_category_display
        if category_display is not None:
            self.category_display = category_display
        if omit_zeros is not None:
            self.omit_zeros = omit_zeros
        if omit_unclassified is not None:
            self.omit_unclassified = omit_unclassified
        self.sort_order = sort_order
        if show_underlying_data is not None:
            self.show_underlying_data = show_underlying_data
        if notes is not None:
            self.notes = notes

    @property
    def drilldown_level(self):
        """Gets the drilldown_level of this DashboardContentItemDetail.  # noqa: E501

        The drill down level of the dashboard item  # noqa: E501

        :return: The drilldown_level of this DashboardContentItemDetail.  # noqa: E501
        :rtype: int
        """
        return self._drilldown_level

    @drilldown_level.setter
    def drilldown_level(self, drilldown_level):
        """Sets the drilldown_level of this DashboardContentItemDetail.

        The drill down level of the dashboard item  # noqa: E501

        :param drilldown_level: The drilldown_level of this DashboardContentItemDetail.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and drilldown_level is None:  # noqa: E501
            raise ValueError("Invalid value for `drilldown_level`, must not be `None`")  # noqa: E501

        self._drilldown_level = drilldown_level

    @property
    def description(self):
        """Gets the description of this DashboardContentItemDetail.  # noqa: E501

        The description of the dashboard item  # noqa: E501

        :return: The description of this DashboardContentItemDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardContentItemDetail.

        The description of the dashboard item  # noqa: E501

        :param description: The description of this DashboardContentItemDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def chart_type(self):
        """Gets the chart_type of this DashboardContentItemDetail.  # noqa: E501

        The chart type that will be shown in the dashboard item  # noqa: E501

        :return: The chart_type of this DashboardContentItemDetail.  # noqa: E501
        :rtype: str
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this DashboardContentItemDetail.

        The chart type that will be shown in the dashboard item  # noqa: E501

        :param chart_type: The chart_type of this DashboardContentItemDetail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and chart_type is None:  # noqa: E501
            raise ValueError("Invalid value for `chart_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Bar", "Column", "Pie", "Donut", "Line", "UKPostArea", "NLProvinces", "NLMunicipalities", "DE2DigitPostCode", "CH2DigitPostCode", "AU2DigitPostCode", "USStates", "NumberCard", "Text", "BandedPareto", "CategoricalPareto", "Area", "ClusteredColumn", "StackedColumn", "Stacked100Column", "RadarLine", "RadarColumn", "RadarArea", "Funnel"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and chart_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `chart_type` ({0}), must be one of {1}"  # noqa: E501
                .format(chart_type, allowed_values)
            )

        self._chart_type = chart_type

    @property
    def data_specification(self):
        """Gets the data_specification of this DashboardContentItemDetail.  # noqa: E501


        :return: The data_specification of this DashboardContentItemDetail.  # noqa: E501
        :rtype: DashboardItemDataSpecification
        """
        return self._data_specification

    @data_specification.setter
    def data_specification(self, data_specification):
        """Sets the data_specification of this DashboardContentItemDetail.


        :param data_specification: The data_specification of this DashboardContentItemDetail.  # noqa: E501
        :type: DashboardItemDataSpecification
        """

        self._data_specification = data_specification

    @property
    def allow_category_display(self):
        """Gets the allow_category_display of this DashboardContentItemDetail.  # noqa: E501

        Whether to allow category display on the dashboard item  # noqa: E501

        :return: The allow_category_display of this DashboardContentItemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._allow_category_display

    @allow_category_display.setter
    def allow_category_display(self, allow_category_display):
        """Sets the allow_category_display of this DashboardContentItemDetail.

        Whether to allow category display on the dashboard item  # noqa: E501

        :param allow_category_display: The allow_category_display of this DashboardContentItemDetail.  # noqa: E501
        :type: bool
        """

        self._allow_category_display = allow_category_display

    @property
    def category_display(self):
        """Gets the category_display of this DashboardContentItemDetail.  # noqa: E501


        :return: The category_display of this DashboardContentItemDetail.  # noqa: E501
        :rtype: DashboardItemCategoryDisplay
        """
        return self._category_display

    @category_display.setter
    def category_display(self, category_display):
        """Sets the category_display of this DashboardContentItemDetail.


        :param category_display: The category_display of this DashboardContentItemDetail.  # noqa: E501
        :type: DashboardItemCategoryDisplay
        """

        self._category_display = category_display

    @property
    def omit_zeros(self):
        """Gets the omit_zeros of this DashboardContentItemDetail.  # noqa: E501

        Whether to omit zeroes in the data of the dashboard item  # noqa: E501

        :return: The omit_zeros of this DashboardContentItemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._omit_zeros

    @omit_zeros.setter
    def omit_zeros(self, omit_zeros):
        """Sets the omit_zeros of this DashboardContentItemDetail.

        Whether to omit zeroes in the data of the dashboard item  # noqa: E501

        :param omit_zeros: The omit_zeros of this DashboardContentItemDetail.  # noqa: E501
        :type: bool
        """

        self._omit_zeros = omit_zeros

    @property
    def omit_unclassified(self):
        """Gets the omit_unclassified of this DashboardContentItemDetail.  # noqa: E501

        Whether to omit unclassifieds in the data of the dashboard item  # noqa: E501

        :return: The omit_unclassified of this DashboardContentItemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._omit_unclassified

    @omit_unclassified.setter
    def omit_unclassified(self, omit_unclassified):
        """Sets the omit_unclassified of this DashboardContentItemDetail.

        Whether to omit unclassifieds in the data of the dashboard item  # noqa: E501

        :param omit_unclassified: The omit_unclassified of this DashboardContentItemDetail.  # noqa: E501
        :type: bool
        """

        self._omit_unclassified = omit_unclassified

    @property
    def sort_order(self):
        """Gets the sort_order of this DashboardContentItemDetail.  # noqa: E501

        Whether the chart should be sorted in it's natural order, by ascending or descending values  # noqa: E501

        :return: The sort_order of this DashboardContentItemDetail.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this DashboardContentItemDetail.

        Whether the chart should be sorted in it's natural order, by ascending or descending values  # noqa: E501

        :param sort_order: The sort_order of this DashboardContentItemDetail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sort_order is None:  # noqa: E501
            raise ValueError("Invalid value for `sort_order`, must not be `None`")  # noqa: E501
        allowed_values = ["Natural", "AscendingByValue", "DescendingByValue"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sort_order not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def show_underlying_data(self):
        """Gets the show_underlying_data of this DashboardContentItemDetail.  # noqa: E501

        Whether to show the underlying data of the dashboard item  # noqa: E501

        :return: The show_underlying_data of this DashboardContentItemDetail.  # noqa: E501
        :rtype: bool
        """
        return self._show_underlying_data

    @show_underlying_data.setter
    def show_underlying_data(self, show_underlying_data):
        """Sets the show_underlying_data of this DashboardContentItemDetail.

        Whether to show the underlying data of the dashboard item  # noqa: E501

        :param show_underlying_data: The show_underlying_data of this DashboardContentItemDetail.  # noqa: E501
        :type: bool
        """

        self._show_underlying_data = show_underlying_data

    @property
    def notes(self):
        """Gets the notes of this DashboardContentItemDetail.  # noqa: E501

        The notes for the dashboard item  # noqa: E501

        :return: The notes of this DashboardContentItemDetail.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DashboardContentItemDetail.

        The notes for the dashboard item  # noqa: E501

        :param notes: The notes of this DashboardContentItemDetail.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardContentItemDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardContentItemDetail):
            return True

        return self.to_dict() != other.to_dict()
