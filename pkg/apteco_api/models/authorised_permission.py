# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class AuthorisedPermission(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'permission': 'object',
        'permission_type': 'str',
        'resource': 'str',
        'resource_type': 'str',
        'grant': 'bool',
        'deny': 'bool',
        'inherit': 'bool',
        'permission_set': 'PermissionSet',
        'authority': 'Authority',
        'team': 'TeamSummary'
    }

    attribute_map = {
        'id': 'id',
        'permission': 'permission',
        'permission_type': 'permissionType',
        'resource': 'resource',
        'resource_type': 'resourceType',
        'grant': 'grant',
        'deny': 'deny',
        'inherit': 'inherit',
        'permission_set': 'permissionSet',
        'authority': 'authority',
        'team': 'team'
    }

    def __init__(self, id=None, permission=None, permission_type=None, resource=None, resource_type=None, grant=None, deny=None, inherit=None, permission_set=None, authority=None, team=None, local_vars_configuration=None):  # noqa: E501
        """AuthorisedPermission - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._permission = None
        self._permission_type = None
        self._resource = None
        self._resource_type = None
        self._grant = None
        self._deny = None
        self._inherit = None
        self._permission_set = None
        self._authority = None
        self._team = None
        self.discriminator = None

        self.id = id
        if permission is not None:
            self.permission = permission
        self.permission_type = permission_type
        if resource is not None:
            self.resource = resource
        self.resource_type = resource_type
        self.grant = grant
        self.deny = deny
        self.inherit = inherit
        if permission_set is not None:
            self.permission_set = permission_set
        if authority is not None:
            self.authority = authority
        if team is not None:
            self.team = team

    @property
    def id(self):
        """Gets the id of this AuthorisedPermission.  # noqa: E501


        :return: The id of this AuthorisedPermission.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthorisedPermission.


        :param id: The id of this AuthorisedPermission.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def permission(self):
        """Gets the permission of this AuthorisedPermission.  # noqa: E501


        :return: The permission of this AuthorisedPermission.  # noqa: E501
        :rtype: object
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AuthorisedPermission.


        :param permission: The permission of this AuthorisedPermission.  # noqa: E501
        :type: object
        """

        self._permission = permission

    @property
    def permission_type(self):
        """Gets the permission_type of this AuthorisedPermission.  # noqa: E501


        :return: The permission_type of this AuthorisedPermission.  # noqa: E501
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this AuthorisedPermission.


        :param permission_type: The permission_type of this AuthorisedPermission.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and permission_type is None:  # noqa: E501
            raise ValueError("Invalid value for `permission_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "AccessRights", "PublishRights", "ExecutionRights", "SettingsRights", "DataRights", "DiagramRights", "StageRights", "UsageRights"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and permission_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `permission_type` ({0}), must be one of {1}"  # noqa: E501
                .format(permission_type, allowed_values)
            )

        self._permission_type = permission_type

    @property
    def resource(self):
        """Gets the resource of this AuthorisedPermission.  # noqa: E501


        :return: The resource of this AuthorisedPermission.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this AuthorisedPermission.


        :param resource: The resource of this AuthorisedPermission.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def resource_type(self):
        """Gets the resource_type of this AuthorisedPermission.  # noqa: E501


        :return: The resource_type of this AuthorisedPermission.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AuthorisedPermission.


        :param resource_type: The resource_type of this AuthorisedPermission.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "File", "PeopleStageElement", "PeopleStageDiagram", "PeopleStageSeed", "PeopleStageSeedSet", "PeopleStageChannel", "PeopleStageAggregation", "PeopleStageVoucherSet", "PeopleStageTemplate", "CascadeElement", "FastStatsElement", "UserElement"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def grant(self):
        """Gets the grant of this AuthorisedPermission.  # noqa: E501


        :return: The grant of this AuthorisedPermission.  # noqa: E501
        :rtype: bool
        """
        return self._grant

    @grant.setter
    def grant(self, grant):
        """Sets the grant of this AuthorisedPermission.


        :param grant: The grant of this AuthorisedPermission.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and grant is None:  # noqa: E501
            raise ValueError("Invalid value for `grant`, must not be `None`")  # noqa: E501

        self._grant = grant

    @property
    def deny(self):
        """Gets the deny of this AuthorisedPermission.  # noqa: E501


        :return: The deny of this AuthorisedPermission.  # noqa: E501
        :rtype: bool
        """
        return self._deny

    @deny.setter
    def deny(self, deny):
        """Sets the deny of this AuthorisedPermission.


        :param deny: The deny of this AuthorisedPermission.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and deny is None:  # noqa: E501
            raise ValueError("Invalid value for `deny`, must not be `None`")  # noqa: E501

        self._deny = deny

    @property
    def inherit(self):
        """Gets the inherit of this AuthorisedPermission.  # noqa: E501


        :return: The inherit of this AuthorisedPermission.  # noqa: E501
        :rtype: bool
        """
        return self._inherit

    @inherit.setter
    def inherit(self, inherit):
        """Sets the inherit of this AuthorisedPermission.


        :param inherit: The inherit of this AuthorisedPermission.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and inherit is None:  # noqa: E501
            raise ValueError("Invalid value for `inherit`, must not be `None`")  # noqa: E501

        self._inherit = inherit

    @property
    def permission_set(self):
        """Gets the permission_set of this AuthorisedPermission.  # noqa: E501


        :return: The permission_set of this AuthorisedPermission.  # noqa: E501
        :rtype: PermissionSet
        """
        return self._permission_set

    @permission_set.setter
    def permission_set(self, permission_set):
        """Sets the permission_set of this AuthorisedPermission.


        :param permission_set: The permission_set of this AuthorisedPermission.  # noqa: E501
        :type: PermissionSet
        """

        self._permission_set = permission_set

    @property
    def authority(self):
        """Gets the authority of this AuthorisedPermission.  # noqa: E501


        :return: The authority of this AuthorisedPermission.  # noqa: E501
        :rtype: Authority
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this AuthorisedPermission.


        :param authority: The authority of this AuthorisedPermission.  # noqa: E501
        :type: Authority
        """

        self._authority = authority

    @property
    def team(self):
        """Gets the team of this AuthorisedPermission.  # noqa: E501


        :return: The team of this AuthorisedPermission.  # noqa: E501
        :rtype: TeamSummary
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this AuthorisedPermission.


        :param team: The team of this AuthorisedPermission.  # noqa: E501
        :type: TeamSummary
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorisedPermission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthorisedPermission):
            return True

        return self.to_dict() != other.to_dict()
