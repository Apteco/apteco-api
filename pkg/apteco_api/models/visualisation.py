# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class Visualisation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title_colour': 'str',
        'title_font': 'str',
        'note_colour': 'str',
        'note_font': 'str',
        'label_colour': 'str',
        'visualisation_colours': 'list[str]',
        'highlight_colours': 'list[str]'
    }

    attribute_map = {
        'title_colour': 'titleColour',
        'title_font': 'titleFont',
        'note_colour': 'noteColour',
        'note_font': 'noteFont',
        'label_colour': 'labelColour',
        'visualisation_colours': 'visualisationColours',
        'highlight_colours': 'highlightColours'
    }

    def __init__(self, title_colour=None, title_font=None, note_colour=None, note_font=None, label_colour=None, visualisation_colours=None, highlight_colours=None, local_vars_configuration=None):  # noqa: E501
        """Visualisation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title_colour = None
        self._title_font = None
        self._note_colour = None
        self._note_font = None
        self._label_colour = None
        self._visualisation_colours = None
        self._highlight_colours = None
        self.discriminator = None

        self.title_colour = title_colour
        if title_font is not None:
            self.title_font = title_font
        self.note_colour = note_colour
        if note_font is not None:
            self.note_font = note_font
        self.label_colour = label_colour
        self.visualisation_colours = visualisation_colours
        self.highlight_colours = highlight_colours

    @property
    def title_colour(self):
        """Gets the title_colour of this Visualisation.  # noqa: E501

        The hex colour to use when displaying a title  # noqa: E501

        :return: The title_colour of this Visualisation.  # noqa: E501
        :rtype: str
        """
        return self._title_colour

    @title_colour.setter
    def title_colour(self, title_colour):
        """Sets the title_colour of this Visualisation.

        The hex colour to use when displaying a title  # noqa: E501

        :param title_colour: The title_colour of this Visualisation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title_colour is None:  # noqa: E501
            raise ValueError("Invalid value for `title_colour`, must not be `None`")  # noqa: E501

        self._title_colour = title_colour

    @property
    def title_font(self):
        """Gets the title_font of this Visualisation.  # noqa: E501

        The font to use when displaying a title  # noqa: E501

        :return: The title_font of this Visualisation.  # noqa: E501
        :rtype: str
        """
        return self._title_font

    @title_font.setter
    def title_font(self, title_font):
        """Sets the title_font of this Visualisation.

        The font to use when displaying a title  # noqa: E501

        :param title_font: The title_font of this Visualisation.  # noqa: E501
        :type: str
        """

        self._title_font = title_font

    @property
    def note_colour(self):
        """Gets the note_colour of this Visualisation.  # noqa: E501

        The hex colour to use when displaying a description  # noqa: E501

        :return: The note_colour of this Visualisation.  # noqa: E501
        :rtype: str
        """
        return self._note_colour

    @note_colour.setter
    def note_colour(self, note_colour):
        """Sets the note_colour of this Visualisation.

        The hex colour to use when displaying a description  # noqa: E501

        :param note_colour: The note_colour of this Visualisation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and note_colour is None:  # noqa: E501
            raise ValueError("Invalid value for `note_colour`, must not be `None`")  # noqa: E501

        self._note_colour = note_colour

    @property
    def note_font(self):
        """Gets the note_font of this Visualisation.  # noqa: E501

        The font to use when displaying a note  # noqa: E501

        :return: The note_font of this Visualisation.  # noqa: E501
        :rtype: str
        """
        return self._note_font

    @note_font.setter
    def note_font(self, note_font):
        """Sets the note_font of this Visualisation.

        The font to use when displaying a note  # noqa: E501

        :param note_font: The note_font of this Visualisation.  # noqa: E501
        :type: str
        """

        self._note_font = note_font

    @property
    def label_colour(self):
        """Gets the label_colour of this Visualisation.  # noqa: E501

        The hex colour to use when displaying a label  # noqa: E501

        :return: The label_colour of this Visualisation.  # noqa: E501
        :rtype: str
        """
        return self._label_colour

    @label_colour.setter
    def label_colour(self, label_colour):
        """Sets the label_colour of this Visualisation.

        The hex colour to use when displaying a label  # noqa: E501

        :param label_colour: The label_colour of this Visualisation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label_colour is None:  # noqa: E501
            raise ValueError("Invalid value for `label_colour`, must not be `None`")  # noqa: E501

        self._label_colour = label_colour

    @property
    def visualisation_colours(self):
        """Gets the visualisation_colours of this Visualisation.  # noqa: E501

        The hex colour(s) to use when displaying a visualisation  # noqa: E501

        :return: The visualisation_colours of this Visualisation.  # noqa: E501
        :rtype: list[str]
        """
        return self._visualisation_colours

    @visualisation_colours.setter
    def visualisation_colours(self, visualisation_colours):
        """Sets the visualisation_colours of this Visualisation.

        The hex colour(s) to use when displaying a visualisation  # noqa: E501

        :param visualisation_colours: The visualisation_colours of this Visualisation.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and visualisation_colours is None:  # noqa: E501
            raise ValueError("Invalid value for `visualisation_colours`, must not be `None`")  # noqa: E501

        self._visualisation_colours = visualisation_colours

    @property
    def highlight_colours(self):
        """Gets the highlight_colours of this Visualisation.  # noqa: E501

        The hex colour(s) to use when displaying a highlight  # noqa: E501

        :return: The highlight_colours of this Visualisation.  # noqa: E501
        :rtype: list[str]
        """
        return self._highlight_colours

    @highlight_colours.setter
    def highlight_colours(self, highlight_colours):
        """Sets the highlight_colours of this Visualisation.

        The hex colour(s) to use when displaying a highlight  # noqa: E501

        :param highlight_colours: The highlight_colours of this Visualisation.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and highlight_colours is None:  # noqa: E501
            raise ValueError("Invalid value for `highlight_colours`, must not be `None`")  # noqa: E501

        self._highlight_colours = highlight_colours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visualisation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Visualisation):
            return True

        return self.to_dict() != other.to_dict()
