# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class Lookups(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'system_lookup': 'SystemLookup',
        'people_stage_lookup': 'PeopleStageLookup',
        'users_lookup': 'UsersLookup'
    }

    attribute_map = {
        'system_lookup': 'systemLookup',
        'people_stage_lookup': 'peopleStageLookup',
        'users_lookup': 'usersLookup'
    }

    def __init__(self, system_lookup=None, people_stage_lookup=None, users_lookup=None, local_vars_configuration=None):  # noqa: E501
        """Lookups - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._system_lookup = None
        self._people_stage_lookup = None
        self._users_lookup = None
        self.discriminator = None

        if system_lookup is not None:
            self.system_lookup = system_lookup
        if people_stage_lookup is not None:
            self.people_stage_lookup = people_stage_lookup
        if users_lookup is not None:
            self.users_lookup = users_lookup

    @property
    def system_lookup(self):
        """Gets the system_lookup of this Lookups.  # noqa: E501


        :return: The system_lookup of this Lookups.  # noqa: E501
        :rtype: SystemLookup
        """
        return self._system_lookup

    @system_lookup.setter
    def system_lookup(self, system_lookup):
        """Sets the system_lookup of this Lookups.


        :param system_lookup: The system_lookup of this Lookups.  # noqa: E501
        :type: SystemLookup
        """

        self._system_lookup = system_lookup

    @property
    def people_stage_lookup(self):
        """Gets the people_stage_lookup of this Lookups.  # noqa: E501


        :return: The people_stage_lookup of this Lookups.  # noqa: E501
        :rtype: PeopleStageLookup
        """
        return self._people_stage_lookup

    @people_stage_lookup.setter
    def people_stage_lookup(self, people_stage_lookup):
        """Sets the people_stage_lookup of this Lookups.


        :param people_stage_lookup: The people_stage_lookup of this Lookups.  # noqa: E501
        :type: PeopleStageLookup
        """

        self._people_stage_lookup = people_stage_lookup

    @property
    def users_lookup(self):
        """Gets the users_lookup of this Lookups.  # noqa: E501


        :return: The users_lookup of this Lookups.  # noqa: E501
        :rtype: UsersLookup
        """
        return self._users_lookup

    @users_lookup.setter
    def users_lookup(self, users_lookup):
        """Sets the users_lookup of this Lookups.


        :param users_lookup: The users_lookup of this Lookups.  # noqa: E501
        :type: UsersLookup
        """

        self._users_lookup = users_lookup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lookups):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Lookups):
            return True

        return self.to_dict() != other.to_dict()
