# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class CreateUserDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'password': 'str',
        'firstname': 'str',
        'surname': 'str',
        'email_address': 'str',
        'group_id': 'int'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'firstname': 'firstname',
        'surname': 'surname',
        'email_address': 'emailAddress',
        'group_id': 'groupId'
    }

    def __init__(self, username=None, password=None, firstname=None, surname=None, email_address=None, group_id=None, local_vars_configuration=None):  # noqa: E501
        """CreateUserDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._password = None
        self._firstname = None
        self._surname = None
        self._email_address = None
        self._group_id = None
        self.discriminator = None

        self.username = username
        self.password = password
        if firstname is not None:
            self.firstname = firstname
        if surname is not None:
            self.surname = surname
        if email_address is not None:
            self.email_address = email_address
        if group_id is not None:
            self.group_id = group_id

    @property
    def username(self):
        """Gets the username of this CreateUserDetails.  # noqa: E501

        The username for the new user  # noqa: E501

        :return: The username of this CreateUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateUserDetails.

        The username for the new user  # noqa: E501

        :param username: The username of this CreateUserDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this CreateUserDetails.  # noqa: E501

        The password for the new user  # noqa: E501

        :return: The password of this CreateUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateUserDetails.

        The password for the new user  # noqa: E501

        :param password: The password of this CreateUserDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def firstname(self):
        """Gets the firstname of this CreateUserDetails.  # noqa: E501

        When specified, the first name for the new user  # noqa: E501

        :return: The firstname of this CreateUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this CreateUserDetails.

        When specified, the first name for the new user  # noqa: E501

        :param firstname: The firstname of this CreateUserDetails.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def surname(self):
        """Gets the surname of this CreateUserDetails.  # noqa: E501

        When specified, the surname for the new user  # noqa: E501

        :return: The surname of this CreateUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CreateUserDetails.

        When specified, the surname for the new user  # noqa: E501

        :param surname: The surname of this CreateUserDetails.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def email_address(self):
        """Gets the email_address of this CreateUserDetails.  # noqa: E501

        When specified, the email address for the new user  # noqa: E501

        :return: The email_address of this CreateUserDetails.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CreateUserDetails.

        When specified, the email address for the new user  # noqa: E501

        :param email_address: The email_address of this CreateUserDetails.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def group_id(self):
        """Gets the group_id of this CreateUserDetails.  # noqa: E501

        When specified, the group id for the new user  # noqa: E501

        :return: The group_id of this CreateUserDetails.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CreateUserDetails.

        When specified, the group id for the new user  # noqa: E501

        :param group_id: The group_id of this CreateUserDetails.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUserDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUserDetails):
            return True

        return self.to_dict() != other.to_dict()
