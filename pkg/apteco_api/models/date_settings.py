# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class DateSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'use_iso8601_week_of_year': 'bool',
        'business_year_start_dd': 'int',
        'business_year_start_mm': 'int'
    }

    attribute_map = {
        'use_iso8601_week_of_year': 'useIso8601WeekOfYear',
        'business_year_start_dd': 'businessYearStartDD',
        'business_year_start_mm': 'businessYearStartMM'
    }

    def __init__(self, use_iso8601_week_of_year=None, business_year_start_dd=None, business_year_start_mm=None, local_vars_configuration=None):  # noqa: E501
        """DateSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._use_iso8601_week_of_year = None
        self._business_year_start_dd = None
        self._business_year_start_mm = None
        self.discriminator = None

        self.use_iso8601_week_of_year = use_iso8601_week_of_year
        if business_year_start_dd is not None:
            self.business_year_start_dd = business_year_start_dd
        self.business_year_start_mm = business_year_start_mm

    @property
    def use_iso8601_week_of_year(self):
        """Gets the use_iso8601_week_of_year of this DateSettings.  # noqa: E501

        Whether the FastStats system uses ISO 8601 date and time format  # noqa: E501

        :return: The use_iso8601_week_of_year of this DateSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_iso8601_week_of_year

    @use_iso8601_week_of_year.setter
    def use_iso8601_week_of_year(self, use_iso8601_week_of_year):
        """Sets the use_iso8601_week_of_year of this DateSettings.

        Whether the FastStats system uses ISO 8601 date and time format  # noqa: E501

        :param use_iso8601_week_of_year: The use_iso8601_week_of_year of this DateSettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and use_iso8601_week_of_year is None:  # noqa: E501
            raise ValueError("Invalid value for `use_iso8601_week_of_year`, must not be `None`")  # noqa: E501

        self._use_iso8601_week_of_year = use_iso8601_week_of_year

    @property
    def business_year_start_dd(self):
        """Gets the business_year_start_dd of this DateSettings.  # noqa: E501

        If defined, the day of the month that the \"Business year\" starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 6.  # noqa: E501

        :return: The business_year_start_dd of this DateSettings.  # noqa: E501
        :rtype: int
        """
        return self._business_year_start_dd

    @business_year_start_dd.setter
    def business_year_start_dd(self, business_year_start_dd):
        """Sets the business_year_start_dd of this DateSettings.

        If defined, the day of the month that the \"Business year\" starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 6.  # noqa: E501

        :param business_year_start_dd: The business_year_start_dd of this DateSettings.  # noqa: E501
        :type: int
        """

        self._business_year_start_dd = business_year_start_dd

    @property
    def business_year_start_mm(self):
        """Gets the business_year_start_mm of this DateSettings.  # noqa: E501

        If defined, the month of the ywear that the \"Business year\" starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 4.  # noqa: E501

        :return: The business_year_start_mm of this DateSettings.  # noqa: E501
        :rtype: int
        """
        return self._business_year_start_mm

    @business_year_start_mm.setter
    def business_year_start_mm(self, business_year_start_mm):
        """Sets the business_year_start_mm of this DateSettings.

        If defined, the month of the ywear that the \"Business year\" starts on.  For example, the UK tax year  starts on the 6th April, so this property would have a value of 4.  # noqa: E501

        :param business_year_start_mm: The business_year_start_mm of this DateSettings.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and business_year_start_mm is None:  # noqa: E501
            raise ValueError("Invalid value for `business_year_start_mm`, must not be `None`")  # noqa: E501

        self._business_year_start_mm = business_year_start_mm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DateSettings):
            return True

        return self.to_dict() != other.to_dict()
