# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class VarCode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'description': 'str',
        'count': 'int'
    }

    attribute_map = {
        'code': 'code',
        'description': 'description',
        'count': 'count'
    }

    def __init__(self, code=None, description=None, count=None, local_vars_configuration=None):  # noqa: E501
        """VarCode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._description = None
        self._count = None
        self.discriminator = None

        self.code = code
        self.description = description
        if count is not None:
            self.count = count

    @property
    def code(self):
        """Gets the code of this VarCode.  # noqa: E501

        The code for this category  # noqa: E501

        :return: The code of this VarCode.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VarCode.

        The code for this category  # noqa: E501

        :param code: The code of this VarCode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def description(self):
        """Gets the description of this VarCode.  # noqa: E501

        The description for this category  # noqa: E501

        :return: The description of this VarCode.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VarCode.

        The description for this category  # noqa: E501

        :param description: The description of this VarCode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def count(self):
        """Gets the count of this VarCode.  # noqa: E501

        The number of records for the variable in the whole FastStats system that have been asigned this code.  If this is null, then the count is temporarily unavailable (perhaps due to row filters having been applied)  # noqa: E501

        :return: The count of this VarCode.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this VarCode.

        The number of records for the variable in the whole FastStats system that have been asigned this code.  If this is null, then the count is temporarily unavailable (perhaps due to row filters having been applied)  # noqa: E501

        :param count: The count of this VarCode.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VarCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VarCode):
            return True

        return self.to_dict() != other.to_dict()
