# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class NotesAlignment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'notes_position': 'str',
        'notes_content_vertical_alignment': 'str',
        'notes_content_horizontal_alignment': 'str'
    }

    attribute_map = {
        'notes_position': 'notesPosition',
        'notes_content_vertical_alignment': 'notesContentVerticalAlignment',
        'notes_content_horizontal_alignment': 'notesContentHorizontalAlignment'
    }

    def __init__(self, notes_position=None, notes_content_vertical_alignment=None, notes_content_horizontal_alignment=None, local_vars_configuration=None):  # noqa: E501
        """NotesAlignment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._notes_position = None
        self._notes_content_vertical_alignment = None
        self._notes_content_horizontal_alignment = None
        self.discriminator = None

        self.notes_position = notes_position
        self.notes_content_vertical_alignment = notes_content_vertical_alignment
        self.notes_content_horizontal_alignment = notes_content_horizontal_alignment

    @property
    def notes_position(self):
        """Gets the notes_position of this NotesAlignment.  # noqa: E501

        The notes position  # noqa: E501

        :return: The notes_position of this NotesAlignment.  # noqa: E501
        :rtype: str
        """
        return self._notes_position

    @notes_position.setter
    def notes_position(self, notes_position):
        """Sets the notes_position of this NotesAlignment.

        The notes position  # noqa: E501

        :param notes_position: The notes_position of this NotesAlignment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and notes_position is None:  # noqa: E501
            raise ValueError("Invalid value for `notes_position`, must not be `None`")  # noqa: E501
        allowed_values = ["Top", "Right", "Bottom", "Left"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and notes_position not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `notes_position` ({0}), must be one of {1}"  # noqa: E501
                .format(notes_position, allowed_values)
            )

        self._notes_position = notes_position

    @property
    def notes_content_vertical_alignment(self):
        """Gets the notes_content_vertical_alignment of this NotesAlignment.  # noqa: E501

        The notes content vertical alignment  # noqa: E501

        :return: The notes_content_vertical_alignment of this NotesAlignment.  # noqa: E501
        :rtype: str
        """
        return self._notes_content_vertical_alignment

    @notes_content_vertical_alignment.setter
    def notes_content_vertical_alignment(self, notes_content_vertical_alignment):
        """Sets the notes_content_vertical_alignment of this NotesAlignment.

        The notes content vertical alignment  # noqa: E501

        :param notes_content_vertical_alignment: The notes_content_vertical_alignment of this NotesAlignment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and notes_content_vertical_alignment is None:  # noqa: E501
            raise ValueError("Invalid value for `notes_content_vertical_alignment`, must not be `None`")  # noqa: E501
        allowed_values = ["Top", "Middle", "Bottom"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and notes_content_vertical_alignment not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `notes_content_vertical_alignment` ({0}), must be one of {1}"  # noqa: E501
                .format(notes_content_vertical_alignment, allowed_values)
            )

        self._notes_content_vertical_alignment = notes_content_vertical_alignment

    @property
    def notes_content_horizontal_alignment(self):
        """Gets the notes_content_horizontal_alignment of this NotesAlignment.  # noqa: E501

        The notes content horizontal alignment  # noqa: E501

        :return: The notes_content_horizontal_alignment of this NotesAlignment.  # noqa: E501
        :rtype: str
        """
        return self._notes_content_horizontal_alignment

    @notes_content_horizontal_alignment.setter
    def notes_content_horizontal_alignment(self, notes_content_horizontal_alignment):
        """Sets the notes_content_horizontal_alignment of this NotesAlignment.

        The notes content horizontal alignment  # noqa: E501

        :param notes_content_horizontal_alignment: The notes_content_horizontal_alignment of this NotesAlignment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and notes_content_horizontal_alignment is None:  # noqa: E501
            raise ValueError("Invalid value for `notes_content_horizontal_alignment`, must not be `None`")  # noqa: E501
        allowed_values = ["Left", "Right", "Center", "Justify"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and notes_content_horizontal_alignment not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `notes_content_horizontal_alignment` ({0}), must be one of {1}"  # noqa: E501
                .format(notes_content_horizontal_alignment, allowed_values)
            )

        self._notes_content_horizontal_alignment = notes_content_horizontal_alignment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotesAlignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotesAlignment):
            return True

        return self.to_dict() != other.to_dict()
