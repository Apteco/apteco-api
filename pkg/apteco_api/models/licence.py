# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class Licence(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audience_selection': 'bool',
        'audience_preview': 'bool',
        'export': 'bool',
        'advanced_query': 'bool',
        'cube': 'bool',
        'profile': 'bool',
        'dashboards': 'bool',
        'dashboards_pareto': 'bool'
    }

    attribute_map = {
        'audience_selection': 'audienceSelection',
        'audience_preview': 'audiencePreview',
        'export': 'export',
        'advanced_query': 'advancedQuery',
        'cube': 'cube',
        'profile': 'profile',
        'dashboards': 'dashboards',
        'dashboards_pareto': 'dashboardsPareto'
    }

    def __init__(self, audience_selection=None, audience_preview=None, export=None, advanced_query=None, cube=None, profile=None, dashboards=None, dashboards_pareto=None, local_vars_configuration=None):  # noqa: E501
        """Licence - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audience_selection = None
        self._audience_preview = None
        self._export = None
        self._advanced_query = None
        self._cube = None
        self._profile = None
        self._dashboards = None
        self._dashboards_pareto = None
        self.discriminator = None

        self.audience_selection = audience_selection
        self.audience_preview = audience_preview
        self.export = export
        self.advanced_query = advanced_query
        self.cube = cube
        self.profile = profile
        self.dashboards = dashboards
        self.dashboards_pareto = dashboards_pareto

    @property
    def audience_selection(self):
        """Gets the audience_selection of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Audience Selection\" functionality  # noqa: E501

        :return: The audience_selection of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._audience_selection

    @audience_selection.setter
    def audience_selection(self, audience_selection):
        """Sets the audience_selection of this Licence.

        Whether this user is allowed to access \"Audience Selection\" functionality  # noqa: E501

        :param audience_selection: The audience_selection of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and audience_selection is None:  # noqa: E501
            raise ValueError("Invalid value for `audience_selection`, must not be `None`")  # noqa: E501

        self._audience_selection = audience_selection

    @property
    def audience_preview(self):
        """Gets the audience_preview of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Audience Preview\" functionality  # noqa: E501

        :return: The audience_preview of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._audience_preview

    @audience_preview.setter
    def audience_preview(self, audience_preview):
        """Sets the audience_preview of this Licence.

        Whether this user is allowed to access \"Audience Preview\" functionality  # noqa: E501

        :param audience_preview: The audience_preview of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and audience_preview is None:  # noqa: E501
            raise ValueError("Invalid value for `audience_preview`, must not be `None`")  # noqa: E501

        self._audience_preview = audience_preview

    @property
    def export(self):
        """Gets the export of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Export\" functionality  # noqa: E501

        :return: The export of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this Licence.

        Whether this user is allowed to access \"Export\" functionality  # noqa: E501

        :param export: The export of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and export is None:  # noqa: E501
            raise ValueError("Invalid value for `export`, must not be `None`")  # noqa: E501

        self._export = export

    @property
    def advanced_query(self):
        """Gets the advanced_query of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Advanced Query\" functionality  # noqa: E501

        :return: The advanced_query of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._advanced_query

    @advanced_query.setter
    def advanced_query(self, advanced_query):
        """Sets the advanced_query of this Licence.

        Whether this user is allowed to access \"Advanced Query\" functionality  # noqa: E501

        :param advanced_query: The advanced_query of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and advanced_query is None:  # noqa: E501
            raise ValueError("Invalid value for `advanced_query`, must not be `None`")  # noqa: E501

        self._advanced_query = advanced_query

    @property
    def cube(self):
        """Gets the cube of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Cube\" functionality  # noqa: E501

        :return: The cube of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._cube

    @cube.setter
    def cube(self, cube):
        """Sets the cube of this Licence.

        Whether this user is allowed to access \"Cube\" functionality  # noqa: E501

        :param cube: The cube of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and cube is None:  # noqa: E501
            raise ValueError("Invalid value for `cube`, must not be `None`")  # noqa: E501

        self._cube = cube

    @property
    def profile(self):
        """Gets the profile of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Profile\" functionality.  # noqa: E501

        :return: The profile of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Licence.

        Whether this user is allowed to access \"Profile\" functionality.  # noqa: E501

        :param profile: The profile of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and profile is None:  # noqa: E501
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def dashboards(self):
        """Gets the dashboards of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Dashboards\" functionality.  # noqa: E501

        :return: The dashboards of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this Licence.

        Whether this user is allowed to access \"Dashboards\" functionality.  # noqa: E501

        :param dashboards: The dashboards of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and dashboards is None:  # noqa: E501
            raise ValueError("Invalid value for `dashboards`, must not be `None`")  # noqa: E501

        self._dashboards = dashboards

    @property
    def dashboards_pareto(self):
        """Gets the dashboards_pareto of this Licence.  # noqa: E501

        Whether this user is allowed to access \"Dashboards Pareto\" functionality.  # noqa: E501

        :return: The dashboards_pareto of this Licence.  # noqa: E501
        :rtype: bool
        """
        return self._dashboards_pareto

    @dashboards_pareto.setter
    def dashboards_pareto(self, dashboards_pareto):
        """Sets the dashboards_pareto of this Licence.

        Whether this user is allowed to access \"Dashboards Pareto\" functionality.  # noqa: E501

        :param dashboards_pareto: The dashboards_pareto of this Licence.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and dashboards_pareto is None:  # noqa: E501
            raise ValueError("Invalid value for `dashboards_pareto`, must not be `None`")  # noqa: E501

        self._dashboards_pareto = dashboards_pareto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Licence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Licence):
            return True

        return self.to_dict() != other.to_dict()
