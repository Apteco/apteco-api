# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class CreateShareUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'notes': 'str',
        'email_addresses_to_add': 'list[str]',
        'user_ids_to_add': 'list[int]',
        'group_ids_to_add': 'list[int]',
        'share_to_all': 'bool',
        'notify_added_recipients': 'bool',
        'added_recipient_notification_message': 'str',
        'email_addresses_to_remove': 'list[str]',
        'user_ids_to_remove': 'list[int]',
        'group_ids_to_remove': 'list[int]',
        'notify_removed_recipients': 'bool',
        'removed_recipient_notification_message': 'str',
        'notify_unchanged_recipients': 'bool',
        'unchanged_recipient_notification_message': 'str'
    }

    attribute_map = {
        'notes': 'notes',
        'email_addresses_to_add': 'emailAddressesToAdd',
        'user_ids_to_add': 'userIdsToAdd',
        'group_ids_to_add': 'groupIdsToAdd',
        'share_to_all': 'shareToAll',
        'notify_added_recipients': 'notifyAddedRecipients',
        'added_recipient_notification_message': 'addedRecipientNotificationMessage',
        'email_addresses_to_remove': 'emailAddressesToRemove',
        'user_ids_to_remove': 'userIdsToRemove',
        'group_ids_to_remove': 'groupIdsToRemove',
        'notify_removed_recipients': 'notifyRemovedRecipients',
        'removed_recipient_notification_message': 'removedRecipientNotificationMessage',
        'notify_unchanged_recipients': 'notifyUnchangedRecipients',
        'unchanged_recipient_notification_message': 'unchangedRecipientNotificationMessage'
    }

    def __init__(self, notes=None, email_addresses_to_add=None, user_ids_to_add=None, group_ids_to_add=None, share_to_all=None, notify_added_recipients=None, added_recipient_notification_message=None, email_addresses_to_remove=None, user_ids_to_remove=None, group_ids_to_remove=None, notify_removed_recipients=None, removed_recipient_notification_message=None, notify_unchanged_recipients=None, unchanged_recipient_notification_message=None, local_vars_configuration=None):  # noqa: E501
        """CreateShareUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._notes = None
        self._email_addresses_to_add = None
        self._user_ids_to_add = None
        self._group_ids_to_add = None
        self._share_to_all = None
        self._notify_added_recipients = None
        self._added_recipient_notification_message = None
        self._email_addresses_to_remove = None
        self._user_ids_to_remove = None
        self._group_ids_to_remove = None
        self._notify_removed_recipients = None
        self._removed_recipient_notification_message = None
        self._notify_unchanged_recipients = None
        self._unchanged_recipient_notification_message = None
        self.discriminator = None

        if notes is not None:
            self.notes = notes
        if email_addresses_to_add is not None:
            self.email_addresses_to_add = email_addresses_to_add
        if user_ids_to_add is not None:
            self.user_ids_to_add = user_ids_to_add
        if group_ids_to_add is not None:
            self.group_ids_to_add = group_ids_to_add
        if share_to_all is not None:
            self.share_to_all = share_to_all
        self.notify_added_recipients = notify_added_recipients
        if added_recipient_notification_message is not None:
            self.added_recipient_notification_message = added_recipient_notification_message
        if email_addresses_to_remove is not None:
            self.email_addresses_to_remove = email_addresses_to_remove
        if user_ids_to_remove is not None:
            self.user_ids_to_remove = user_ids_to_remove
        if group_ids_to_remove is not None:
            self.group_ids_to_remove = group_ids_to_remove
        self.notify_removed_recipients = notify_removed_recipients
        if removed_recipient_notification_message is not None:
            self.removed_recipient_notification_message = removed_recipient_notification_message
        self.notify_unchanged_recipients = notify_unchanged_recipients
        if unchanged_recipient_notification_message is not None:
            self.unchanged_recipient_notification_message = unchanged_recipient_notification_message

    @property
    def notes(self):
        """Gets the notes of this CreateShareUpdate.  # noqa: E501

        The notes associated with this share update  # noqa: E501

        :return: The notes of this CreateShareUpdate.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateShareUpdate.

        The notes associated with this share update  # noqa: E501

        :param notes: The notes of this CreateShareUpdate.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def email_addresses_to_add(self):
        """Gets the email_addresses_to_add of this CreateShareUpdate.  # noqa: E501

        Email addresses of new users to share this shareable item with  # noqa: E501

        :return: The email_addresses_to_add of this CreateShareUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_addresses_to_add

    @email_addresses_to_add.setter
    def email_addresses_to_add(self, email_addresses_to_add):
        """Sets the email_addresses_to_add of this CreateShareUpdate.

        Email addresses of new users to share this shareable item with  # noqa: E501

        :param email_addresses_to_add: The email_addresses_to_add of this CreateShareUpdate.  # noqa: E501
        :type: list[str]
        """

        self._email_addresses_to_add = email_addresses_to_add

    @property
    def user_ids_to_add(self):
        """Gets the user_ids_to_add of this CreateShareUpdate.  # noqa: E501

        Ids of new users to share this shareable item with  # noqa: E501

        :return: The user_ids_to_add of this CreateShareUpdate.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids_to_add

    @user_ids_to_add.setter
    def user_ids_to_add(self, user_ids_to_add):
        """Sets the user_ids_to_add of this CreateShareUpdate.

        Ids of new users to share this shareable item with  # noqa: E501

        :param user_ids_to_add: The user_ids_to_add of this CreateShareUpdate.  # noqa: E501
        :type: list[int]
        """

        self._user_ids_to_add = user_ids_to_add

    @property
    def group_ids_to_add(self):
        """Gets the group_ids_to_add of this CreateShareUpdate.  # noqa: E501

        Ids of new groups to share this shareable item with  # noqa: E501

        :return: The group_ids_to_add of this CreateShareUpdate.  # noqa: E501
        :rtype: list[int]
        """
        return self._group_ids_to_add

    @group_ids_to_add.setter
    def group_ids_to_add(self, group_ids_to_add):
        """Sets the group_ids_to_add of this CreateShareUpdate.

        Ids of new groups to share this shareable item with  # noqa: E501

        :param group_ids_to_add: The group_ids_to_add of this CreateShareUpdate.  # noqa: E501
        :type: list[int]
        """

        self._group_ids_to_add = group_ids_to_add

    @property
    def share_to_all(self):
        """Gets the share_to_all of this CreateShareUpdate.  # noqa: E501

        Whether to share this shareable item with all users  # noqa: E501

        :return: The share_to_all of this CreateShareUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._share_to_all

    @share_to_all.setter
    def share_to_all(self, share_to_all):
        """Sets the share_to_all of this CreateShareUpdate.

        Whether to share this shareable item with all users  # noqa: E501

        :param share_to_all: The share_to_all of this CreateShareUpdate.  # noqa: E501
        :type: bool
        """

        self._share_to_all = share_to_all

    @property
    def notify_added_recipients(self):
        """Gets the notify_added_recipients of this CreateShareUpdate.  # noqa: E501

        Whether to notify new recipients that the shareable item has now been shared with them  # noqa: E501

        :return: The notify_added_recipients of this CreateShareUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._notify_added_recipients

    @notify_added_recipients.setter
    def notify_added_recipients(self, notify_added_recipients):
        """Sets the notify_added_recipients of this CreateShareUpdate.

        Whether to notify new recipients that the shareable item has now been shared with them  # noqa: E501

        :param notify_added_recipients: The notify_added_recipients of this CreateShareUpdate.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notify_added_recipients is None:  # noqa: E501
            raise ValueError("Invalid value for `notify_added_recipients`, must not be `None`")  # noqa: E501

        self._notify_added_recipients = notify_added_recipients

    @property
    def added_recipient_notification_message(self):
        """Gets the added_recipient_notification_message of this CreateShareUpdate.  # noqa: E501

        If added recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.  # noqa: E501

        :return: The added_recipient_notification_message of this CreateShareUpdate.  # noqa: E501
        :rtype: str
        """
        return self._added_recipient_notification_message

    @added_recipient_notification_message.setter
    def added_recipient_notification_message(self, added_recipient_notification_message):
        """Sets the added_recipient_notification_message of this CreateShareUpdate.

        If added recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.  # noqa: E501

        :param added_recipient_notification_message: The added_recipient_notification_message of this CreateShareUpdate.  # noqa: E501
        :type: str
        """

        self._added_recipient_notification_message = added_recipient_notification_message

    @property
    def email_addresses_to_remove(self):
        """Gets the email_addresses_to_remove of this CreateShareUpdate.  # noqa: E501

        Email addresses of users that this shareable item has already been shared with that should be removed from the share  # noqa: E501

        :return: The email_addresses_to_remove of this CreateShareUpdate.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_addresses_to_remove

    @email_addresses_to_remove.setter
    def email_addresses_to_remove(self, email_addresses_to_remove):
        """Sets the email_addresses_to_remove of this CreateShareUpdate.

        Email addresses of users that this shareable item has already been shared with that should be removed from the share  # noqa: E501

        :param email_addresses_to_remove: The email_addresses_to_remove of this CreateShareUpdate.  # noqa: E501
        :type: list[str]
        """

        self._email_addresses_to_remove = email_addresses_to_remove

    @property
    def user_ids_to_remove(self):
        """Gets the user_ids_to_remove of this CreateShareUpdate.  # noqa: E501

        Ids of users that this shareable item has already been shared with that should be removed from the share  # noqa: E501

        :return: The user_ids_to_remove of this CreateShareUpdate.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids_to_remove

    @user_ids_to_remove.setter
    def user_ids_to_remove(self, user_ids_to_remove):
        """Sets the user_ids_to_remove of this CreateShareUpdate.

        Ids of users that this shareable item has already been shared with that should be removed from the share  # noqa: E501

        :param user_ids_to_remove: The user_ids_to_remove of this CreateShareUpdate.  # noqa: E501
        :type: list[int]
        """

        self._user_ids_to_remove = user_ids_to_remove

    @property
    def group_ids_to_remove(self):
        """Gets the group_ids_to_remove of this CreateShareUpdate.  # noqa: E501

        Ids of groups that this shareable item has already been shared with that should be removed from the share  # noqa: E501

        :return: The group_ids_to_remove of this CreateShareUpdate.  # noqa: E501
        :rtype: list[int]
        """
        return self._group_ids_to_remove

    @group_ids_to_remove.setter
    def group_ids_to_remove(self, group_ids_to_remove):
        """Sets the group_ids_to_remove of this CreateShareUpdate.

        Ids of groups that this shareable item has already been shared with that should be removed from the share  # noqa: E501

        :param group_ids_to_remove: The group_ids_to_remove of this CreateShareUpdate.  # noqa: E501
        :type: list[int]
        """

        self._group_ids_to_remove = group_ids_to_remove

    @property
    def notify_removed_recipients(self):
        """Gets the notify_removed_recipients of this CreateShareUpdate.  # noqa: E501

        Whether to notify existing recipients that the share has been updated  # noqa: E501

        :return: The notify_removed_recipients of this CreateShareUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._notify_removed_recipients

    @notify_removed_recipients.setter
    def notify_removed_recipients(self, notify_removed_recipients):
        """Sets the notify_removed_recipients of this CreateShareUpdate.

        Whether to notify existing recipients that the share has been updated  # noqa: E501

        :param notify_removed_recipients: The notify_removed_recipients of this CreateShareUpdate.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notify_removed_recipients is None:  # noqa: E501
            raise ValueError("Invalid value for `notify_removed_recipients`, must not be `None`")  # noqa: E501

        self._notify_removed_recipients = notify_removed_recipients

    @property
    def removed_recipient_notification_message(self):
        """Gets the removed_recipient_notification_message of this CreateShareUpdate.  # noqa: E501

        If removed recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.  # noqa: E501

        :return: The removed_recipient_notification_message of this CreateShareUpdate.  # noqa: E501
        :rtype: str
        """
        return self._removed_recipient_notification_message

    @removed_recipient_notification_message.setter
    def removed_recipient_notification_message(self, removed_recipient_notification_message):
        """Sets the removed_recipient_notification_message of this CreateShareUpdate.

        If removed recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.  # noqa: E501

        :param removed_recipient_notification_message: The removed_recipient_notification_message of this CreateShareUpdate.  # noqa: E501
        :type: str
        """

        self._removed_recipient_notification_message = removed_recipient_notification_message

    @property
    def notify_unchanged_recipients(self):
        """Gets the notify_unchanged_recipients of this CreateShareUpdate.  # noqa: E501

        Whether to notify recipients that the shareable item is shared with, but that haven't   been added or removed that the share has been updated  # noqa: E501

        :return: The notify_unchanged_recipients of this CreateShareUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._notify_unchanged_recipients

    @notify_unchanged_recipients.setter
    def notify_unchanged_recipients(self, notify_unchanged_recipients):
        """Sets the notify_unchanged_recipients of this CreateShareUpdate.

        Whether to notify recipients that the shareable item is shared with, but that haven't   been added or removed that the share has been updated  # noqa: E501

        :param notify_unchanged_recipients: The notify_unchanged_recipients of this CreateShareUpdate.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and notify_unchanged_recipients is None:  # noqa: E501
            raise ValueError("Invalid value for `notify_unchanged_recipients`, must not be `None`")  # noqa: E501

        self._notify_unchanged_recipients = notify_unchanged_recipients

    @property
    def unchanged_recipient_notification_message(self):
        """Gets the unchanged_recipient_notification_message of this CreateShareUpdate.  # noqa: E501

        If unchanged recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.  # noqa: E501

        :return: The unchanged_recipient_notification_message of this CreateShareUpdate.  # noqa: E501
        :rtype: str
        """
        return self._unchanged_recipient_notification_message

    @unchanged_recipient_notification_message.setter
    def unchanged_recipient_notification_message(self, unchanged_recipient_notification_message):
        """Sets the unchanged_recipient_notification_message of this CreateShareUpdate.

        If unchanged recipients are to be notified, this is the message to be sent to them.  The URL of the view of the shareable item (specified when the shareable item was created)  will be added to the notification after this message.  # noqa: E501

        :param unchanged_recipient_notification_message: The unchanged_recipient_notification_message of this CreateShareUpdate.  # noqa: E501
        :type: str
        """

        self._unchanged_recipient_notification_message = unchanged_recipient_notification_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateShareUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateShareUpdate):
            return True

        return self.to_dict() != other.to_dict()
