# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class CubeSpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dimensions': 'list[Dimension]',
        'measures': 'list[Measure]'
    }

    attribute_map = {
        'dimensions': 'dimensions',
        'measures': 'measures'
    }

    def __init__(self, dimensions=None, measures=None, local_vars_configuration=None):  # noqa: E501
        """CubeSpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dimensions = None
        self._measures = None
        self.discriminator = None

        if dimensions is not None:
            self.dimensions = dimensions
        if measures is not None:
            self.measures = measures

    @property
    def dimensions(self):
        """Gets the dimensions of this CubeSpecification.  # noqa: E501

        The dimensions of the dashboard item chart  # noqa: E501

        :return: The dimensions of this CubeSpecification.  # noqa: E501
        :rtype: list[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CubeSpecification.

        The dimensions of the dashboard item chart  # noqa: E501

        :param dimensions: The dimensions of this CubeSpecification.  # noqa: E501
        :type: list[Dimension]
        """

        self._dimensions = dimensions

    @property
    def measures(self):
        """Gets the measures of this CubeSpecification.  # noqa: E501

        The measures of the dashboard item chart  # noqa: E501

        :return: The measures of this CubeSpecification.  # noqa: E501
        :rtype: list[Measure]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this CubeSpecification.

        The measures of the dashboard item chart  # noqa: E501

        :param measures: The measures of this CubeSpecification.  # noqa: E501
        :type: list[Measure]
        """

        self._measures = measures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CubeSpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CubeSpecification):
            return True

        return self.to_dict() != other.to_dict()
