# coding: utf-8

"""
    Apteco API

    An API to allow access to Apteco Marketing Suite resources  # noqa: E501

    The version of the OpenAPI document: v2
    Contact: support@apteco.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from apteco_api.configuration import Configuration


class ParetoSpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'value_variable_name': 'str',
        'category_variable_name': 'str',
        'number_of_bands': 'int',
        'resolve_table_name': 'str'
    }

    attribute_map = {
        'value_variable_name': 'valueVariableName',
        'category_variable_name': 'categoryVariableName',
        'number_of_bands': 'numberOfBands',
        'resolve_table_name': 'resolveTableName'
    }

    def __init__(self, value_variable_name=None, category_variable_name=None, number_of_bands=None, resolve_table_name=None, local_vars_configuration=None):  # noqa: E501
        """ParetoSpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._value_variable_name = None
        self._category_variable_name = None
        self._number_of_bands = None
        self._resolve_table_name = None
        self.discriminator = None

        self.value_variable_name = value_variable_name
        if category_variable_name is not None:
            self.category_variable_name = category_variable_name
        if number_of_bands is not None:
            self.number_of_bands = number_of_bands
        self.resolve_table_name = resolve_table_name

    @property
    def value_variable_name(self):
        """Gets the value_variable_name of this ParetoSpecification.  # noqa: E501

        The name of the variable to calculate the value for the pareto chart  # noqa: E501

        :return: The value_variable_name of this ParetoSpecification.  # noqa: E501
        :rtype: str
        """
        return self._value_variable_name

    @value_variable_name.setter
    def value_variable_name(self, value_variable_name):
        """Sets the value_variable_name of this ParetoSpecification.

        The name of the variable to calculate the value for the pareto chart  # noqa: E501

        :param value_variable_name: The value_variable_name of this ParetoSpecification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value_variable_name is None:  # noqa: E501
            raise ValueError("Invalid value for `value_variable_name`, must not be `None`")  # noqa: E501

        self._value_variable_name = value_variable_name

    @property
    def category_variable_name(self):
        """Gets the category_variable_name of this ParetoSpecification.  # noqa: E501

        If specified, the name of the categories to show on the pareto chart.  If no categories are specified then records from the resolve table will be grouped together  # noqa: E501

        :return: The category_variable_name of this ParetoSpecification.  # noqa: E501
        :rtype: str
        """
        return self._category_variable_name

    @category_variable_name.setter
    def category_variable_name(self, category_variable_name):
        """Sets the category_variable_name of this ParetoSpecification.

        If specified, the name of the categories to show on the pareto chart.  If no categories are specified then records from the resolve table will be grouped together  # noqa: E501

        :param category_variable_name: The category_variable_name of this ParetoSpecification.  # noqa: E501
        :type: str
        """

        self._category_variable_name = category_variable_name

    @property
    def number_of_bands(self):
        """Gets the number_of_bands of this ParetoSpecification.  # noqa: E501

        If specified, and no category variable is specified, then the number of bands to group the records on the resolve table into.  # noqa: E501

        :return: The number_of_bands of this ParetoSpecification.  # noqa: E501
        :rtype: int
        """
        return self._number_of_bands

    @number_of_bands.setter
    def number_of_bands(self, number_of_bands):
        """Sets the number_of_bands of this ParetoSpecification.

        If specified, and no category variable is specified, then the number of bands to group the records on the resolve table into.  # noqa: E501

        :param number_of_bands: The number_of_bands of this ParetoSpecification.  # noqa: E501
        :type: int
        """

        self._number_of_bands = number_of_bands

    @property
    def resolve_table_name(self):
        """Gets the resolve_table_name of this ParetoSpecification.  # noqa: E501

        The name of the table to group together  # noqa: E501

        :return: The resolve_table_name of this ParetoSpecification.  # noqa: E501
        :rtype: str
        """
        return self._resolve_table_name

    @resolve_table_name.setter
    def resolve_table_name(self, resolve_table_name):
        """Sets the resolve_table_name of this ParetoSpecification.

        The name of the table to group together  # noqa: E501

        :param resolve_table_name: The resolve_table_name of this ParetoSpecification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resolve_table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `resolve_table_name`, must not be `None`")  # noqa: E501

        self._resolve_table_name = resolve_table_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParetoSpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParetoSpecification):
            return True

        return self.to_dict() != other.to_dict()
