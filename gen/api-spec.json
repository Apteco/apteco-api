{
    "swagger": "2.0",
    "info": {
        "version": "v2",
        "title": "Apteco API",
        "description": "An API to allow access to Apteco Marketing Suite resources",
        "termsOfService": "None",
        "contact": {
            "name": "Apteco Ltd",
            "url": "http://www.apteco.com",
            "email": "support@apteco.com"
        }
    },
    "host": "example.com",
    "basePath": "/OrbitAPI/",
    "schemes": [
        "http"
    ],
    "paths": {
        "/About/Version": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Returns version information about the API",
                "operationId": "About_GetVersion",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The valid version information",
                        "schema": {
                            "$ref": "#/definitions/VersionDetails"
                        }
                    }
                }
            }
        },
        "/About/Language": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Returns information about the current language the API is operating in (based on details in the request)",
                "operationId": "About_GetLanguageDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The valid language information",
                        "schema": {
                            "$ref": "#/definitions/LanguageDetails"
                        }
                    }
                }
            }
        },
        "/About/Process": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Requires OrbitAdmin: Returns details about the API's .Net process",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "About_GetProcessDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The valid process information",
                        "schema": {
                            "$ref": "#/definitions/ProcessDetails"
                        }
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/About/Process/ForceGarbageCollection": {
            "post": {
                "tags": [
                    "About"
                ],
                "summary": "Requires OrbitAdmin: Forces a garbage collection in the API's process and then returns details about the API's .Net process",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "About_ForceProcessGarbageCollection",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The valid process information",
                        "schema": {
                            "$ref": "#/definitions/ProcessDetails"
                        }
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/About/DataViews": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Get the list of DataViews that are available.",
                "operationId": "About_GetDataViews",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of DataViews",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[DataViewSummary]"
                        }
                    },
                    "400": {
                        "description": "The API has been configured not to return DataViews"
                    }
                }
            }
        },
        "/About/DataViews/{dataViewName}": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Get details for a particular DataView.",
                "operationId": "About_GetDataView",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the DataView",
                        "schema": {
                            "$ref": "#/definitions/DataViewDetails"
                        }
                    },
                    "400": {
                        "description": "The specified DataView is not the one you are currently logged in to and you are not an admin user"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "The specified DataView can't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/About/DataViews/Domains/{domain}": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Get the list of DataViews that are available to users with the specified email domain.",
                "operationId": "About_GetDataViewsForDomain",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "domain",
                        "in": "path",
                        "description": "The email domain to list DataViews for (i.e. \"example.com\")",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of DataViews",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[DataViewSummary]"
                        }
                    },
                    "400": {
                        "description": "The API has been configured not to return DataViews"
                    }
                }
            }
        },
        "/About/DataViews/Systems/{systemName}": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Get the list of DataViews that are configured with the given FastStats system.",
                "operationId": "About_GetDataViewsForSystemName",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the system to list DataViews for (i.e. \"holidays\")",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of DataViews",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[DataViewSummary]"
                        }
                    },
                    "400": {
                        "description": "The API has been configured not to return DataViews"
                    }
                }
            }
        },
        "/About/Orbit/Settings": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Gets the complete Orbit settings object",
                "operationId": "About_GetOrbitSettingsRoot",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The contents of the Orbit settings",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the Orbit settings"
                    },
                    "404": {
                        "description": "The Orbit settings couldn't be found"
                    }
                }
            }
        },
        "/About/Orbit/Settings/{settingsPath}": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Gets Orbit settings at the given path",
                "operationId": "About_GetOrbitSettings",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "settingsPath",
                        "in": "path",
                        "description": "The path of the settings",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of the Orbit settings",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the Orbit settings"
                    },
                    "404": {
                        "description": "The Orbit settings couldn't be found"
                    }
                }
            }
        },
        "/About/ExampleExperimentalResource": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "EXPERIMENTAL: Returns a sample string if experimental endpoints are enabled",
                "description": "EXPERIMENTAL",
                "operationId": "About_ExampleExperimentalResource",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "A sample message",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "500": {
                        "description": "An error message",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                }
            }
        },
        "/About/ExampleUnderDevelopmentResource": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "UNDER DEVELOPMENT: Returns a sample string if under development endpoints are enabled",
                "description": "UNDER DEVELOPMENT",
                "operationId": "About_ExampleUnderDevelopmentResource",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "A sample message",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "500": {
                        "description": "An error message",
                        "schema": {
                            "$ref": "#/definitions/ErrorMessage"
                        }
                    }
                }
            }
        },
        "/About/ExampleSubjectToChangeOrRemovalResource": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE: Returns a sample string",
                "description": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE",
                "operationId": "About_ExampleSubjectToChangeOrRemovalResource",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "A sample message",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "500": {
                        "description": "An error message"
                    }
                }
            }
        },
        "/About/Endpoints": {
            "get": {
                "tags": [
                    "About"
                ],
                "summary": "Returns details of all the endpoints in the API",
                "operationId": "About_GetEndpoints",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "excludeEndpointsWithNoLicenceRequirements",
                        "in": "query",
                        "description": "If specified, don't return endpoints in the output that have no licence requirements.  Defaults to false - returns all endpoints",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "excludeEndpointsWithNoRoleRequirements",
                        "in": "query",
                        "description": "If specified, don't return endpoints in the output that have no role requirements.  Defaults to false - returns all endpoints",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, GroupName, Method, UrlTemplate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, GroupName, Method, UrlTemplate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of all the endpoints in the API",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[EndpointDetails]"
                        }
                    }
                }
            }
        },
        "/About/ForceInternalServerError": {
            "post": {
                "tags": [
                    "About"
                ],
                "summary": "Requires OrbitAdmin: Forces an internal server error to be returned to the client",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "About_ForceInternalServerError",
                "consumes": [],
                "produces": [],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "A dummy error"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/AudienceCompositions": {
            "get": {
                "tags": [
                    "AudienceCompositions"
                ],
                "summary": "Returns all the avaiable audience compositions.",
                "operationId": "AudienceCompositions_GetAudienceCompositions",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Description, Type, SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all audience compositions",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[CompositionSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/AudienceCompositions/{systemName}": {
            "get": {
                "tags": [
                    "AudienceCompositions"
                ],
                "summary": "Returns all the avaiable audience compositions for the given FastStats system",
                "operationId": "AudienceCompositions_GetAudienceCompositionsForSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to get compositions for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Description, Type, SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Description, Type, SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all audience compositions",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[CompositionSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView or system couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "AudienceCompositions"
                ],
                "summary": "Requires OrbitAdmin: Create an audience composition for the given FastStats system.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "AudienceCompositions_CreateAudienceComposition",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to create the composition for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createAudienceCompositionDetail",
                        "in": "body",
                        "description": "Details to create the audience composition with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateAudienceCompositionDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CompositionDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    },
                    "200": {
                        "description": "The details of the created audience composition"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/AudienceCompositions/{systemName}/{audienceCompositionId}": {
            "get": {
                "tags": [
                    "AudienceCompositions"
                ],
                "summary": "Returns details for a given audience composition",
                "operationId": "AudienceCompositions_GetAudienceComposition",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to get the composition for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceCompositionId",
                        "in": "path",
                        "description": "The id of the audience composition",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the given audience composition",
                        "schema": {
                            "$ref": "#/definitions/CompositionDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView or audience composition couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "AudienceCompositions"
                ],
                "summary": "Requires OrbitAdmin: Update a given audience composition for the given FastStats system.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "AudienceCompositions_UpdateAudienceComposition",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to update the composition for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceCompositionId",
                        "in": "path",
                        "description": "The id of the audience composition",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "createAudienceCompositionDetail",
                        "in": "body",
                        "description": "Details to create the audience composition with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateAudienceCompositionDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CompositionDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    },
                    "200": {
                        "description": "The details of the created audience composition"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "AudienceCompositions"
                ],
                "summary": "Requires OrbitAdmin: Deletes a given audience composition for the given FastStats system.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "AudienceCompositions_DeleteAudienceComposition",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to delete the composition for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceCompositionId",
                        "in": "path",
                        "description": "The id of the audience composition",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The composition was deleted successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/AudienceHits": {
            "get": {
                "tags": [
                    "AudienceHits"
                ],
                "summary": "Requires OrbitAdmin: Returns all the hit information for all audiences.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "AudienceHits_GetAudienceHits",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all audiences hits",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AudienceHitSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/AudienceHits/{audienceHitId}": {
            "get": {
                "tags": [
                    "AudienceHits"
                ],
                "summary": "Requires OrbitAdmin: Returns details for a given audience hit",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "AudienceHits_GetAudienceHit",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceHitId",
                        "in": "path",
                        "description": "The id of the hit",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the given audience hit",
                        "schema": {
                            "$ref": "#/definitions/AudienceHitDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView or audience hit couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Requires OrbitAdmin: Gets summary information about each audience in the DataView.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Audiences_GetAudiences",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeDeleted",
                        "in": "query",
                        "description": "If specified, whether to include deleted audience, not deleted audience or both.  Defaults to not deleted only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDeleted",
                            "OnlyDeleted",
                            "All"
                        ]
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, LastUpdatedUsername, LastUpdatedOn.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all audiences",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AudienceSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Creates a new audience from the given details for the logged in user.",
                "description": "Requires licence flags [AudienceSelection]",
                "operationId": "Audiences_CreateAudience",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceDetail",
                        "in": "body",
                        "description": "The details for the audience to create.  If you want\r\n            to update a specific audience then POST to the /Audiences/{audienceId} URL",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateAudienceDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The audience was created successfully",
                        "schema": {
                            "$ref": "#/definitions/AudienceDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns the details of a particular audience",
                "operationId": "Audiences_GetAudience",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "includeQueries",
                        "in": "query",
                        "description": "If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "includeBrief",
                        "in": "query",
                        "description": "If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The audience details",
                        "schema": {
                            "$ref": "#/definitions/AudienceDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The audience or DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Deletes the specified audience",
                "description": "Requires licence flags [AudienceSelection]",
                "operationId": "Audiences_DeleteAudience",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The audience was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this audience.  Only audience owners or admins can delete their audiences"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Copy": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Copies an existing audience for the logged in user.",
                "description": "Requires licence flags [AudienceSelection]",
                "operationId": "Audiences_CopyAudience",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to copy",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "audienceDetail",
                        "in": "body",
                        "description": "The details used to create the new audience",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CopyAudienceDetail"
                        }
                    },
                    {
                        "name": "includeQueries",
                        "in": "query",
                        "description": "If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "includeBrief",
                        "in": "query",
                        "description": "If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The copy of the specified audience was created successfully",
                        "schema": {
                            "$ref": "#/definitions/AudienceDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/TransferOwnership": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Transfer ownership of an audience from the current user to a new owner",
                "description": "Requires licence flags [AudienceSelection]",
                "operationId": "Audiences_TransferAudienceOwnership",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to transfer.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "transferOwnershipDetails",
                        "in": "body",
                        "description": "The details for transferring ownership of the audience.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TransferAudienceOwnershipDetails"
                        }
                    },
                    {
                        "name": "includeQueries",
                        "in": "query",
                        "description": "If specified, whether to include the query definitions for the returned audience or not.  Defaults to true - to return query definitions",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "includeBrief",
                        "in": "query",
                        "description": "If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ownership of the audience was successfully transferred",
                        "schema": {
                            "$ref": "#/definitions/AudienceDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to transfer this audience.  Only audience owners can transfer their audiences"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Updates": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns a summary of the updates to a particular audience",
                "operationId": "Audiences_GetAudienceUpdates",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to get the updates for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Timestamp, Username, Title, Description, OwnerUsername, IsDeleted, ResolveTableName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the audience updates",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AudienceUpdateSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Updates the details of a particular audience.  If you don't have an id for the\r\naudience then POST to the /Audiences URL to create a new audience.",
                "description": "Requires licence flags [AudienceSelection]",
                "operationId": "Audiences_CreateAudienceUpdate",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to add/update",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "createAudienceUpdate",
                        "in": "body",
                        "description": "The details for the audience to add/update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateAudienceUpdate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The audience details were added/updated successfully",
                        "schema": {
                            "$ref": "#/definitions/AudienceUpdateDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to update the details for this audience.  Only audience owners or admins can modify their audience"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Updates/{audienceUpdateId}": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns details of an update for a particular audience",
                "operationId": "Audiences_GetAudienceUpdate",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that contains the update",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "audienceUpdateId",
                        "in": "path",
                        "description": "The id of the update for the audience",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "includeQueries",
                        "in": "query",
                        "description": "If specified, whether to include the query definitions for this update or not.  Defaults to true - to return query definitions",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "includeBrief",
                        "in": "query",
                        "description": "If specified, whether to include the brief for this update or not.  Defaults to true - to return the brief",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The audience update",
                        "schema": {
                            "$ref": "#/definitions/AudienceUpdateDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView, audience or update couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Native/Nett": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns native XML (i.e. for use with other FastStats applications) for the Nett query of the latest update for a particular audience",
                "operationId": "Audiences_GetAudienceLatestNativeForNettQuery",
                "consumes": [],
                "produces": [
                    "text/xml",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The query XML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Results": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns a summary of the results for a particular audience",
                "operationId": "Audiences_GetAudienceResults",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to get the audience of results for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Timestamp, Username, AudienceUpdateId, Description, OwnerUsername, IsDeleted, ResolveTableName, BriefText.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the audience results",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AudienceResultSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Results/{audienceResultId}": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns details of a particular result for a particular audience",
                "operationId": "Audiences_GetAudienceResult",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to get the results for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "audienceResultId",
                        "in": "path",
                        "description": "The id of the result for the audience",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The audience result",
                        "schema": {
                            "$ref": "#/definitions/AudienceResultDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView, audience or result couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/CalculateSync": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest\r\nversion of this audience will be combined to produce the end result",
                "operationId": "Audiences_CalculateAudienceLatestUpdateSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to calculate the result for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "calculateAudienceDetails",
                        "in": "body",
                        "description": "The details for calculating this audience.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CalculateAudienceDetails"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "$ref": "#/definitions/AudienceResultDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to count this audience."
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/CalculateJobs": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Create a new job to calculate counts against the FastStats system for the latest version of this audience.  The different queries associated with the latest\r\nversion of this audience will be combined to produce the end result",
                "operationId": "Audiences_CreateCalculateAudienceJobForLatestUpdate",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to calculate the result for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "calculateAudienceDetails",
                        "in": "body",
                        "description": "The details for calculating this audience.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CalculateAudienceDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The calculate job was successfully created",
                        "schema": {
                            "$ref": "#/definitions/AudienceCalculateJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to calculate this audience."
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/CalculateJobs/{jobId}": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Get the status of a running calculate job",
                "operationId": "Audiences_GetCalculateAudienceJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the calculate job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to get the status for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The job status details",
                        "schema": {
                            "$ref": "#/definitions/AudienceCalculateJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this calculate job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Cancel a running calculate job",
                "operationId": "Audiences_CancelCalculateAudienceJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the calculate job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to cancel the calculate job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/ExportSync": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest\r\nversion of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file\r\nand/or as a sample within the body of the result",
                "description": "Might require licence flags [Export]",
                "operationId": "Audiences_ExportAudienceLatestUpdateSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to export data for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "exportAudienceDetails",
                        "in": "body",
                        "description": "The details for calculating this audience.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExportAudienceDetails"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The export completed successfully",
                        "schema": {
                            "$ref": "#/definitions/AudienceExportDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to export this audience."
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/ExportJobs": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Create a new job to export data from the FastStats system for the latest version of this audience.  The different queries associated with the latest\r\nversion of this audience will be combined to identify the data to export and the specified columns will be used to export the data, to a file\r\nand/or as a sample within the body of the result",
                "description": "Might require licence flags [Export]",
                "operationId": "Audiences_CreateExportAudienceJobForLatestUpdate",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to export data for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "exportAudienceDetails",
                        "in": "body",
                        "description": "The details for exporting this audience.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExportAudienceDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The export job was successfully created",
                        "schema": {
                            "$ref": "#/definitions/AudienceExportJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to export this audience."
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/ExportJobs/{jobId}": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Get the status of a running export job",
                "operationId": "Audiences_GetExportAudienceJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the export job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to get the status for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The job status details",
                        "schema": {
                            "$ref": "#/definitions/AudienceExportJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this export job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Cancel a running export job",
                "operationId": "Audiences_CancelExportAudienceJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the export job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to cancel the export job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/CheckSync": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest\r\nversion of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.",
                "operationId": "Audiences_CheckAudienceLatestUpdateSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to calculate the result for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "checkAudienceDetails",
                        "in": "body",
                        "description": "The details for checking this audience.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CheckAudienceDetails"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "$ref": "#/definitions/AudienceCheckDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to check this audience."
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/CheckJobs": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Create a new job to calculate check statistics against the FastStats system for the latest version of this audience.  The different queries associated with the latest\r\nversion of this audience will be combined to identify the data to analyse and the specified dimensions will be used to perform the analysis.",
                "operationId": "Audiences_CreateCheckAudienceJobForLatestUpdate",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to calculate the result for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "checkAudienceDetails",
                        "in": "body",
                        "description": "The details for checking this audience.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CheckAudienceDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AudienceCheckJobDetail"
                            }
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to check this audience."
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    },
                    "201": {
                        "description": "The check job was successfully created"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/CheckJobs/{jobId}": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Get the status of a running check job",
                "operationId": "Audiences_GetCheckAudienceJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the check job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to get the status for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The job status details",
                        "schema": {
                            "$ref": "#/definitions/AudienceCheckJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this check job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Cancel a running check job",
                "operationId": "Audiences_CancelCheckAudienceJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the check job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to cancel the check job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Hits": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns a summary of the hits for this audience - i.e. information about when users have viewed the audience.",
                "operationId": "Audiences_GetAudienceHitsForAudience",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to get the hit information for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the hits of this audience",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AudienceHitSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Register a hit (view) for the given audience",
                "operationId": "Audiences_CreateAudienceHitForAudience",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to register the hit for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "createAudienceHitDetails",
                        "in": "body",
                        "description": "Details to register the hit with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateAudienceHitDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the created audience hit",
                        "schema": {
                            "$ref": "#/definitions/AudienceHitDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView or audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/Hits/{audienceHitId}": {
            "get": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Returns details for a given audience hit for this audience",
                "operationId": "Audiences_GetAudienceHitForAudience",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to get the hit information for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "audienceHitId",
                        "in": "path",
                        "description": "The id of the hit",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the given audience hit",
                        "schema": {
                            "$ref": "#/definitions/AudienceHitDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The DataView, audience or audience hit couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/DataLicensingSync": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Get data licensing information for the latest version of this audience",
                "operationId": "Audiences_CalculateAudienceDataLicensingSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "dataLicensingDetail",
                        "in": "body",
                        "description": "The details required to get data licensing information for an audience",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DataLicensingDetail"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "$ref": "#/definitions/LicensingInfo"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get data licensing information."
                    },
                    "404": {
                        "description": "The audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Create a new job to get data licensing information for the latest version of this audience",
                "operationId": "Audiences_CreateCalculateAudienceDataLicensingJob",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "dataLicensingDetail",
                        "in": "body",
                        "description": "The details required to get data licensing information for an audience",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DataLicensingDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The calculate data licensing info job was successfully created",
                        "schema": {
                            "$ref": "#/definitions/AudienceDataLicensingInfoJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this data licensing job."
                    },
                    "404": {
                        "description": "The audience couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Audiences/{audienceId}/DataLicensingJobs/{jobId}": {
            "post": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Get the status of a running calculate job",
                "operationId": "Audiences_GetCalculateAudienceDataLicensingJob",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the calculate job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "dataLicensingDetail",
                        "in": "body",
                        "description": "The details required to get data licensing information for an audience",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DataLicensingDetail"
                        }
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to get the status for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The job status details",
                        "schema": {
                            "$ref": "#/definitions/AudienceDataLicensingInfoJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this calculate job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Audiences"
                ],
                "summary": "Cancel a running data licensing job",
                "operationId": "Audiences_CancelCalculateAudienceDataLicensingJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience that the data licensing job is running for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to cancel the data licensing job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/AudienceSettings": {
            "get": {
                "tags": [
                    "AudienceSettings"
                ],
                "summary": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE: Returns the list of FastStats systems available for using audiences",
                "description": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE",
                "operationId": "AudienceSettings_GetAudienceSettingsForSystems",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of systems",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AudienceSettingsSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the list of systems"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/AudienceSettings/{systemName}": {
            "get": {
                "tags": [
                    "AudienceSettings"
                ],
                "summary": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE: Returns some top-level settings for the specified FastStats system available for use with audiences",
                "description": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE",
                "operationId": "AudienceSettings_GetAudienceSettingsForSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to return details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some metadata for the specified FastStats system",
                        "schema": {
                            "$ref": "#/definitions/AudienceSettingsDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the specified system"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/CollectionHits": {
            "get": {
                "tags": [
                    "CollectionHits"
                ],
                "summary": "Requires OrbitAdmin: Returns all the hit information for all collections.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "CollectionHits_GetCollectionHits",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all collection hits",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[CollectionHitSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/CollectionHits/{collectionHitId}": {
            "get": {
                "tags": [
                    "CollectionHits"
                ],
                "summary": "Requires OrbitAdmin: Returns details for a given collection hit.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "CollectionHits_GetCollectionHit",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionHitId",
                        "in": "path",
                        "description": "The id of the hit",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the given collection hit",
                        "schema": {
                            "$ref": "#/definitions/CollectionHitDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView or collection hit couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Collections": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Requires OrbitAdmin: Gets summary information about each collection in the DataView.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Collections_GetCollections",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeDeleted",
                        "in": "query",
                        "description": "If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDeleted",
                            "OnlyDeleted",
                            "All"
                        ]
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all collection",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[CollectionSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Collections"
                ],
                "summary": "Creates a new collection from the given details for the logged in user.",
                "operationId": "Collections_CreateCollection",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionDetail",
                        "in": "body",
                        "description": "The details for the collection to create.  If you want\r\n            to update a specific collection then PUT to the /Collections/{collectionId} URL",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpsertCollectionDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The collection was created successfully",
                        "schema": {
                            "$ref": "#/definitions/UpsertCollectionDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Collections/{collectionId}": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Returns the details of a particular collection",
                "operationId": "Collections_GetCollection",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The collection details",
                        "schema": {
                            "$ref": "#/definitions/CollectionDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this collection"
                    },
                    "404": {
                        "description": "The collection or DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Collections"
                ],
                "summary": "Updates the details of a particular collection.  If you don't have an id for the\r\ncollection then POST to the /Collections URL to create a new collection.",
                "operationId": "Collections_UpsertCollection",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to add/update",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "collectionDetail",
                        "in": "body",
                        "description": "The details for the collection to add/update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpsertCollectionDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The collection details were added/updated successfully",
                        "schema": {
                            "$ref": "#/definitions/CollectionDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to update the details for this collection.  Only collection owners or admins can modify their collections"
                    },
                    "404": {
                        "description": "The DataView or collection couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Collections"
                ],
                "summary": "Deletes the specified collection",
                "operationId": "Collections_DeleteCollection",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The collection was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this collection.  Only collection owners or admins can delete their collections"
                    },
                    "404": {
                        "description": "The DataView or collection couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Collections/{collectionId}/TransferOwnership": {
            "post": {
                "tags": [
                    "Collections"
                ],
                "summary": "Transfer ownership of a collection from the current user to a new owner",
                "operationId": "Collections_TransferCollectionOwnership",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to transfer.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "transferOwnershipDetails",
                        "in": "body",
                        "description": "The details for transferring ownership of the collection.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TransferCollectionOwnershipDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ownership of the collection was successfully transferred",
                        "schema": {
                            "$ref": "#/definitions/CollectionDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to transfer this collection.  Only collection owners can transfer their collections"
                    },
                    "404": {
                        "description": "The DataView or collection couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Collections/{collectionId}/Parts": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Returns a summary of the parts contained within a particular collection",
                "operationId": "Collections_GetCollectionParts",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to get the parts for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Title, VisualisationType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Title, VisualisationType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the collection parts",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[CollectionPartSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this collection"
                    },
                    "404": {
                        "description": "The DataView or collection couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Collections/{collectionId}/Parts/{partIndex}": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Returns details of a part contained within a particular collection",
                "operationId": "Collections_GetCollectionPart",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection that contains the part",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "partIndex",
                        "in": "path",
                        "description": "The index of the part within the collection",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The collection part",
                        "schema": {
                            "$ref": "#/definitions/CollectionPartDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this collection"
                    },
                    "404": {
                        "description": "The DataView, collection or part within the collection couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Collections/{collectionId}/Hits": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Returns a summary of the hits for this collection - i.e. information about when users have viewed the collection.",
                "operationId": "Collections_GetCollectionHitsForCollection",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to get the hit information for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, Timestamp, UserAgentDetails.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the hits of this collection",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[CollectionHitSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this collection"
                    },
                    "404": {
                        "description": "The DataView or collection couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Collections"
                ],
                "summary": "Register a hit (view) for the given collection",
                "operationId": "Collections_CreateCollectionHitForCollection",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to register the hit for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "createCollectionHitDetails",
                        "in": "body",
                        "description": "Details to register the hit with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateCollectionHitDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the created collection hit",
                        "schema": {
                            "$ref": "#/definitions/CollectionHitDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this collection"
                    },
                    "404": {
                        "description": "The DataView or collection couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Collections/{collectionId}/Hits/{collectionHitId}": {
            "get": {
                "tags": [
                    "Collections"
                ],
                "summary": "Returns details for a given collection hit for this collection",
                "operationId": "Collections_GetCollectionHitForCollection",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to get the hit information for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "collectionHitId",
                        "in": "path",
                        "description": "The id of the hit",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the given collection hit",
                        "schema": {
                            "$ref": "#/definitions/CollectionHitDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this collection"
                    },
                    "404": {
                        "description": "The DataView, collection or collection hit couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Cubes/{systemName}/CalculateSync": {
            "post": {
                "tags": [
                    "Cubes"
                ],
                "summary": "Calcaultes a cube using the given definition and returns the results.\r\nThe data to build the cube from is defined by the base query provided.",
                "description": "Requires licence flags [Cube]",
                "operationId": "Cubes_CalculateCubeSynchronously",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cube",
                        "in": "body",
                        "description": "The cube definition to use",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Cube"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "returnDefinition",
                        "in": "query",
                        "description": "Whether to include the cube's definition in the results.  Default is false.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The export result for the given definition",
                        "schema": {
                            "$ref": "#/definitions/CubeResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/Items/{dashboardItemId}/CalculateSync": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Return data needed to render visualisation for dashboard item",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_GetDashboardItemDataSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "dashboardItemId",
                        "in": "path",
                        "description": "The id of the dashboard item to calculate the results for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "requestData",
                        "in": "body",
                        "description": "Used to filter the data on the dashboard item and define the drill down level",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DashboardItemData"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "$ref": "#/definitions/DashboardItemDataResultDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard item couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Aysyncrounously request data needed to render an array of dashboard items",
                "operationId": "Dashboards_CalculateDashboardData",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "requestData",
                        "in": "body",
                        "description": "Used to filter the data on the dashboard item and define the drill down level",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CalculateDashboardData"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CalculateDashboardItemJobCreatedResult"
                            }
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/{jobId}": {
            "get": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Return data needed to render visualisation for dashboard item",
                "operationId": "Dashboards_GetDashboardJobResults",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the dashboard item to calculate the results for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "$ref": "#/definitions/DashboardItemDataJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard item couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Cancel a running calculate dashboard data job",
                "operationId": "Dashboards_CancelCalculateDashboardDataJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView, system or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/Items/CalculateJobs/Results": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Return data needed to render visualisation for dashboard item(s) or the status of the job(s) if not complete",
                "operationId": "Dashboards_BatchGetDashboardJobResults",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to get the results for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "jobIds",
                        "in": "body",
                        "description": "An array of the jobIds to get the results for",
                        "required": false,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DashboardItemDataJobDetail"
                            }
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard item couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Submit an array of jobs to calculate the data needed to render visualisation previews",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_CreateDashboardItemPreviewDataJobs",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "requestData",
                        "in": "body",
                        "description": "The data required to process the request",
                        "required": false,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DashboardItemPreviewData"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DashboardItemDataJobCreated"
                            }
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard item couldn't be found"
                    },
                    "200": {
                        "description": "The calculation completed successfully"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{systemName}/Items/DashboardItemPreviewJobs/Results": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Return data needed to render visualisation for dashboard preview item (s) or the status of the job(s) if not complete",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_GetDashboardItemPreviewDataJobs",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobIds",
                        "in": "body",
                        "description": "An array of the jobIds to get the results for",
                        "required": false,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DashboardItemDataJobDetail"
                            }
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard item couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{systemName}/DashboardItemPreviewJobs/{jobId}": {
            "get": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Return data needed to render visualisation for dashboard item when previewing",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_GetDashboardItemPreviewDataJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the dashboard item to calculate the results for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "$ref": "#/definitions/DashboardItemDataJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard item couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Cancel a running dashboard item preview job",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_CancelDashboardItemPreviewDataJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView, system or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Creates a new dashboard from the given details for the logged in user.",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_CreateDashboard",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardDetail",
                        "in": "body",
                        "description": "The details for the dashboard to create.  If you want\r\n            to update a specific dashboard then POST to the /Dashboards/{dashboardId} URL",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateDashboardDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The dashboard was created successfully",
                        "schema": {
                            "$ref": "#/definitions/DashboardDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/Updates": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Updates the details of a particular dashboard.  If you don't have an id for the\r\ndashboard then POST to the /Dashboards URL to create a new dashboard.",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_CreateDashboardUpdate",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to add/update",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "dashboardDetail",
                        "in": "body",
                        "description": "The details for the dashboard to add/update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateDashboardUpdateDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The dashboard details were added/updated successfully",
                        "schema": {
                            "$ref": "#/definitions/DashboardDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}": {
            "delete": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Deletes the specified dashboard",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_DeleteDashboard",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The dashboard was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this dashboard.  Only dashboard owners or admins can delete their dashboards"
                    },
                    "404": {
                        "description": "The DataView or dashboard couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/Copy": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Copies an existing dashboard for the logged in user.",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_CopyDashboard",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to copy",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "dashboardDetail",
                        "in": "body",
                        "description": "The details used to create the new dashboard",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CopyDashboardDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The copy of the specified dashboard was created successfully",
                        "schema": {
                            "$ref": "#/definitions/DashboardDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/ConvertToAudience": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Converts a dashboard (including any global filters applied) to an Audience",
                "description": "Requires licence flags [AudienceSelection]",
                "operationId": "Dashboards_ConvertToAudience",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "requestData",
                        "in": "body",
                        "description": "Used to pass additional filter query and the name for the new audience",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ConvertDashboardToAudience"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The calculation completed successfully",
                        "schema": {
                            "$ref": "#/definitions/ConvertDashboardToAudienceResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Dashboards/{dashboardId}/ExportSync": {
            "post": {
                "tags": [
                    "Dashboards"
                ],
                "summary": "Return export data needed to view the underlying data for a dashboard",
                "description": "Requires licence flags [Dashboards]",
                "operationId": "Dashboards_GetDashboardExportSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The id of the dashboard to calculate the result for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "requestData",
                        "in": "body",
                        "description": "Used to filter the data on the dashboard",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DashboardExportData"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out. Leave unspecified to use the default value given in the dashboards service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The export completed successfully",
                        "schema": {
                            "$ref": "#/definitions/DashboardExportDataResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or dashboard item couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing": {
            "get": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE: Returns the list of FastStats systems available for licensing data from",
                "description": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE",
                "operationId": "DataLicensing_GetDataLicensingSystems",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of systems",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[DataLicensingSystemSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the list of systems"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing/{systemName}": {
            "get": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE: Returns some top-level details for the specified FastStats system to license data from",
                "description": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE",
                "operationId": "DataLicensing_GetDataLicensingSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to return details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some metadata for the specified FastStats system",
                        "schema": {
                            "$ref": "#/definitions/DataLicensingSystemDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the specified system"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing/{systemName}/PurchaseSync": {
            "post": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Purchase data licensing information",
                "operationId": "DataLicensing_PurchaseDataLicensingSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "purchaseDetail",
                        "in": "body",
                        "description": "The details for the data licensing purchase",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DataPurchaseDetail"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The purchase completed successfully",
                        "schema": {
                            "$ref": "#/definitions/PurchaseInfo"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to purchase records."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs": {
            "post": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Create a new job to purchase data licensing information",
                "operationId": "DataLicensing_CreatePurchaseDataLicensingJob",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "purchaseDetail",
                        "in": "body",
                        "description": "The details for the data licensing purchase",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DataPurchaseDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The purchase data licensing info job was successfully created",
                        "schema": {
                            "$ref": "#/definitions/DataPurchaseJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to create a purchasing job."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing/{systemName}/DataPurchaseJobs/{jobId}": {
            "get": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Get the status of a running purchase job",
                "operationId": "DataLicensing_GetDataPurchaseJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to get the status for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The job status details",
                        "schema": {
                            "$ref": "#/definitions/DataPurchaseJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this purchasing job."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Cancel a running data purchasing job",
                "operationId": "DataLicensing_CancelDataPurchaseJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to cancel this purchasing job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing/{systemName}/LicensingSets": {
            "get": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Get the licensing sets for a system",
                "operationId": "DataLicensing_GetLicensingSetsSync",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the audience service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the available licensing sets",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[LicensingSet]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the available licensing sets."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs": {
            "post": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Create a new job to get the available licensing sets for a system",
                "operationId": "DataLicensing_CreateGetLicensingSetsJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The licensing sets job was successfully created",
                        "schema": {
                            "$ref": "#/definitions/LicensingSetsJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the available licensing sets."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/DataLicensing/{systemName}/LicensingSetsJobs/{jobId}": {
            "get": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Get the status of a running licensing sets job",
                "operationId": "DataLicensing_GetLicensingSetsJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to get the status for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The job status details",
                        "schema": {
                            "$ref": "#/definitions/LicensingSetsJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this licensing sets job."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DataLicensing"
                ],
                "summary": "Cancel a running licensing sets job",
                "operationId": "DataLicensing_CancelLicensingSetsJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to cancel this purchasing job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Directories": {
            "get": {
                "tags": [
                    "Directories"
                ],
                "summary": "Returns the list of systems that have access to a filesystem",
                "operationId": "Directories_GetFileSystems",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are SystemName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of systems",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[FileSystemSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the list of systems"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Directories/{systemName}": {
            "get": {
                "tags": [
                    "Directories"
                ],
                "summary": "Returns the list of root directories configured in this FastStats system",
                "operationId": "Directories_GetRootFileEntries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of root directories",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[FileEntry]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the root directories"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Directories/{systemName}/{directoryPath}": {
            "get": {
                "tags": [
                    "Directories"
                ],
                "summary": "Returns the list of files and subdirectories under the given directory",
                "operationId": "Directories_GetFileEntries",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "directoryPath",
                        "in": "path",
                        "description": "The path of the directory to list the contents of",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of files and subdirectories under the given directory",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[FileEntry]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given directory"
                    },
                    "404": {
                        "description": "The system name or specified directory couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Directories"
                ],
                "summary": "Ensure that a directory exists in a location",
                "operationId": "Directories_UpsertDirectory",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "directoryPath",
                        "in": "path",
                        "description": "The path to the directory that should exist",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Info on the new directory",
                        "schema": {
                            "$ref": "#/definitions/FileEntry"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given directory"
                    },
                    "404": {
                        "description": "The system name or specified directory couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Directories"
                ],
                "summary": "Deletes directory at location",
                "operationId": "Directories_DeleteDirectory",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "directoryPath",
                        "in": "path",
                        "description": "The path to the directory to be deleted",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file/directory"
                    },
                    "404": {
                        "description": "The system name or specified directory/file couldn't be found"
                    },
                    "200": {
                        "description": "The directory was deleted"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Exports": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE: Returns the list of FastStats systems available for exporting data from",
                "description": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE",
                "operationId": "Exports_GetExportSystems",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of systems",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ExportSystemSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the list of systems"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Exports/{systemName}": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "summary": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE: Returns some top-level details for the specified FastStats system to export from",
                "description": "SUBJECT TO CHANGE OR REMOVAL WITHOUT NOTICE",
                "operationId": "Exports_GetExportSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to return details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some metadata for the specified FastStats system",
                        "schema": {
                            "$ref": "#/definitions/ExportSystemDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the specified system"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Exports/{systemName}/ExportSync": {
            "post": {
                "tags": [
                    "Exports"
                ],
                "summary": "Exports data using the given export definition and returns the results.\r\nThe results might contain the actual data in the \"rows\" part of the result or this might be written to a file.\r\nThe data to be exported is defined by the base query provided, along with any limits defined in the export request.",
                "description": "Requires licence flags [Export]",
                "operationId": "Exports_PerformExportSynchronously",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "export",
                        "in": "body",
                        "description": "The export definition to use",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Export"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "returnDefinition",
                        "in": "query",
                        "description": "Whether to include the export's definition in the results.  Default is false.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The export result for the given definition",
                        "schema": {
                            "$ref": "#/definitions/ExportResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/ExternalLogin/Login": {
            "get": {
                "tags": [
                    "ExternalLogin"
                ],
                "summary": "Initiate the external login process",
                "operationId": "ExternalLogin_Login",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "returnUrl",
                        "in": "query",
                        "description": "The URL to redirect to after the login process has been successful",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "302": {
                        "description": "A redirect to the next phase of the login process"
                    }
                }
            }
        },
        "/ExternalLogin/AssertionConsumerService": {
            "post": {
                "tags": [
                    "ExternalLogin"
                ],
                "summary": "Initiate the next phase of the login process that establishes a session.",
                "operationId": "ExternalLogin_AssertionConsumerService",
                "consumes": [],
                "produces": [],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "302": {
                        "description": "A redirect to the application to process the created login token"
                    }
                }
            }
        },
        "/ExternalLogin/SingleLogoutService": {
            "get": {
                "tags": [
                    "ExternalLogin"
                ],
                "summary": "Initiate a logout from the application.",
                "operationId": "ExternalLogin_SingleLogoutService",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "SAMLRequest",
                        "in": "query",
                        "description": "The SAML details",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "302": {
                        "description": "A redirect to the application to perform the logout"
                    }
                }
            }
        },
        "/{dataViewName}/FastStatsBuilds/{systemName}/BuildSync": {
            "post": {
                "tags": [
                    "FastStatsBuilds"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Builds a FastStats system from the given definition",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsBuilds_FastStatsBuildSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "buildDefinition",
                        "in": "body",
                        "description": "The details needed to build the system",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/BuildDefinition"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the build service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BuildResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to build systems."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    },
                    "201": {
                        "description": "The build job completed"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs": {
            "post": {
                "tags": [
                    "FastStatsBuilds"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Create a new job to builds a FastStats system from the given definition",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsBuilds_CreateFastStatsBuildJob",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "buildDefinition",
                        "in": "body",
                        "description": "The details needed to build the system",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/BuildDefinition"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The build job job was successfully created",
                        "schema": {
                            "$ref": "#/definitions/BuildJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to build systems."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsBuilds/{systemName}/BuildJobs/{jobId}": {
            "get": {
                "tags": [
                    "FastStatsBuilds"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Get the status of a running FastStats build job",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsBuilds_GetFastStatsBuildJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to get the status for.",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The job status details",
                        "schema": {
                            "$ref": "#/definitions/BuildJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to get the status of this FastStats build job."
                    },
                    "404": {
                        "description": "The DataView or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "FastStatsBuilds"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Cancel a running data purchasing job",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsBuilds_CancelFastStatsBuildJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The job was cancelled successful"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to cancel this purchasing job."
                    },
                    "404": {
                        "description": "The DataView, audience or job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsJobs": {
            "get": {
                "tags": [
                    "FastStatsJobs"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for all systems in a particular DataView.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsJobs_GetFastStatsJobs",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of jobs",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[JobSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "No jobs could be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsJobs/CalculateProcessingTimeStatsSync": {
            "post": {
                "tags": [
                    "FastStatsJobs"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for all systems in a particular DataView.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsJobs_CalculateProcessingTimeStatsSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "processingTimeStatisticsDetails",
                        "in": "body",
                        "description": "The details to calcuate the stats with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ProcessingTimeStatisticsDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics about the distribution of job times for the specified jobs",
                        "schema": {
                            "$ref": "#/definitions/ProcessingTimeStatistics"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "No jobs could be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsJobs/{systemName}": {
            "get": {
                "tags": [
                    "FastStatsJobs"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Gets all the jobs in the FastStats job queue for the given system.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsJobs_GetFastStatsJobsForSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the system to return jobs for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, DeletionDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of jobs",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[JobSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "No jobs could be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsJobs/{systemName}/CalculateProcessingTimeStatsSync": {
            "post": {
                "tags": [
                    "FastStatsJobs"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Calculate processing statistics for the specified jobs in the FastStats job queue for the given system.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsJobs_CalculateProcessingTimeStatsForSystemSync",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "processingTimeStatisticsDetails",
                        "in": "body",
                        "description": "The details to calcuate the stats with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ProcessingTimeStatisticsDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics about the distribution of job times for the specified jobs",
                        "schema": {
                            "$ref": "#/definitions/ProcessingTimeStatistics"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "No jobs could be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsJobs/{systemName}/ClearCommandHash": {
            "post": {
                "tags": [
                    "FastStatsJobs"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Clear the hash value column of cache in the FastStats job queue for the given system.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsJobs_ClearCommandHash",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsJobs/{systemName}/{jobId}": {
            "get": {
                "tags": [
                    "FastStatsJobs"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Gets details for a particular job in the FastStats job queue for the given system.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsJobs_GetFastStatsJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the system the job is in",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "The id of the FastStats job",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "returnRequest",
                        "in": "query",
                        "description": "Whether to return the request XML for the job.  Defaults to false",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "returnResults",
                        "in": "query",
                        "description": "Whether to return the result XML for the job.  Defaults to false",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of jobs",
                        "schema": {
                            "$ref": "#/definitions/JobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "No jobs could be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Returns the list of FastStats systems available",
                "operationId": "FastStatsSystems_GetFastStatsSystems",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Description, FastStatsBuildDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Description, FastStatsBuildDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of systems",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[FastStatsSystemSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the list of systems"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Returns some top-level details for the specified FastStats system",
                "operationId": "FastStatsSystems_GetFastStatsSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to return details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some metadata for the specified FastStats system",
                        "schema": {
                            "$ref": "#/definitions/FastStatsSystemDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the specified system"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/Variables": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets all the variables present in the FastStats system",
                "operationId": "FastStatsSystems_GetFastStatsVariables",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf('tablename'), GetAncestorsAndSelf('tablename'), GetAncestors('tablename').",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Description, Type, SelectorType, TableName, NumberOfCodes, FolderName.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of FastStats variables",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[Variable]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see variables for this system"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets the details for a particular variable in the FastStats system",
                "operationId": "FastStatsSystems_GetFastStatsVariable",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "The name of the variable to get the details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the specified variable",
                        "schema": {
                            "$ref": "#/definitions/Variable"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the particular variable for this system"
                    },
                    "404": {
                        "description": "The system name or specified variable couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/Variables/{variableName}/Codes": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable",
                "operationId": "FastStatsSystems_GetFastStatsVariableCodes",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "The name of the variable to get the var codes for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Code, Description, Count.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Code, Description, Count.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The var codes of the specified variable",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[VarCode]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the particular variable for this system"
                    },
                    "404": {
                        "description": "The system name or specified variable couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets all the categories (var codes) for the specified variable in the FastStats system if it is a selector variable",
                "operationId": "FastStatsSystems_RefreshFastStatsVariableCodesSync",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "variableName",
                        "in": "path",
                        "description": "The name of the variable to get the var codes for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The var codes of the specified variable",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[VarCode]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the particular variable for this system"
                    },
                    "404": {
                        "description": "The system name or specified variable couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/Tables": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets all the tables present in the FastStats system",
                "operationId": "FastStatsSystems_GetFastStatsTables",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf('tablename'), GetAncestorsAndSelf('tablename'), GetAncestors('tablename').",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, SingularDisplayName, PluralDisplayName, TotalRecords.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of FastStats tables",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[Table]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see tables for this system"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/Tables/{tableName}": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets the details for a particular table in the FastStats system",
                "operationId": "FastStatsSystems_GetFastStatsTable",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tableName",
                        "in": "path",
                        "description": "The name of the table to get the details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the specified table",
                        "schema": {
                            "$ref": "#/definitions/Table"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the particular table for this system"
                    },
                    "404": {
                        "description": "The system name or specified variable couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/Folders": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets the items in the root of the FastStats system folder structure",
                "operationId": "FastStatsSystems_GetFastStatsRootFolder",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf('tablename'), GetAncestorsAndSelf('tablename'), GetAncestors('tablename').",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Description, Type, TableName, VariableType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The items in the root of the FastStats system folder structure",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[FolderStructureNode]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the folder structure for this system"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/Folders/{path}": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets the folder structure for the FastStats system",
                "operationId": "FastStatsSystems_GetFastStatsFolder",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "path",
                        "in": "path",
                        "description": "The path to the folder that should be retrieved",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Description, Type, TableName, VariableType. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf('tablename'), GetAncestorsAndSelf('tablename'), GetAncestors('tablename').",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Description, Type, TableName, VariableType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The FastStats system folder structure",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[FolderStructureNode]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the folder structure for this system"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/All": {
            "get": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Gets all FastStats systems items - variables, var codes, tables and folders",
                "operationId": "FastStatsSystems_GetAllFastStatsSystemItems",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Key, Type, TableName, VariableType. The following functions can also be used in the filter: GetAncestorsDescendantsAndSelf('tablename'), GetAncestorsAndSelf('tablename'), GetAncestors('tablename').",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Key, Type, TableName, VariableType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of all parts of the FastStats system",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[FastStatsSystemItem]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this system"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/FastStatsSystems/{systemName}/RefreshInformationSync": {
            "post": {
                "tags": [
                    "FastStatsSystems"
                ],
                "summary": "Requires OrbitAdmin: An endpoint to request the API refresh any information it holds on the given FastStats system.\r\nThis endpoint will wait until the refresh has completed before returning.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "FastStatsSystems_RefreshSystemInformationSync",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this system"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    },
                    "201": {
                        "description": "The system successfully refreshed"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Files/{systemName}/{filePath}": {
            "get": {
                "tags": [
                    "Files"
                ],
                "summary": "Returns the contents for a file",
                "operationId": "Files_GetFile",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filePath",
                        "in": "path",
                        "description": "The path of the file to return the contents for",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of the file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or specified directory couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Files"
                ],
                "summary": "Creates or updates a file at a location",
                "operationId": "Files_UpsertFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filePath",
                        "in": "path",
                        "description": "The path in the system where the file will be put",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "The file to upload.",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Details of the created file",
                        "schema": {
                            "$ref": "#/definitions/FileEntry"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or specified directory couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Files"
                ],
                "summary": "Deletes file at location",
                "operationId": "Files_DeleteFile",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filePath",
                        "in": "path",
                        "description": "The path to the file to be deleted",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or specified directory/file couldn't be found"
                    },
                    "200": {
                        "description": "The file was deleted"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Files/{systemName}/{toFilePath}": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Copies a file",
                "operationId": "Files_CopyFile",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromFilePath",
                        "in": "query",
                        "description": "The path of the source file",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "targetBaseDirectory",
                        "in": "query",
                        "description": "The base directory to receive the file",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "toFilePath",
                        "in": "path",
                        "description": "The path of the destination file",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the file service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The file was copied"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or specified directory couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Groups": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Returns all groups in the DataView.",
                "operationId": "Groups_GetGroups",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "query",
                        "description": "If specified, whether to limit to only groups attached to the system name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all groups",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[GroupSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Groups/{groupId}": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Returns details for the given group",
                "operationId": "Groups_GetGroupDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The id of the group to view the details for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The group's details",
                        "schema": {
                            "$ref": "#/definitions/GroupDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't allowed to see the group details"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Groups/{groupId}/Users": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Returns all users in the given group.",
                "operationId": "Groups_GetUserDetailsForGroup",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The id of the group to get users for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "includeDisabled",
                        "in": "query",
                        "description": "If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDisabled",
                            "OnlyDisabled",
                            "All"
                        ]
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all users in the given group",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserSummary]"
                        }
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Groups/Unallocated/Users": {
            "get": {
                "tags": [
                    "Groups"
                ],
                "summary": "Returns all users that haven't been allocated to a group.",
                "operationId": "Groups_GetUserDetailsForUnallocatedGroup",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeDisabled",
                        "in": "query",
                        "description": "If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDisabled",
                            "OnlyDisabled",
                            "All"
                        ]
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all users",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserSummary]"
                        }
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the list of systems configured to support PeopleStage",
                "operationId": "PeopleStage_GetPeopleStageSystems",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are SystemName, ProgrammeDescription.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are SystemName, ProgrammeDescription.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of systems",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[PeopleStageSystemSummary]"
                        }
                    },
                    "202": {
                        "description": "The list of systems is not ready - should think about retrying",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the list of systems"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns details of the PeopleStage system for the given system name",
                "operationId": "PeopleStage_GetPeopleStageSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the PeopleStage system",
                        "schema": {
                            "$ref": "#/definitions/PeopleStageSystemDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the information for the given system"
                    },
                    "404": {
                        "description": "The DataView or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Channels": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the list of PeopleStage channels available in this FastStats system",
                "operationId": "PeopleStage_GetPeopleStageChannels",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Description, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Description, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of PeopleStage channels",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ChannelSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to access PeopleStage channels"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Channels/{channelId}": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the details of a particular PeopleStage channel",
                "operationId": "PeopleStage_GetPeopleStageChannel",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "channelId",
                        "in": "path",
                        "description": "The id of the PeopleStage channel to view",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The PeopleStage channel details",
                        "schema": {
                            "$ref": "#/definitions/ChannelDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this channel"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the list of PeopleStage elements available in this FastStats system",
                "operationId": "PeopleStage_GetPeopleStageElements",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Description, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Description, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of PeopleStage elements",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ElementSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to access PeopleStage elements"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the details of a particular PeopleStage element",
                "operationId": "PeopleStage_GetPeopleStageElement",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The PeopleStage element details",
                        "schema": {
                            "$ref": "#/definitions/ElementDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Children": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the list of children for a particular PeopleStage element",
                "operationId": "PeopleStage_GetPeopleStageElementChildren",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Description, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Description, Type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of children for a particular PeopleStage element",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ElementSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/CommunicationStats": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns statistics for the number of communications sent over time for a particular PeopleStage element",
                "operationId": "PeopleStage_GetPeopleStageElementCommunicationStatistics",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The PeopleStage element details",
                        "schema": {
                            "$ref": "#/definitions/CommunicationStatistics"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ChannelStats": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns statistics for the total number of communications sent per channel for a particular PeopleStage element",
                "operationId": "PeopleStage_GetPeopleStageElementChannelStatistics",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The PeopleStage element channel statistics",
                        "schema": {
                            "$ref": "#/definitions/ChannelStatistics"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/ResponseStats": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns statistics for the total number of responses received per channel for a particular PeopleStage element",
                "operationId": "PeopleStage_GetPeopleStageElementResponseStatistics",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The PeopleStage element response statistics",
                        "schema": {
                            "$ref": "#/definitions/ResponseStatistics"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the status for a PeopleStage element, where status information is available",
                "operationId": "PeopleStage_GetPeopleStageElementStatus",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The PeopleStage element status information",
                        "schema": {
                            "$ref": "#/definitions/ElementStatus"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the status information for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/Status/Descendants": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns the status for all the descendant elements of a PeopleStage element where status information is available",
                "operationId": "PeopleStage_GetPeopleStageElementStatusForDescendants",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, Description, Type, SuccessfulCampaignsCount, ErroredCampaignsCount, InactiveCampaignsCount, NeedsApprovalCampaignsCount, TotalCommunicationsCount, TotalDeliveriesCount, TotalMessagesCount, TotalCampaignsCount, FirstRan, LastRan.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The PeopleStage element status information",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ElementStatus]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the status information for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Sync": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.",
                "operationId": "PeopleStage_GetPeopleStageRangeStatisticsSync",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "dateRange",
                        "in": "query",
                        "description": "Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Range statistics for the given PeopleStage element",
                        "schema": {
                            "$ref": "#/definitions/RangeStatistics"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the range statistics for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/PeopleStage/{systemName}/Elements/{elementId}/RangeStats/Descendants/Sync": {
            "get": {
                "tags": [
                    "PeopleStage"
                ],
                "summary": "Returns some statistics for a given date range for a particular PeopleStage element.  This call may take a long time and will block until the information is available.",
                "operationId": "PeopleStage_GetPeopleStageRangeStatisticsForDescendantsSync",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "elementId",
                        "in": "path",
                        "description": "The id of the PeopleStage element to view",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the PeopleStage service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, CommunicationsCount, DeliveriesCount, MessagesCount, CampaignsCount, FirstRan, LastRan.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "dateRange",
                        "in": "query",
                        "description": "Limit the date range of the returned data using a simple expression language.  The name of the field to use is Date",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Range statistics for the given PeopleStage element",
                        "schema": {
                            "$ref": "#/definitions/RangeStatistics"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the range statistics for this element"
                    },
                    "404": {
                        "description": "The element or system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Permissions/{systemName}/{permissionType}/{permission}/{resourceType}/{resource}": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Returns whether the current user is authorised to access a particular resource for a particular permission",
                "description": "EXPERIMENTAL",
                "operationId": "Permissions_IsAuthorised",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permissionType",
                        "in": "path",
                        "description": "The type of permission to get the permissions for",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "AccessRights",
                            "PublishRights",
                            "ExecutionRights",
                            "SettingsRights",
                            "DataRights",
                            "DiagramRights",
                            "StageRights",
                            "UsageRights"
                        ]
                    },
                    {
                        "name": "permission",
                        "in": "path",
                        "description": "The permission to test for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceType",
                        "in": "path",
                        "description": "The type of resource to get the permissions for",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Unknown",
                            "File",
                            "PeopleStageElement",
                            "PeopleStageDiagram",
                            "PeopleStageSeed",
                            "PeopleStageSeedSet",
                            "PeopleStageChannel",
                            "PeopleStageAggregation",
                            "PeopleStageVoucherSet",
                            "PeopleStageTemplate",
                            "CascadeElement",
                            "FastStatsElement",
                            "UserElement"
                        ]
                    },
                    {
                        "name": "resource",
                        "in": "path",
                        "description": "The path for the particular type of resource",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or system couldn't be found"
                    },
                    "201": {
                        "description": "Whether the user is authorised"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Permissions/{systemName}/User/{userId}": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Returns the permissions for a particular user",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_GetPermissionsForUser",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The id of the user to get the permissions for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AuthorisedPermissionWithLookups]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to request permissions.  Only admins can request permissions"
                    },
                    "404": {
                        "description": "The DataView or system couldn't be found"
                    },
                    "201": {
                        "description": "A list of valid permissions"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Creates a new permission from the given details, using the default permission set for the user.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_CreatePermissionForUser",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The id of the user to apply the permission to",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "permission",
                        "in": "body",
                        "description": "The details of the permission to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The permission was created successfully",
                        "schema": {
                            "$ref": "#/definitions/AuthorisedPermissionWithLookups"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to create this permission.  Only admins can create permissions"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Permissions/{systemName}/Group/{groupId}": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Returns the permissions for a particular group",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_GetPermissionsForGroup",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The id of the group to get the permissions for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AuthorisedPermissionWithLookups]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to request permissions.  Only admins can request permissions"
                    },
                    "404": {
                        "description": "The DataView or system couldn't be found"
                    },
                    "201": {
                        "description": "A list of valid permissions"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Creates a new permission from the given details, using the default permission set for the group.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_CreatePermissionForGroup",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The id of the group to apply the permission to",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "permission",
                        "in": "body",
                        "description": "The details of the permission to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The permission was created successfully",
                        "schema": {
                            "$ref": "#/definitions/AuthorisedPermissionWithLookups"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to create this permission.  Only admins can create permissions"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Permissions/{systemName}/System": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Returns the permissions for a particular system",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_GetPermissionsForSystem",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AuthorisedPermissionWithLookups]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to request permissions.  Only admins can request permissions"
                    },
                    "404": {
                        "description": "The DataView or system couldn't be found"
                    },
                    "201": {
                        "description": "A list of valid permissions"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Creates a new permission from the given details, using the default permission set for the system.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_CreatePermissionForSystem",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permission",
                        "in": "body",
                        "description": "The details of the permission to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The permission was created successfully",
                        "schema": {
                            "$ref": "#/definitions/AuthorisedPermissionWithLookups"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to create this permission.  Only admins can create permissions"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Permissions/{systemName}/Team/{teamId}": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Returns the permissions for a particular team",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_GetPermissionsForTeam",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "The id of the team to get the permissions for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AuthorisedPermissionWithLookups]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to request permissions.  Only admins can request permissions"
                    },
                    "404": {
                        "description": "The DataView or system couldn't be found"
                    },
                    "201": {
                        "description": "A list of valid permissions"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Creates a new permission from the given details, using the default permission set for the team.",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_CreatePermissionForTeam",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "The id of the team to apply the permission to",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "permission",
                        "in": "body",
                        "description": "The details of the permission to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The permission was created successfully",
                        "schema": {
                            "$ref": "#/definitions/AuthorisedPermissionWithLookups"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to create this permission.  Only admins can create permissions"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Permissions/{systemName}/PermissionSet/{permissionSetId}": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Returns the permissions for a particular permission set",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_GetPermissionsForPermissionSet",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permissionSetId",
                        "in": "path",
                        "description": "The id of the permission set to get the permissions for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are ResourceType, Resource, PermissionType.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[AuthorisedPermissionWithLookups]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to request permissions.  Only admins can request permissions"
                    },
                    "404": {
                        "description": "The DataView or system couldn't be found"
                    },
                    "201": {
                        "description": "A list of valid permissions"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Permissions/{systemName}/{permissionId}": {
            "put": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Modify the specified permission",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_ModifyPermission",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The permission id of the permission",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "permission",
                        "in": "body",
                        "description": "The permission to modify",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AuthorisedPermission"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The permission was modified successfully",
                        "schema": {
                            "$ref": "#/definitions/AuthorisedPermissionWithLookups"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to modify this permission.  Only admins can modify permissions"
                    },
                    "404": {
                        "description": "The DataView or permission couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Permissions"
                ],
                "summary": "EXPERIMENTAL: Requires OrbitAdmin: Deletes the specified permission",
                "description": "EXPERIMENTAL\r\nThis endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Permissions_DeletePermission",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The id of the permission to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The permission was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this permission.  Only admins can delete permissions"
                    },
                    "404": {
                        "description": "The DataView or permission couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Queries/{systemName}/CountSync": {
            "post": {
                "tags": [
                    "Queries"
                ],
                "summary": "Counts the given query and returns the results",
                "description": "Requires licence flags [AdvancedQuery]",
                "operationId": "Queries_PerformQueryCountSynchronously",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "query",
                        "in": "body",
                        "description": "The query definition to count",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Query"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "returnDefinition",
                        "in": "query",
                        "description": "Whether to include the query's definition in the results.  Default is false.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count result for the given query",
                        "schema": {
                            "$ref": "#/definitions/QueryResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "The system name couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Queries/{systemName}/CountFileSync": {
            "post": {
                "tags": [
                    "Queries"
                ],
                "summary": "Counts the query in the specified file and returns the results",
                "description": "Requires licence flags [AdvancedQuery]",
                "operationId": "Queries_PerformQueryFileCountSynchronously",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "queryFile",
                        "in": "body",
                        "description": "The file that holds the query definition to count",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/QueryFile"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "returnDefinition",
                        "in": "query",
                        "description": "Whether to include the query's definition in the results.  Default is false.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The count result for the given query file",
                        "schema": {
                            "$ref": "#/definitions/QueryResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or specified query couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Queries/{systemName}/GetFileSync": {
            "post": {
                "tags": [
                    "Queries"
                ],
                "summary": "Get the query definition in the specified file",
                "description": "Requires licence flags [AdvancedQuery]",
                "operationId": "Queries_PerformGetQueryFileDefinitionSynchronously",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "queryFile",
                        "in": "body",
                        "description": "The file that holds the query definition",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/QueryFile"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The definition in the given query file",
                        "schema": {
                            "$ref": "#/definitions/QueryResult"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or specified query couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Queries/{systemName}/SaveFileSync": {
            "post": {
                "tags": [
                    "Queries"
                ],
                "summary": "Get the query definition in the specified file",
                "description": "Requires licence flags [AdvancedQuery]",
                "operationId": "Queries_PerformSaveQueryFileDefinitionSynchronously",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "path",
                        "description": "The name of the FastStats system to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "saveQueryFile",
                        "in": "body",
                        "description": "The file that holds the query definition",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SaveQueryFile"
                        }
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the analysis service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or specified query couldn't be found"
                    },
                    "200": {
                        "description": "The definition in the given query file"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Sessions/LoginParameters": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Creates a new set of parameters to use when creating a new session via the salted login method.",
                "operationId": "Sessions_CreateLoginParameters",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "userName",
                        "in": "formData",
                        "description": "The name of the user to create the session for",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the login salt has been created successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateSessionParameters"
                        }
                    },
                    "400": {
                        "description": "The DataView name or username are not valid"
                    },
                    "404": {
                        "description": "The DataView or username aren't recognised"
                    }
                }
            }
        },
        "/{dataViewName}/Sessions/SaltedLogin": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Creates a session to use for other API requests",
                "operationId": "Sessions_CreateSessionSalted",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Username",
                        "in": "formData",
                        "description": "The username of the user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "LoginSalt",
                        "in": "formData",
                        "description": "The salt to use when loging in",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "PasswordHash",
                        "in": "formData",
                        "description": "The password hash for the user.  Depending on the settings for the user this will be generated in a complicated way",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ClientType",
                        "in": "formData",
                        "description": "If specified, the type of client creating the session.  Otherwise a default value will be used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session created",
                        "schema": {
                            "$ref": "#/definitions/SessionDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Bad login credentials"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/Sessions/SimpleLogin": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Creates a session to use for other API requests",
                "operationId": "Sessions_CreateSessionSimple",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "UserLogin",
                        "in": "formData",
                        "description": "The piece of information used to identify the user.  This always be a username, and\r\nif the option has been configured an email address can also be used.  Note that a\r\nuser can only successfully log on with their email address if no other user has\r\nthe same email address registered in the system.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Password",
                        "in": "formData",
                        "description": "The password for the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "ClientType",
                        "in": "formData",
                        "description": "If specified, the type of client creating the session.  Otherwise a default value will be used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session created",
                        "schema": {
                            "$ref": "#/definitions/SessionDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Bad login credentials"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/Sessions/TokenLogin": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Creates a session to use for other API requests given a JWT login token from the Apteco Login Service.\r\nThe API must have the appriopriate JWT issuer, audience and signing key specified to be able to validate the token.",
                "operationId": "Sessions_CreateSessionFromLoginToken",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "loginDetails",
                        "in": "body",
                        "description": "The details used to create the session",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TokenLoginDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session created",
                        "schema": {
                            "$ref": "#/definitions/SessionDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Bad login credentials"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/Sessions/ConvertSession": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Creates an API session token from a traditional FastStats session id",
                "operationId": "Sessions_ConvertSessionToAccessToken",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "SessionId",
                        "in": "formData",
                        "description": "An existing valid session id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session created",
                        "schema": {
                            "$ref": "#/definitions/SessionDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Bad login credentials"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/Sessions": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Requires OrbitAdmin: Gets some simple user details for all currently valid sessions.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Sessions_GetSessionDetailsList",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all currently valid sessions",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[SessionAndUserDetails]"
                        }
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Sessions/{sessionId}": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Gets some simple user details for the given session id",
                "operationId": "Sessions_GetSessionDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The session id to look up",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the session id is valid",
                        "schema": {
                            "$ref": "#/definitions/SessionAndUserDetails"
                        }
                    },
                    "400": {
                        "description": "The session id is not valid or the sessionId doesn't match the authenticated session"
                    },
                    "404": {
                        "description": "The DataView or the details associated with the given session id can't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Logs out the specified session",
                "operationId": "Sessions_LogoutSession",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The session id to log out from",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The session was successfully invalidated"
                    },
                    "400": {
                        "description": "The session id is not valid or the sessionId doesn't match the authenticated session"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Settings/DataView": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Gets the complete DataView settings object",
                "operationId": "Settings_GetDataViewSettingsRoot",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of the DataView settings",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the DataView settings"
                    },
                    "404": {
                        "description": "The DataView settings couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Updates the complete DataView settings",
                "operationId": "Settings_UpdateDataViewSettingsRoot",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "settings",
                        "in": "body",
                        "description": "The contents of the DataView settings",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Details of the created DataView settings",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given DataView settings"
                    },
                    "404": {
                        "description": "The DataView settings couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Settings"
                ],
                "summary": "Deletes the complete DataView settings",
                "operationId": "Settings_DeleteDataViewSettingsRoot",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete the contents of the given DataView settings"
                    },
                    "404": {
                        "description": "The DataView settings couldn't be found"
                    },
                    "200": {
                        "description": "The DataView settings were deleted"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Settings/DataView/{settingsPath}": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Gets DataView settings at the given path",
                "operationId": "Settings_GetDataViewSettings",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "settingsPath",
                        "in": "path",
                        "description": "The path of the settings",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of the DataView settings",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the DataView settings"
                    },
                    "404": {
                        "description": "The DataView settings couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Updates DataView settings at the given path",
                "operationId": "Settings_UpdateDataViewSettings",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "settingsPath",
                        "in": "path",
                        "description": "The path of the DataView settings",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    },
                    {
                        "name": "settings",
                        "in": "body",
                        "description": "The contents of the DataView settings",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Details of the created DataView settings",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given DataView settings"
                    },
                    "404": {
                        "description": "The DataView settings couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Settings"
                ],
                "summary": "Deletes DataView settings at the given path",
                "operationId": "Settings_DeleteDataViewSettings",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "settingsPath",
                        "in": "path",
                        "description": "The path of the DataView settings",
                        "required": true,
                        "type": "string",
                        "format": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete the contents of the given DataView settings"
                    },
                    "404": {
                        "description": "The DataView settings couldn't be found"
                    },
                    "200": {
                        "description": "The DataView settings were deleted"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Requires OrbitAdmin: Gets summary information about each share in the DataView.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Shares_GetShares",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are ShareableId, ShareableType, NumberOfUsersSharedWith.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are ShareableId, ShareableType, NumberOfUsersSharedWith.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all shares",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ShareSummary]"
                        }
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Shares"
                ],
                "summary": "Creates a new share from the given details, sharing from the logged in user.",
                "operationId": "Shares_CreateShare",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareDetail",
                        "in": "body",
                        "description": "The details of the shareable item (collection, audience, etc) to share and who to share it with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateShareDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The shareable was shared successfully",
                        "schema": {
                            "$ref": "#/definitions/ShareDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares/{shareId}": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Returns the details of a particular share",
                "operationId": "Shares_GetShare",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The share details",
                        "schema": {
                            "$ref": "#/definitions/ShareDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this share"
                    },
                    "404": {
                        "description": "The DataView or share couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Shares"
                ],
                "summary": "Deletes the specified share",
                "operationId": "Shares_DeleteShare",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The share was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this share.  Only owners of the shared item or admins can delete shares"
                    },
                    "404": {
                        "description": "The DataView or share couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares/{shareId}/Users": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Returns the list of users that are associated with a particular share",
                "operationId": "Shares_GetShareUsers",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share to view the users for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, EmailAddress.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The current list of users that the shareable item is shared with",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserDisplayDetails]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this share"
                    },
                    "404": {
                        "description": "The DataView or share couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares/{shareId}/Groups": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Returns the list of groups that are associated with a particular share",
                "operationId": "Shares_GetShareGroups",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share to view the groups for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The current list of groups that the shareable item is shared with",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[GroupDetail]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this share"
                    },
                    "404": {
                        "description": "The DataView or share couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares/{shareId}/Updates": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Returns the updates that are associated with a particular share",
                "operationId": "Shares_GetShareUpdates",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Timestamp, Notes.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Timestamp, Notes.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all updates that have happened to the share",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ShareUpdate]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this share"
                    },
                    "404": {
                        "description": "The DataView or share couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Shares"
                ],
                "summary": "Creates a new share update from the given details, sharing from the logged in user.",
                "operationId": "Shares_CreateShareUpdate",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share to update",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "shareUpdate",
                        "in": "body",
                        "description": "The details of the share update, including who to add and remove from the share and notification settings",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateShareUpdate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The share was updated successfully",
                        "schema": {
                            "$ref": "#/definitions/CreatedShareUpdateDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares/{shareId}/Updates/{shareUpdateId}": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Returns a specific update that is associated with a particular share",
                "operationId": "Shares_GetShareUpdate",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share the update is associated with",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "shareUpdateId",
                        "in": "path",
                        "description": "The id of the share update to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The specified update that are associated with the particular share",
                        "schema": {
                            "$ref": "#/definitions/ShareUpdate"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this share"
                    },
                    "404": {
                        "description": "The DataView, share or the update couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares/{shareId}/Updates/{shareUpdateId}/AddedUsers": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Returns the list of the users added to a share as part of a specific update",
                "operationId": "Shares_GetShareUpdateAddedUsers",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share the update is associated with",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "shareUpdateId",
                        "in": "path",
                        "description": "The id of the share update to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Firstname, Surname.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of the users added to a share as part of a specific update",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserDisplayDetails]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this share"
                    },
                    "404": {
                        "description": "The DataView, share or the update couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Shares/{shareId}/Updates/{shareUpdateId}/RemovedUsers": {
            "get": {
                "tags": [
                    "Shares"
                ],
                "summary": "Returns the list of the users removed from a share as part of a specific update",
                "operationId": "Shares_GetShareUpdateRemovedUsers",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "shareId",
                        "in": "path",
                        "description": "The id of the share the update is associated with",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "shareUpdateId",
                        "in": "path",
                        "description": "The id of the share update to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Firstname, Surname.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Firstname, Surname.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of the users removed from a share for a specific update",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserDisplayDetails]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this share"
                    },
                    "404": {
                        "description": "The DataView, share or the update couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/StaticResources": {
            "get": {
                "tags": [
                    "StaticResources"
                ],
                "summary": "Requires OrbitAdmin: Returns a list of categories of resource files for the given system",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "StaticResources_GetStaticResourceCategories",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "systemName",
                        "in": "query",
                        "description": "The name of the system to list resource categories for",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Description.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Description.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of resource categories",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ResourceCategorySummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The system couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/StaticResources/{resourceCategory}": {
            "get": {
                "tags": [
                    "StaticResources"
                ],
                "summary": "Requires OrbitAdmin: Returns details of a resource category for a given category name and system",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "StaticResources_GetStaticResourceCategory",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to list resources",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceCategory",
                        "in": "path",
                        "description": "The category to return the details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the resource category",
                        "schema": {
                            "$ref": "#/definitions/ResourceCategoryDetails"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or category couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/StaticResources/{resourceCategory}/Resources": {
            "get": {
                "tags": [
                    "StaticResources"
                ],
                "summary": "Returns a list of details for the resource files (such as image files) in the given resource category and system",
                "operationId": "StaticResources_GetStaticResourcesForCategory",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to list resources",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceCategory",
                        "in": "path",
                        "description": "The category to return resources for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name, Size, LastModified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name, Size, LastModified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of resource files",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ResourceSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView or category couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "StaticResources"
                ],
                "summary": "Uploads a resource file (such as an image file) for the given category and system",
                "operationId": "StaticResources_PostStaticResourceFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to find the resource for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceCategory",
                        "in": "path",
                        "description": "The category of the resource to return",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "The file to upload",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The resource file"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView, category or resource couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceName}/Details": {
            "get": {
                "tags": [
                    "StaticResources"
                ],
                "summary": "Requires OrbitAdmin: Returns the details of a resource file (such as an image file) for the given category and system",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "StaticResources_GetStaticResourceFileDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to find the resource for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceCategory",
                        "in": "path",
                        "description": "The category of the resource to return",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceName",
                        "in": "path",
                        "description": "The name of the resource to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of a resource file",
                        "schema": {
                            "$ref": "#/definitions/ResourceDetails"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView, category or resource couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}/{resourceName}": {
            "get": {
                "tags": [
                    "StaticResources"
                ],
                "summary": "Returns a resource file (such as an image file) for the given category and system",
                "operationId": "StaticResources_GetStaticResourceFile",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to find the resource for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceCategory",
                        "in": "path",
                        "description": "The category of the resource to return",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "The id of the resource to return",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceName",
                        "in": "path",
                        "description": "The name of the resource to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The resource file"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView, category or resource couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/StaticResources/{resourceCategory}/Resources/{resourceId}": {
            "delete": {
                "tags": [
                    "StaticResources"
                ],
                "summary": "Returns a resource file (such as an image file) for the given category and system",
                "operationId": "StaticResources_DeleteStaticResourceFile",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to delete the resource for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceCategory",
                        "in": "path",
                        "description": "The category of the resource to delete",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resourceId",
                        "in": "path",
                        "description": "The resourceId of the resource to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The resource file"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView, category or resource couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Teams": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Returns all teams in the DataView.",
                "operationId": "Teams_GetTeams",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "query",
                        "description": "If specified, whether to limit to only teams attached to the system name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all teams",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[TeamSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Requires OrbitAdmin: Creates a new team.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Teams_CreateTeam",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "query",
                        "description": "The system name for the team to be associated with.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "teamDetails",
                        "in": "body",
                        "description": "The details for the team to create.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateTeamDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The team was created successfully",
                        "schema": {
                            "$ref": "#/definitions/TeamSummary"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    },
                    "403": {
                        "description": "The given session is not allowed to create a team.  Only admins can create teams"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Teams/{teamId}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Requires OrbitAdmin: Returns the detail for a team.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Teams_GetTeam",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "The id of the team",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The team detail",
                        "schema": {
                            "$ref": "#/definitions/TeamDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView or team couldn't be found"
                    },
                    "403": {
                        "description": "The given session is not allowed to get details for a team.  Only admins can get the details of teams"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Teams"
                ],
                "summary": "Requires OrbitAdmin: Modify the specified team",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Teams_ModifyTeam",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "The id of the team",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "teamDetails",
                        "in": "body",
                        "description": "The team to modify",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateTeamDetails"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The team was modified successfully",
                        "schema": {
                            "$ref": "#/definitions/TeamSummary"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to modify this team.  Only admins can modify teams"
                    },
                    "404": {
                        "description": "The DataView or team couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Requires OrbitAdmin: Deletes the specified team",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Teams_DeleteTeam",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "The id of the team to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The team was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this user.  Only admins can delete teams"
                    },
                    "404": {
                        "description": "The DataView or team couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Telemetry/States": {
            "post": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Creates a new telemetry state from the given details",
                "operationId": "Telemetry_CreateTelemetryState",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createTelemetryStateDetails",
                        "in": "body",
                        "description": "The details of the telemetry state to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateTelemetryStateDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The telemetry state was created successfully",
                        "schema": {
                            "$ref": "#/definitions/TelemetryState"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The session is not allowed to create this telemetry state"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Telemetry/States/{stateId}": {
            "get": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Returns the details of a particular telemetry state",
                "operationId": "Telemetry_GetTelemetryState",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The id of the telemetry state to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The telemetry state",
                        "schema": {
                            "$ref": "#/definitions/TelemetryState"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see this telemetry state"
                    },
                    "404": {
                        "description": "The DataView or telemetry state couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Telemetry/States/ForUser/{username}": {
            "get": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Returns the details of a given user's telemetry state",
                "operationId": "Telemetry_GetTelemetryStateForUser",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username of the telemetry state to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The telemetry state",
                        "schema": {
                            "$ref": "#/definitions/TelemetryState"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session or user is not allowed to see this telemetry state"
                    },
                    "404": {
                        "description": "The DataView or telemetry state couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Telemetry/States/{stateId}/Update": {
            "post": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Updates a particular telemetry state from the given details",
                "operationId": "Telemetry_UpdateTelemetryState",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The id of the telemetry state to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updateTelemetryStateDetails",
                        "in": "body",
                        "description": "The details of the telemetry state to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateTelemetryStateDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The telemetry state was updated successfully",
                        "schema": {
                            "$ref": "#/definitions/TelemetryState"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to update this telemetry state"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}": {
            "get": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Returns the details of a particular telemetry session",
                "operationId": "Telemetry_GetTelemetrySession",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The id of the telemetry state the session belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The id of the telemetry session",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The telemetry session",
                        "schema": {
                            "$ref": "#/definitions/TelemetrySession"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see this telemetry session"
                    },
                    "404": {
                        "description": "The DataView or telemetry session couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Creates a new telemetry session from the given details",
                "operationId": "Telemetry_CreateTelemetrySession",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The id of the telemetry state the session belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The id of the telemetry session",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createTelemetrySessionDetails",
                        "in": "body",
                        "description": "The details of the telemetry session to create",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateTelemetrySessionDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The telemetry session was created successfully",
                        "schema": {
                            "$ref": "#/definitions/TelemetrySession"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to create this telemetry session"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Telemetry/States/{stateId}/Sessions/{sessionId}/Update": {
            "post": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Update a particular telemetry session from the given details",
                "operationId": "Telemetry_UpdateTelemetrySession",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "The id of the telemetry state the session belongs to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sessionId",
                        "in": "path",
                        "description": "The id of the telemetry session",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updateTelemetrySessionDetails",
                        "in": "body",
                        "description": "The details of the telemetry session to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateTelemetrySessionDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The telemetry session was updated successfully",
                        "schema": {
                            "$ref": "#/definitions/TelemetrySession"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to update this telemetry session"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/TemporaryFiles/{id}": {
            "get": {
                "tags": [
                    "TemporaryFiles"
                ],
                "summary": "Returns the contents of a temporary file with the given id",
                "operationId": "TemporaryFiles_GetTemporaryFile",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the temporary file to return the contents for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of the temporary file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given temporary file"
                    },
                    "404": {
                        "description": "The system name or specified temporary file couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "TemporaryFiles"
                ],
                "summary": "Creates or updates a temporary file with the given id",
                "operationId": "TemporaryFiles_UpsertTemporaryFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id for the temporary file to create or update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "The file to upload.",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Details of the created file",
                        "schema": {
                            "$ref": "#/definitions/TemporaryFile"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to modify the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/TemporaryFiles/{id}/{partNumber}": {
            "get": {
                "tags": [
                    "TemporaryFiles"
                ],
                "summary": "Returns the contents of a temporary file part with the given id and part number",
                "operationId": "TemporaryFiles_GetTemporaryFilePart",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/octet-stream"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the temporary file",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "partNumber",
                        "in": "path",
                        "description": "The number of the temporary file part to return the contents for",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The contents of the temporary file part",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the contents of the given temporary file part"
                    },
                    "404": {
                        "description": "The system name, specified temporary file or part couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "TemporaryFiles"
                ],
                "summary": "Creates or updates part of a temporary file with the given id and part number",
                "operationId": "TemporaryFiles_UpsertTemporaryFilePart",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id for the temporary file",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "partNumber",
                        "in": "path",
                        "description": "The number of the temporary file part to create or update.  This is zero-based",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "The file to upload.",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "finalPart",
                        "in": "query",
                        "description": "Whether this part is the final part and the full temporary file should be assembled.  If this is not specified it defaults to false.  If this is set to true all parts from 0 up to this partIndex must already exist",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Details of the created file part or, if the final part was specified",
                        "schema": {
                            "$ref": "#/definitions/TemporaryFilePart"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to modify the contents of the given file"
                    },
                    "404": {
                        "description": "The system name or part couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Themes": {
            "get": {
                "tags": [
                    "Themes"
                ],
                "summary": "Returns a list of all themes for this dataview",
                "operationId": "Themes_GetThemes",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved themes",
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Theme"
                            }
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found or no themes found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Themes"
                ],
                "summary": "Requires OrbitAdmin: Creates a new theme from the given details for the logged in user.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Themes_CreateTheme",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "themeDetail",
                        "in": "body",
                        "description": "The details for the theme to create.  If you want\r\n            to update a specific theme then POST to the /Theme/{themeId} URL",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateUpdateTheme"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The theme was created successfully",
                        "schema": {
                            "$ref": "#/definitions/Theme"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Themes/{themeId}": {
            "get": {
                "tags": [
                    "Themes"
                ],
                "summary": "Returns a theme for this dataview",
                "operationId": "Themes_GetTheme",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "The themeId of the Theme to retrieve",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved theme",
                        "schema": {
                            "$ref": "#/definitions/Theme"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found or no theme found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Themes"
                ],
                "summary": "Requires OrbitAdmin: Deletes the specified theme",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Themes_DeleteTheme",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "The id of the theme to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The theme was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this theme. Only admins can delete custom themes"
                    },
                    "404": {
                        "description": "The DataView or theme couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Themes/{themeId}/Updates": {
            "post": {
                "tags": [
                    "Themes"
                ],
                "summary": "Requires OrbitAdmin: Updates the details of a particular theme.  If you don't have an id for the\r\ntheme then POST to the /Themes URL to create a new theme.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Themes_UpdateTheme",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "themeId",
                        "in": "path",
                        "description": "The id of the theme to add/update",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "themeDetail",
                        "in": "body",
                        "description": "The details for the theme to update",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateUpdateTheme"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The theme details were added/updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Theme"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to update the details for this theme.  Only admins can modify themes"
                    },
                    "404": {
                        "description": "The DataView or theme couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Themes/Usage": {
            "get": {
                "tags": [
                    "Themes"
                ],
                "summary": "Requires OrbitAdmin: Returns a list of all themes with associated usage information",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Themes_GetUsage",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved themes usage",
                        "schema": {
                            "$ref": "#/definitions/ThemeUsage"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found or no themes found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/UserRegistrationRequests": {
            "get": {
                "tags": [
                    "UserRegistrationRequests"
                ],
                "summary": "Requires OrbitAdmin: Returns all the current user regisration requests in the system.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "UserRegistrationRequests_GetRegistrationRequests",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, Firstname, Surname, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all user registration requests",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserRegistrationRequestSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "UserRegistrationRequests"
                ],
                "summary": "Creates a new user registration requests, which will check the sign-up details and then issue a confirmation notification",
                "operationId": "UserRegistrationRequests_CreateRegistrationRequest",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createUserRegistrationRequest",
                        "in": "body",
                        "description": "The details needed to create the registration request",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateUserRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created request details",
                        "schema": {
                            "$ref": "#/definitions/UserRegistrationRequestDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request or registering new users is not allowed in this system"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/UserRegistrationRequests/{token}": {
            "get": {
                "tags": [
                    "UserRegistrationRequests"
                ],
                "summary": "Requires OrbitAdmin: Returns details for a given user registration request",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "UserRegistrationRequests_GetRegistrationRequest",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token of the request",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the given user registration request",
                        "schema": {
                            "$ref": "#/definitions/UserRegistrationRequestDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView or registration request couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "UserRegistrationRequests"
                ],
                "summary": "Confirms a given user registration request and creates the user",
                "operationId": "UserRegistrationRequests_ConfirmRegistrationRequest",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token of the request",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The details of the created user",
                        "schema": {
                            "$ref": "#/definitions/UserSummary"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView or registration request couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/UserResetPasswordRequests": {
            "get": {
                "tags": [
                    "UserResetPasswordRequests"
                ],
                "summary": "Requires OrbitAdmin: Returns all the current reset password requests in the system.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "UserResetPasswordRequests_GetResetPasswordRequests",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, EmailAddress, CreationDate, ConfirmedDate, ExpiredDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of allreset password requests",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserRegistrationRequestSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "UserResetPasswordRequests"
                ],
                "summary": "Creates a new reset password requests, which will check that the provided email address exists and then issue a confirmation notification",
                "operationId": "UserResetPasswordRequests_CreateResetPasswordRequest",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createResetPasswordRequest",
                        "in": "body",
                        "description": "The details needed to create the reset password request",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created request details",
                        "schema": {
                            "$ref": "#/definitions/ResetPasswordRequestDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request or resetting passwords is not allowed in this system"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/UserResetPasswordRequests/{token}": {
            "get": {
                "tags": [
                    "UserResetPasswordRequests"
                ],
                "summary": "Requires OrbitAdmin: Returns details for a given reset password request",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "UserResetPasswordRequests_GetResetPasswordRequest",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token of the request",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the given reset password request",
                        "schema": {
                            "$ref": "#/definitions/ResetPasswordRequestDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user isn't an admin user"
                    },
                    "404": {
                        "description": "The DataView or reset password request couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "UserResetPasswordRequests"
                ],
                "summary": "Confirms a given reset password request and changes the password",
                "operationId": "UserResetPasswordRequests_ConfirmResetPasswordRequest",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token of the request",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "confirmResetPasswordRequest",
                        "in": "body",
                        "description": "The details needed to confirm the reset password request",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ConfirmResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The user's password has been successfully reset"
                    },
                    "400": {
                        "description": "Bad request, or the email address provided doesn't match the one used to create the token"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/Users/Configuration": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets the user configuration",
                "operationId": "Users_GetUserConfiguration",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The valid configuration information",
                        "schema": {
                            "$ref": "#/definitions/UserConfigurationDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                }
            }
        },
        "/{dataViewName}/Users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns all users in the system.",
                "operationId": "Users_GetUserDetailsList",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "query",
                        "description": "If specified, whether to limit to only users attached to the system name",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeDisabled",
                        "in": "query",
                        "description": "If specified, whether to include disabled users, not disabled users or both.  Defaults to not disabled only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDisabled",
                            "OnlyDisabled",
                            "All"
                        ]
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, EmailAddress, Firstname, Surname, UserDisabledDate.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of all users",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserSummary]"
                        }
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Requires OrbitAdmin: Creates a new user.",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Users_CreateUser",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "query",
                        "description": "The system name for the user to be associated with.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "createUserDetails",
                        "in": "body",
                        "description": "The details for the user to create.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateUserDetails"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The user was created successfully",
                        "schema": {
                            "$ref": "#/definitions/UserSummary"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    },
                    "403": {
                        "description": "The given session is not allowed to create a user.  Only admins can create users"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns details for the given username",
                "operationId": "Users_GetUserDetails",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to view the details for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user's details",
                        "schema": {
                            "$ref": "#/definitions/UserDetail"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user doesn't match the authenticated session or isn't an admin"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates user details for the given username",
                "operationId": "Users_UpdateUserDetails",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username of the user to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updateUserDetails",
                        "in": "body",
                        "description": "The details to update the user with",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user's details have been successfully updated",
                        "schema": {
                            "$ref": "#/definitions/UserSummary"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user doesn't match the authenticated session or isn't an admin"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Requires OrbitAdmin: Deletes the specified user",
                "description": "This endpoint is only available for users with the OrbitAdmin role",
                "operationId": "Users_DeleteUser",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username of the user to delete",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "systemName",
                        "in": "query",
                        "description": "If specified, whether to delete the user from this system only",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The user was deleted successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to delete this user.  Only admins can delete users"
                    },
                    "404": {
                        "description": "The DataView or user couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/ChangePassword": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Change the password for the user with the given username",
                "operationId": "Users_ChangeUserPassword",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username of the user to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "changePasswordDetails",
                        "in": "body",
                        "description": "The user's current and new password",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ChangePasswordDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user's password has been successfully updated"
                    },
                    "400": {
                        "description": "Bad request or supplied old password doesn't match user's current password"
                    },
                    "403": {
                        "description": "The user doesn't match the authenticated session or isn't an admin"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/LoginHistory": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a list of users last login history",
                "operationId": "Users_GetPreviousLoginHistory",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The user to get login history for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Username, ClientType, SystemName, Timestamp.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Username, ClientType, SystemName, Timestamp.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the username is valid",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserLogin]"
                        }
                    },
                    "400": {
                        "description": "The username is not valid or the user id doesn't match the authenticated session"
                    },
                    "404": {
                        "description": "The DataView or the details associated with the given session id can't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Collections": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns the list of collections associated with the given user",
                "operationId": "Users_GetUserCollections",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to view the collections for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeDeleted",
                        "in": "query",
                        "description": "If specified, whether to include deleted collections, not deleted collections or both.  Defaults to not deleted only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDeleted",
                            "OnlyDeleted",
                            "All"
                        ]
                    },
                    {
                        "name": "applyPinnedSort",
                        "in": "query",
                        "description": "If specified, whether to ensure that pinned collections are returned first in the list.  Defaults to true",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, Title, Description, CreationDate, OwnerUsername, Status, DeletionDate, SharedToMe, SharedByMe.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of the user's collections (both owned or shared with)",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserCollectionSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user doesn't match the authenticated session or isn't an admin"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Collections/Modify": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates one or more collections",
                "operationId": "Users_ModifyUserCollections",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to update the collections for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updates",
                        "in": "body",
                        "description": "The details of the collections to update.  Any value omitted for a collection will be left unchanged",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ModifyItems[ModifyUserCollection]"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the updated collections",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ModifyUserCollectionDetailResults]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for the specified collections"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Collections/{collectionId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns the details of a particular collection",
                "operationId": "Users_GetUserCollection",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to get the collection for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "collectionId",
                        "in": "path",
                        "description": "The id of the collection to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The collection details",
                        "schema": {
                            "$ref": "#/definitions/UserCollectionDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this collection"
                    },
                    "404": {
                        "description": "The collection, username or DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Audiences": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns the list of audiences associated with the given user",
                "operationId": "Users_GetUserAudiences",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to view the audiences for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeDeleted",
                        "in": "query",
                        "description": "If specified, whether to include deleted audiences, not deleted audiences or both.  Defaults to not deleted only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDeleted",
                            "OnlyDeleted",
                            "All"
                        ]
                    },
                    {
                        "name": "applyPinnedSort",
                        "in": "query",
                        "description": "If specified, whether to ensure that pinned audiences are returned first in the list.  Defaults to true",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, ResolveTableName, BriefText, Status, SharedToMe, SharedByMe, LastUpdatedUsername, LastUpdatedOn.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of the user's audiences (both owned or shared with)",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserAudienceSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user doesn't match the authenticated session or isn't an admin"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Audiences/Modify": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates one or more audiences",
                "description": "Requires licence flags [AudienceSelection]",
                "operationId": "Users_ModifyUserAudiences",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to update the audiences for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updates",
                        "in": "body",
                        "description": "The details of the audiences to update.  Any value omitted for a audience will be left unchanged",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ModifyItems[ModifyUserAudience]"
                        }
                    },
                    {
                        "name": "includeQueries",
                        "in": "query",
                        "description": "If specified, whether to include the query definitions for any returned audiences or not.  Defaults to true - to return query definitions",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "includeBrief",
                        "in": "query",
                        "description": "If specified, whether to include the brief for any returned audiences or not.  Defaults to true - to return briefs",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the updated audiences",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ModifyUserAudienceDetailResults]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for the specified audiences"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Audiences/{audienceId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns the details of a particular audience",
                "operationId": "Users_GetUserAudience",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to get the audience for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "The id of the audience to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "includeQueries",
                        "in": "query",
                        "description": "If specified, whether to include the query definitions for this audience or not.  Defaults to true - to return query definitions",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "includeBrief",
                        "in": "query",
                        "description": "If specified, whether to include the brief for this audience or not.  Defaults to true - to return the brief",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The audience details",
                        "schema": {
                            "$ref": "#/definitions/UserAudienceDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this audience"
                    },
                    "404": {
                        "description": "The audience, username or DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Dashboards/{dashboardId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a dashboard in the DataView.",
                "operationId": "Users_GetUserDashboard",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to get the dashboard for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "dashboardId",
                        "in": "path",
                        "description": "The Id for the dashboard",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The dashboard",
                        "schema": {
                            "$ref": "#/definitions/UserDashboardDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Dashboards": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Gets a dashboard in the DataView.",
                "operationId": "Users_GetUserDashboards",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to get the dashboard for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeDeleted",
                        "in": "query",
                        "description": "If specified, whether to include deleted dashboards, not deleted dashboards or both.  Defaults to not deleted only",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "OnlyNotDeleted",
                            "OnlyDeleted",
                            "All"
                        ]
                    },
                    {
                        "name": "applyPinnedSort",
                        "in": "query",
                        "description": "If specified, whether to ensure that pinned dashboards are returned first in the list.  Defaults to true",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, SystemName, Title, Description, OwnerUsername, CreatedOn, DeletedOn, Status, SharedToMe, SharedByMe, LastUpdatedBy, LastUpdatedOn.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The dashboard",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserDashboardSummary]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/Dashboards/Modify": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates one or more dashboards",
                "description": "Might require licence flags [Dashboards]",
                "operationId": "Users_ModifyUserDashboards",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/xml",
                    "text/xml",
                    "application/*+xml"
                ],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to update the dashboards for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updates",
                        "in": "body",
                        "description": "The details of the dashboards to update.  Any value omitted for a dashboard will be left unchanged",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ModifyItems[ModifyUserDashboard]"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Summaries of the updated dashboards",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[ModifyUserDashboardDetailResults]"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for the specified dashboards"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/AudienceCompositions": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns the list of audience compositions associated with the given user",
                "operationId": "Users_GetUserAudienceCompositions",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to view the audience compositions for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter the list of items using a simple expression language.  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Order the items by a given field (in ascending order unless the field is preceeded by a \"-\" character).  The available list of fields are Id, Description, Type, OwnerUsername, SharedToMe, SharedByMe.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of items to skip in the (potentially filtered) result set before returning subsequent items.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The maximum number of items to show from the (potentially filtered) result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0.0
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of the user's audience compositions (both owned or shared with)",
                        "schema": {
                            "$ref": "#/definitions/PagedResults[UserAudienceCompositionSummary]"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "The user doesn't match the authenticated session or isn't an admin"
                    },
                    "404": {
                        "description": "The DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Users/{username}/AudienceCompositions/{compositionId}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns the details of a particular composition",
                "operationId": "Users_GetUserAudienceComposition",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The username to get the composition for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "compositionId",
                        "in": "path",
                        "description": "The id of the composition to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The composition details",
                        "schema": {
                            "$ref": "#/definitions/UserAudienceCompositionDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this composition"
                    },
                    "404": {
                        "description": "The composition, username or DataView couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Visualisations/{visualisationId}": {
            "get": {
                "tags": [
                    "Visualisations"
                ],
                "summary": "Returns the details of a particular visualisation",
                "operationId": "Visualisations_GetVisualisation",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "visualisationId",
                        "in": "path",
                        "description": "The id of the visualisation to view",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The visualisation details",
                        "schema": {
                            "$ref": "#/definitions/VisualisationDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this visualisation"
                    },
                    "404": {
                        "description": "The DataView or visualisation couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Visualisations/{visualisationId}/RenderData": {
            "get": {
                "tags": [
                    "Visualisations"
                ],
                "summary": "Returns the render data for a particular visualisation",
                "operationId": "Visualisations_GetVisualisationRenderData",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "visualisationId",
                        "in": "path",
                        "description": "The id of the visualisation to generate the render data for",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The visualisation render data",
                        "schema": {
                            "$ref": "#/definitions/AbstractRenderSpec"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this visualisation"
                    },
                    "404": {
                        "description": "The DataView or visualisation couldn't be found or the visualisation hasn't been rendered yet"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Visualisations/{visualisationId}/RenderData/RefreshJobs": {
            "post": {
                "tags": [
                    "Visualisations"
                ],
                "summary": "Creates a job to refresh the render data for a particular visualisation",
                "operationId": "Visualisations_CreateVisualisationRenderDataRefreshJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "visualisationId",
                        "in": "path",
                        "description": "The id of the visualisation that the job is to refresh",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The refresh job was created successfully",
                        "schema": {
                            "$ref": "#/definitions/RenderDataRefreshJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this visualisation"
                    },
                    "404": {
                        "description": "The DataView or visualisation couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Visualisations/{visualisationId}/RenderData/RefreshJobs/{refreshRequestId}": {
            "get": {
                "tags": [
                    "Visualisations"
                ],
                "summary": "Returns the details of a job to refresh the render data for a particular visualisation",
                "operationId": "Visualisations_GetVisualisationRenderDataRefreshJob",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "visualisationId",
                        "in": "path",
                        "description": "The id of the visualisation that the job is refreshing",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "refreshRequestId",
                        "in": "path",
                        "description": "The id of the refresh job to view",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The refresh job details",
                        "schema": {
                            "$ref": "#/definitions/RenderDataRefreshJobDetail"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this visualisation"
                    },
                    "404": {
                        "description": "The DataView, visualisation or refresh job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Visualisations"
                ],
                "summary": "Cancel a job refreshing the render data for a particular visualisation",
                "operationId": "Visualisations_CancelVisualisationRenderDataRefreshJob",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "visualisationId",
                        "in": "path",
                        "description": "The id of the visualisation that the job is refreshing",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "refreshRequestId",
                        "in": "path",
                        "description": "The id of the refresh job to cancel",
                        "required": true,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The refresh job was cancelled successfully"
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this visualisation"
                    },
                    "404": {
                        "description": "The DataView, visualisation or refresh job couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        },
        "/{dataViewName}/Visualisations/{visualisationId}/RenderData/RefreshSync": {
            "post": {
                "tags": [
                    "Visualisations"
                ],
                "summary": "Performs a synchronous refresh of the render data for a particular visualisation",
                "operationId": "Visualisations_PerformVisualisationRenderDataRefreshSynchronously",
                "consumes": [],
                "produces": [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "dataViewName",
                        "in": "path",
                        "description": "The name of the DataView to act on",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "visualisationId",
                        "in": "path",
                        "description": "The id of the visualisation to generate the render data for",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "timeoutInSeconds",
                        "in": "query",
                        "description": "The number of seconds before the request will time out.  Leave unspecified to use the default value given in the visualisation service's configuration",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The visualisation render data",
                        "schema": {
                            "$ref": "#/definitions/AbstractRenderSpec"
                        }
                    },
                    "400": {
                        "description": "A bad request"
                    },
                    "403": {
                        "description": "The given session is not allowed to see the details for this visualisation"
                    },
                    "404": {
                        "description": "The DataView or visualisation couldn't be found"
                    }
                },
                "security": [
                    {
                        "faststats_auth": []
                    }
                ]
            }
        }
    },
    "definitions": {
        "VersionDetails": {
            "description": "The version details for the API",
            "required": [
                "version"
            ],
            "type": "object",
            "properties": {
                "version": {
                    "description": "The version of the API",
                    "type": "string"
                }
            }
        },
        "LanguageDetails": {
            "description": "The language details for the API",
            "required": [
                "language"
            ],
            "type": "object",
            "properties": {
                "language": {
                    "description": "The language that the API is processing this request in.\r\nThis is in the format languagecode2-country/regioncode2\r\nlanguagecode2 is a lowercase two-letter code derived from ISO 639-1\r\ncountry/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag.\r\nFor example, en-GB.",
                    "type": "string"
                }
            }
        },
        "ProcessDetails": {
            "description": "Memory details for the API",
            "required": [
                "processId",
                "privateMemoryInBytes",
                "workingSetInBytes",
                "heapSizeInBytes",
                "isServerGarbageCollectionEnabled"
            ],
            "type": "object",
            "properties": {
                "processId": {
                    "format": "int32",
                    "description": "The process id of the API's process",
                    "type": "integer"
                },
                "privateMemoryInBytes": {
                    "format": "int64",
                    "description": "The amount of \"private memory\" used by the API's process, in bytes",
                    "type": "integer"
                },
                "workingSetInBytes": {
                    "format": "int64",
                    "description": "The amount of physical memory used by the API's process, in bytes",
                    "type": "integer"
                },
                "heapSizeInBytes": {
                    "format": "int64",
                    "description": "The amount of memory in the .Net heap used by the API's process, in bytes",
                    "type": "integer"
                },
                "isServerGarbageCollectionEnabled": {
                    "description": "Whether the \"Server\" garbage collection strategy is enabled or not",
                    "type": "boolean"
                }
            }
        },
        "PagedResults[DataViewSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataViewSummary"
                    }
                }
            }
        },
        "DataViewSummary": {
            "description": "Summary details of a DataView that can be connected to",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the DataView",
                    "type": "string"
                }
            }
        },
        "DataViewDetails": {
            "description": "Details of a DataView that can be connected to",
            "required": [
                "capabilities",
                "name"
            ],
            "type": "object",
            "properties": {
                "capabilities": {
                    "$ref": "#/definitions/Capabilities",
                    "description": "The set of capabilities available in this DataView"
                },
                "name": {
                    "description": "The name of the DataView",
                    "type": "string"
                }
            }
        },
        "Capabilities": {
            "description": "The set of capabilities supported by a DataView",
            "required": [
                "supportsAudiences",
                "supportsPermissions",
                "supportsDashboardsPareto"
            ],
            "type": "object",
            "properties": {
                "supportsAudiences": {
                    "description": "Whether the DataView in question can support audiences functionality",
                    "type": "boolean"
                },
                "supportsPermissions": {
                    "description": "Whether the DataView in question can support permissions functionality",
                    "type": "boolean"
                },
                "supportsDashboardsPareto": {
                    "description": "Whether the DataView in question can support Pareto tiles functionality in dashboards",
                    "type": "boolean"
                }
            }
        },
        "Message": {
            "description": "A general return message from the API",
            "required": [
                "text"
            ],
            "type": "object",
            "properties": {
                "text": {
                    "description": "The text of the message",
                    "type": "string"
                }
            }
        },
        "ErrorMessage": {
            "description": "Details of an error that has occurred in the API",
            "type": "object",
            "properties": {
                "code": {
                    "format": "int32",
                    "description": "If present a code number for this type of error",
                    "type": "integer"
                },
                "id": {
                    "format": "int32",
                    "description": "If present an id which can be looked up by an administrator on the server-side for more details",
                    "type": "integer"
                },
                "message": {
                    "description": "If present a message describing the error",
                    "type": "string"
                },
                "parameters": {
                    "description": "If present a list of parameters associated with this error",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorMessageParameter"
                    }
                }
            }
        },
        "ErrorMessageParameter": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "PagedResults[EndpointDetails]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EndpointDetails"
                    }
                }
            }
        },
        "EndpointDetails": {
            "description": "The details of a particular endpoint in the API",
            "required": [
                "name",
                "groupName",
                "method",
                "urlTemplate",
                "allowsAnonymousAccess",
                "isExperimental",
                "isUnderDevelopment",
                "requiresLicenceFlags",
                "optionallyRequiresLicenceFlags",
                "requiresRoles"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the endpoint",
                    "type": "string"
                },
                "groupName": {
                    "description": "The name of the group this endpoint belongs to",
                    "type": "string"
                },
                "method": {
                    "description": "The HTTP method used for calling this endpoint",
                    "type": "string"
                },
                "urlTemplate": {
                    "description": "The URL template of this endpoint",
                    "type": "string"
                },
                "allowsAnonymousAccess": {
                    "description": "Whether this endpoint can be accessed without authentication details",
                    "type": "boolean"
                },
                "isExperimental": {
                    "description": "Whether this endpoint has been marked as experimental",
                    "type": "boolean"
                },
                "isUnderDevelopment": {
                    "description": "Whether this endpoint has been marked as under development",
                    "type": "boolean"
                },
                "requiresLicenceFlags": {
                    "description": "The set of licence flags that the user must have in order to be able to call the endpoint",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "enum": [
                            "AudienceSelection",
                            "AudiencePreview",
                            "Export",
                            "AdvancedQuery",
                            "Cube",
                            "Profile",
                            "Dashboards"
                        ],
                        "type": "string"
                    }
                },
                "optionallyRequiresLicenceFlags": {
                    "description": "The set of licence flags that the user might need to have in order to be able to call the endpoint, depending on the type of request sent to the endpoint",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "enum": [
                            "AudienceSelection",
                            "AudiencePreview",
                            "Export",
                            "AdvancedQuery",
                            "Cube",
                            "Profile",
                            "Dashboards"
                        ],
                        "type": "string"
                    }
                },
                "requiresRoles": {
                    "description": "Any roles that the user must have to access this endpoint",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "PagedResults[CompositionSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompositionSummary"
                    }
                }
            }
        },
        "CompositionSummary": {
            "description": "Summary for an audience composition",
            "required": [
                "id",
                "description",
                "type",
                "systemName",
                "owner",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id of this composition",
                    "type": "integer"
                },
                "description": {
                    "description": "The description of this composition",
                    "type": "string"
                },
                "type": {
                    "description": "The type of this composition",
                    "enum": [
                        "Check",
                        "Export"
                    ],
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this composition is for",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this composition"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this composition has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this composition has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this composition, or null if the\r\ncomposition has not yet been shared",
                    "type": "integer"
                }
            }
        },
        "UserDisplayDetails": {
            "description": "Display details for a user",
            "required": [
                "id",
                "username",
                "firstname",
                "surname",
                "emailAddress"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The user's id",
                    "type": "integer"
                },
                "username": {
                    "description": "The user's username",
                    "type": "string"
                },
                "firstname": {
                    "description": "The user's first name",
                    "type": "string"
                },
                "surname": {
                    "description": "The user's surname",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The user's email address",
                    "type": "string"
                }
            }
        },
        "CreateAudienceCompositionDetail": {
            "description": "Details for creating a composition",
            "required": [
                "description",
                "type"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "description": "The description to use for the new composition",
                    "type": "string"
                },
                "type": {
                    "description": "The type of this composition",
                    "enum": [
                        "Check",
                        "Export"
                    ],
                    "type": "string"
                },
                "checkCompositionDefinition": {
                    "$ref": "#/definitions/CheckCompositionDefinition",
                    "description": "The definition to use if this is to create an audience check composition"
                },
                "exportCompositionDefinition": {
                    "$ref": "#/definitions/ExportCompositionDefinition",
                    "description": "The definition to use if this is to create an audience export composition"
                }
            }
        },
        "CheckCompositionDefinition": {
            "description": "Details for the definition of a composition for the audience check screen",
            "required": [
                "dashboardItems",
                "gridItems"
            ],
            "type": "object",
            "properties": {
                "dashboardItems": {
                    "description": "The set of dashboard items to show in this composition",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardItem"
                    }
                },
                "gridItems": {
                    "description": "The set of grid items to show in this composition",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GridItem"
                    }
                }
            }
        },
        "ExportCompositionDefinition": {
            "description": "Details for the definition of a composition for the audience export screen",
            "required": [
                "output",
                "gridItems"
            ],
            "type": "object",
            "properties": {
                "output": {
                    "$ref": "#/definitions/Output",
                    "description": "Information about the how the export file will be output"
                },
                "gridItems": {
                    "description": "The set of grid items to show in this composition",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GridItem"
                    }
                }
            }
        },
        "DashboardItem": {
            "description": "The definition of one item to show in a dashboard composition",
            "required": [
                "variableName",
                "size",
                "chartType",
                "omitZeros",
                "sortOrder",
                "description"
            ],
            "type": "object",
            "properties": {
                "variableName": {
                    "description": "The name of the FastStats variable to use to calculate this dashboard item",
                    "type": "string"
                },
                "size": {
                    "$ref": "#/definitions/Size",
                    "description": "The size of the dashboard item within this composition"
                },
                "chartType": {
                    "description": "The type of chart to use to display this dashboard item",
                    "enum": [
                        "Bar",
                        "Column",
                        "Pie",
                        "Donut",
                        "Line",
                        "UKPostArea",
                        "NLProvinces",
                        "NLMunicipalities",
                        "DE2DigitPostCode",
                        "CH2DigitPostCode",
                        "AU2DigitPostCode",
                        "USStates",
                        "NumberCard",
                        "Text",
                        "BandedPareto",
                        "CategoricalPareto",
                        "Area",
                        "ClusteredColumn",
                        "StackedColumn",
                        "Stacked100Column",
                        "RadarLine",
                        "RadarColumn",
                        "RadarArea",
                        "Funnel"
                    ],
                    "type": "string"
                },
                "omitZeros": {
                    "description": "Whether the chart should omit categories with zero counts",
                    "type": "boolean"
                },
                "sortOrder": {
                    "description": "Whether the chart should be sorted in it's natural order, by ascending or descending values",
                    "enum": [
                        "Natural",
                        "AscendingByValue",
                        "DescendingByValue"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "The description to use for this item",
                    "type": "string"
                }
            }
        },
        "GridItem": {
            "description": "The definition of one item to show in a grid composition",
            "required": [
                "variableName",
                "detail",
                "unclassifiedFormat",
                "description"
            ],
            "type": "object",
            "properties": {
                "variableName": {
                    "description": "The name of the FastStats variable to display data for in the grid",
                    "type": "string"
                },
                "detail": {
                    "description": "Whether to show codes or descriptions for this grid item",
                    "enum": [
                        "Code",
                        "Description"
                    ],
                    "type": "string"
                },
                "unclassifiedFormat": {
                    "description": "Whether to output unclassified as empty or taken from the design",
                    "enum": [
                        "FromDesign",
                        "Empty"
                    ],
                    "type": "string"
                },
                "description": {
                    "description": "The description to use for this item",
                    "type": "string"
                }
            }
        },
        "Output": {
            "description": "Information about the how an export is output to a file",
            "type": "object",
            "properties": {
                "format": {
                    "description": "The format of the file to generate",
                    "enum": [
                        "CSV",
                        "SDF",
                        "XLS",
                        "XLSX",
                        "MDB",
                        "DBF",
                        "URN",
                        "NATIVEDUMP"
                    ],
                    "type": "string"
                },
                "delimiter": {
                    "description": "The delimiter character to use when outputting a delimited file.  Specify one character only",
                    "type": "string"
                },
                "alphaEncloser": {
                    "description": "The alpha encloser character to use when outputting a delimited file.  Specify one character only",
                    "type": "string"
                },
                "numericEncloser": {
                    "description": "The delimiter character to use when outputting a delimited file.  Specify one character only",
                    "type": "string"
                },
                "authorisationCode": {
                    "description": "The velocity authorisation code string",
                    "type": "string"
                },
                "exportExtraName": {
                    "description": "The name of an \"Export Extras\" processing task, which can perform post-processing steps on a FastStats export",
                    "type": "string"
                }
            }
        },
        "Size": {
            "description": "Information on the size of an item",
            "required": [
                "width",
                "height"
            ],
            "type": "object",
            "properties": {
                "width": {
                    "format": "double",
                    "description": "The width of this position",
                    "type": "number"
                },
                "height": {
                    "format": "double",
                    "description": "The height of this position",
                    "type": "number"
                }
            }
        },
        "CompositionDetail": {
            "description": "Details for an audience composition",
            "required": [
                "id",
                "description",
                "type",
                "systemName",
                "owner",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "checkCompositionDefinition": {
                    "$ref": "#/definitions/CheckCompositionDefinition",
                    "description": "If this is a check composition, the definition of the composition"
                },
                "exportCompositionDefinition": {
                    "$ref": "#/definitions/ExportCompositionDefinition",
                    "description": "If this is an export composition, the definition of the composition"
                },
                "compositionsLookup": {
                    "$ref": "#/definitions/SystemLookup",
                    "description": "A set of description lookups for variables used in the composition definitions"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of this composition",
                    "type": "integer"
                },
                "description": {
                    "description": "The description of this composition",
                    "type": "string"
                },
                "type": {
                    "description": "The type of this composition",
                    "enum": [
                        "Check",
                        "Export"
                    ],
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this composition is for",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this composition"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this composition has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this composition has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this composition, or null if the\r\ncomposition has not yet been shared",
                    "type": "integer"
                }
            }
        },
        "SystemLookup": {
            "description": "Lookup information for variable and var code descriptions returned in a result",
            "required": [
                "variablesLookup"
            ],
            "type": "object",
            "properties": {
                "variablesLookup": {
                    "description": "A list of variable and var code descriptions",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VariableLookup"
                    }
                },
                "foldersLookup": {
                    "description": "A list of folder descriptions",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Folder"
                    }
                }
            }
        },
        "VariableLookup": {
            "description": "Lookup information for a variable and its var code descriptions returned in a result",
            "required": [
                "variable"
            ],
            "type": "object",
            "properties": {
                "variable": {
                    "$ref": "#/definitions/Variable",
                    "description": "The details of the variable in question"
                },
                "varCodesLookup": {
                    "description": "A partial list of var codes for the variable in question",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VarCode"
                    }
                }
            }
        },
        "Folder": {
            "description": "Details for a folder in the FastStats system",
            "required": [
                "name",
                "description"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the folder",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the folder",
                    "type": "string"
                }
            }
        },
        "Variable": {
            "description": "Details for a variable in the FastStats system",
            "required": [
                "name",
                "description",
                "type",
                "tableName",
                "isSelectable",
                "isBrowsable",
                "isExportable",
                "isVirtual"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the variable",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the variable",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the variable",
                    "enum": [
                        "Selector",
                        "Reference",
                        "Text",
                        "Numeric"
                    ],
                    "type": "string"
                },
                "folderName": {
                    "description": "The name of the folder that this variable belongs to within the FastStats system",
                    "type": "string"
                },
                "tableName": {
                    "description": "The name of the table that this variable is from",
                    "type": "string"
                },
                "isSelectable": {
                    "description": "Whether the variable is allowed to used in selections",
                    "type": "boolean"
                },
                "isBrowsable": {
                    "description": "Whether the variable is allowed to viewed with a client application (but not exported)",
                    "type": "boolean"
                },
                "isExportable": {
                    "description": "Whether the variable is allowed to exported by a client application",
                    "type": "boolean"
                },
                "isVirtual": {
                    "description": "Whether the variable is a virtual variable (i.e. created after the system has been built) or not",
                    "type": "boolean"
                },
                "selectorInfo": {
                    "$ref": "#/definitions/SelectorVariableInfo",
                    "description": "If this variable is a selector variable, further selector-specific information"
                },
                "numericInfo": {
                    "$ref": "#/definitions/NumericVariableInfo",
                    "description": "If this variable is a numeric variable, further numeric-specific information"
                },
                "textInfo": {
                    "$ref": "#/definitions/TextVariableInfo",
                    "description": "If this variable is a text variable, further label-specific information"
                },
                "referenceInfo": {
                    "$ref": "#/definitions/ReferenceVariableInfo",
                    "description": "If this variable is a reference (URN) variable, further reference-specific information"
                }
            }
        },
        "VarCode": {
            "description": "Details for a category for a selector variable in the FastStats system",
            "required": [
                "code",
                "description"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The code for this category",
                    "type": "string"
                },
                "description": {
                    "description": "The description for this category",
                    "type": "string"
                },
                "count": {
                    "format": "int64",
                    "description": "The number of records for the variable in the whole FastStats system that have been asigned this code.\r\nIf this is null, then the count is temporarily unavailable (perhaps due to row filters having been applied)",
                    "type": "integer"
                }
            }
        },
        "SelectorVariableInfo": {
            "description": "Details specific for selector variables in the FastStats system",
            "type": "object",
            "properties": {
                "selectorType": {
                    "description": "The type of selector that this variable is",
                    "enum": [
                        "SingleValue",
                        "OrArray",
                        "AndArray",
                        "OrBitArray",
                        "AndBitArray"
                    ],
                    "type": "string"
                },
                "subType": {
                    "description": "Further type information (such as whether the selector variable is a date or datetime) for this variable",
                    "enum": [
                        "Categorical",
                        "Date",
                        "DateTime"
                    ],
                    "type": "string"
                },
                "varCodeOrder": {
                    "description": "How the categories are ordered within this variable",
                    "enum": [
                        "Nominal",
                        "Ascending",
                        "Descending"
                    ],
                    "type": "string"
                },
                "numberOfCodes": {
                    "format": "int32",
                    "description": "The number of different categories (var codes) that this variable has",
                    "type": "integer"
                },
                "codeLength": {
                    "format": "int32",
                    "description": "The length of the code for each category (in bytes) for this variable",
                    "type": "integer"
                },
                "minimumVarCodeCount": {
                    "format": "int64",
                    "description": "The minimum count value in the variable's set of categories (var codes)",
                    "type": "integer"
                },
                "maximumVarCodeCount": {
                    "format": "int64",
                    "description": "The maximum count value in the variable's set of categories (var codes)",
                    "type": "integer"
                },
                "minimumDate": {
                    "format": "date-time",
                    "description": "If this variable is a date variable, The earliest date represented by this variable",
                    "type": "string"
                },
                "maximumDate": {
                    "format": "date-time",
                    "description": "If this variable is a date variable, The latest date represented by this variable",
                    "type": "string"
                },
                "combinedFromVariableName": {
                    "description": "If this variable is a summary/combined categories variable, then this is the name of the parent variable that this summarises",
                    "type": "string"
                }
            }
        },
        "NumericVariableInfo": {
            "description": "Details specific for numeric variables in the FastStats system",
            "type": "object",
            "properties": {
                "minimum": {
                    "format": "double",
                    "description": "The minimum value that this numeric value has",
                    "type": "number"
                },
                "maximum": {
                    "format": "double",
                    "description": "The maximum value that this numeric value has",
                    "type": "number"
                },
                "isCurrency": {
                    "description": "Whether this variable represents a currency value",
                    "type": "boolean"
                },
                "currencyLocale": {
                    "description": "If this variable is a currency variable, then the locale name for the specific currency (i.e. \"en-GB\" for the UK pound sterling, \"en-US\" for the US dollar)",
                    "type": "string"
                },
                "currencySymbol": {
                    "description": "If this variable is a currency variable, then the currency symbolfor the specific currency (i.e. \"£\" for the UK pound sterling, \"$\" for the US dollar)",
                    "type": "string"
                }
            }
        },
        "TextVariableInfo": {
            "description": "Details specific for text variables in the FastStats system",
            "type": "object",
            "properties": {
                "maximumTextLength": {
                    "format": "int32",
                    "description": "The maximum length of text data (in bytes) that can be held in the variable per record",
                    "type": "integer"
                }
            }
        },
        "ReferenceVariableInfo": {
            "description": "Details specific for reference (URN) variables in the FastStats system",
            "type": "object",
            "properties": {}
        },
        "PagedResults[AudienceHitSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AudienceHitSummary"
                    }
                }
            }
        },
        "AudienceHitSummary": {
            "description": "Summary for an audience hit",
            "required": [
                "id",
                "audienceId",
                "timestamp",
                "user"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id of the hit itself",
                    "type": "integer"
                },
                "audienceId": {
                    "format": "int32",
                    "description": "The id of the audience viewed",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The timestamp of when the hit was recorded",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "Details of the user that viewed the audience"
                }
            }
        },
        "AudienceHitDetail": {
            "description": "Details for an audience hit",
            "required": [
                "id",
                "audienceId",
                "timestamp",
                "user"
            ],
            "type": "object",
            "properties": {
                "userAgentDetails": {
                    "description": "Details of the client application that made the view",
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the hit itself",
                    "type": "integer"
                },
                "audienceId": {
                    "format": "int32",
                    "description": "The id of the audience viewed",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The timestamp of when the hit was recorded",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "Details of the user that viewed the audience"
                }
            }
        },
        "PagedResults[AudienceSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AudienceSummary"
                    }
                }
            }
        },
        "AudienceSummary": {
            "description": "Summary details for an audience",
            "required": [
                "id",
                "title",
                "description",
                "creationDate",
                "owner",
                "resolveTableName",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "numberOfHits",
                "systemName",
                "lastUpdatedUser",
                "lastUpdatedDate",
                "lastUpdateId"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The audience's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the audience",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the audience was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this audience"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the audience was deleted, or null if it has not been deleted",
                    "type": "string"
                },
                "resolveTableName": {
                    "description": "The FastStats table that the audience is defined against",
                    "type": "string"
                },
                "resolveTableNettCount": {
                    "format": "int64",
                    "description": "If the audience has been counted, the latest overall count for the resolve table",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this audience has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether the audience has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this audience, or null if the\r\naudience has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this audience",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this audience has been created against",
                    "type": "string"
                },
                "lastUpdatedUser": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that last updated this audience"
                },
                "lastUpdatedDate": {
                    "format": "date-time",
                    "description": "The date the audience was last updated",
                    "type": "string"
                },
                "lastUpdateId": {
                    "format": "int32",
                    "description": "The id of the last update for this audience",
                    "type": "integer"
                }
            }
        },
        "CreateAudienceDetail": {
            "description": "Details used to create an audience",
            "required": [
                "title",
                "systemName"
            ],
            "type": "object",
            "properties": {
                "title": {
                    "description": "The title of the audience",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience",
                    "type": "string"
                },
                "excludeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "A query rule that defines the records to exclude from this audience"
                },
                "includeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "A query rule that defines the records to start with when defining this audience"
                },
                "bodyQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "A query rule that defines the records that will make up this audience, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified)"
                },
                "selectionModifiers": {
                    "$ref": "#/definitions/SelectionModifiers",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "briefText": {
                    "description": "Notes associated with the audience",
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the FastStats system this audience is to be calculated against",
                    "type": "string"
                }
            }
        },
        "Query": {
            "type": "object",
            "properties": {
                "selection": {
                    "$ref": "#/definitions/Selection"
                },
                "todayAt": {
                    "type": "string"
                }
            }
        },
        "SelectionModifiers": {
            "description": "Modifiers for the nett selection query",
            "type": "object",
            "properties": {
                "limits": {
                    "$ref": "#/definitions/Limits",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "topN": {
                    "$ref": "#/definitions/TopN",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "nPer": {
                    "$ref": "#/definitions/NPer",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "rfv": {
                    "$ref": "#/definitions/RFV",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                }
            }
        },
        "Selection": {
            "required": [
                "tableName"
            ],
            "type": "object",
            "properties": {
                "ancestorCounts": {
                    "type": "boolean"
                },
                "recordSet": {
                    "$ref": "#/definitions/RecordSet"
                },
                "rule": {
                    "$ref": "#/definitions/Rule"
                },
                "rfv": {
                    "$ref": "#/definitions/RFV"
                },
                "nPer": {
                    "$ref": "#/definitions/NPer"
                },
                "topN": {
                    "$ref": "#/definitions/TopN"
                },
                "limits": {
                    "$ref": "#/definitions/Limits"
                },
                "tableName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Limits": {
            "type": "object",
            "properties": {
                "sampling": {
                    "enum": [
                        "All",
                        "First",
                        "Stratified",
                        "Random"
                    ],
                    "type": "string"
                },
                "stopAtLimit": {
                    "type": "boolean"
                },
                "total": {
                    "format": "int64",
                    "type": "integer"
                },
                "type": {
                    "enum": [
                        "None",
                        "Total",
                        "Fraction",
                        "Percent"
                    ],
                    "type": "string"
                },
                "startAt": {
                    "format": "int64",
                    "type": "integer"
                },
                "percent": {
                    "format": "double",
                    "type": "number"
                },
                "fraction": {
                    "$ref": "#/definitions/Fraction"
                }
            }
        },
        "TopN": {
            "type": "object",
            "properties": {
                "variableName": {
                    "type": "string"
                },
                "orderExpression": {
                    "$ref": "#/definitions/Expression"
                },
                "expression": {
                    "type": "string"
                },
                "direction": {
                    "enum": [
                        "Top",
                        "Bottom",
                        "RangeTopDown",
                        "RangeBottomUp",
                        "PercentRangeTopDown",
                        "PercentRangeBottomUp"
                    ],
                    "type": "string"
                },
                "value": {
                    "format": "int32",
                    "type": "integer"
                },
                "percent": {
                    "format": "double",
                    "type": "number"
                },
                "minValue": {
                    "format": "double",
                    "type": "number"
                },
                "maxValue": {
                    "format": "double",
                    "type": "number"
                },
                "sequence": {
                    "type": "string"
                },
                "groupingVariableName": {
                    "type": "string"
                },
                "groupingSequenceVariableName": {
                    "type": "string"
                },
                "groupingAscending": {
                    "type": "boolean"
                },
                "groupingSequence": {
                    "type": "string"
                },
                "groupMax": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "NPer": {
            "type": "object",
            "properties": {
                "recency": {
                    "$ref": "#/definitions/RFVRecency"
                },
                "groupingTableName": {
                    "type": "string"
                },
                "transactionalTableName": {
                    "type": "string"
                }
            }
        },
        "RFV": {
            "type": "object",
            "properties": {
                "frequency": {
                    "$ref": "#/definitions/RFVFrequency"
                },
                "recency": {
                    "$ref": "#/definitions/RFVRecency"
                },
                "value": {
                    "$ref": "#/definitions/RFVValue"
                },
                "groupingTable": {
                    "type": "string"
                },
                "transactionalTable": {
                    "type": "string"
                }
            }
        },
        "RecordSet": {
            "type": "object",
            "properties": {
                "type": {
                    "enum": [
                        "URN",
                        "SBM",
                        "FSRN"
                    ],
                    "type": "string"
                },
                "keyVariableName": {
                    "type": "string"
                },
                "byReference": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "transient": {
                    "type": "boolean"
                },
                "values": {
                    "type": "string"
                },
                "minOccurs": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Rule": {
            "type": "object",
            "properties": {
                "clause": {
                    "$ref": "#/definitions/Clause"
                }
            }
        },
        "Fraction": {
            "type": "object",
            "properties": {
                "numerator": {
                    "format": "int32",
                    "type": "integer"
                },
                "denominator": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Expression": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string"
                },
                "queries": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Query"
                    }
                },
                "desc": {
                    "type": "string"
                },
                "displayText": {
                    "type": "string"
                },
                "serverText": {
                    "type": "string"
                },
                "queryDescriptions": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outputType": {
                    "enum": [
                        "Double",
                        "Integer",
                        "String",
                        "Date",
                        "DateTime",
                        "Selector"
                    ],
                    "type": "string"
                },
                "stringSize": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "RFVRecency": {
            "type": "object",
            "properties": {
                "variableName": {
                    "type": "string"
                },
                "sequence": {
                    "type": "string"
                },
                "direction": {
                    "enum": [
                        "Any",
                        "First",
                        "Last",
                        "None"
                    ],
                    "type": "string"
                },
                "value": {
                    "format": "int32",
                    "type": "integer"
                },
                "distinct": {
                    "type": "boolean"
                }
            }
        },
        "RFVFrequency": {
            "type": "object",
            "properties": {
                "values": {
                    "type": "string"
                }
            }
        },
        "RFVValue": {
            "type": "object",
            "properties": {
                "variableName": {
                    "type": "string"
                },
                "action": {
                    "enum": [
                        "Sum",
                        "Average",
                        "Median",
                        "Mode",
                        "Minimum",
                        "Maximum",
                        "Distinct",
                        "RankCoefficient"
                    ],
                    "type": "string"
                },
                "values": {
                    "type": "string"
                }
            }
        },
        "Clause": {
            "type": "object",
            "properties": {
                "logic": {
                    "$ref": "#/definitions/Logic"
                },
                "criteria": {
                    "$ref": "#/definitions/Criteria"
                },
                "subSelection": {
                    "$ref": "#/definitions/SubSelection"
                }
            }
        },
        "Logic": {
            "required": [
                "tableName"
            ],
            "type": "object",
            "properties": {
                "operation": {
                    "enum": [
                        "INCLUDE",
                        "ANY",
                        "AND",
                        "OR",
                        "NOT",
                        "THE"
                    ],
                    "type": "string"
                },
                "operands": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Clause"
                    }
                },
                "tableName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Criteria": {
            "required": [
                "tableName"
            ],
            "type": "object",
            "properties": {
                "variableName": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "include": {
                    "type": "boolean"
                },
                "logic": {
                    "enum": [
                        "OR",
                        "AND"
                    ],
                    "type": "string"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "textMatchType": {
                    "enum": [
                        "Ranges",
                        "Is",
                        "Begins",
                        "Ends",
                        "Contains"
                    ],
                    "type": "string"
                },
                "valueRules": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ValueRule"
                    }
                },
                "expressionRule": {
                    "$ref": "#/definitions/Expression"
                },
                "todayAt": {
                    "type": "string"
                },
                "tableName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "SubSelection": {
            "type": "object",
            "properties": {
                "byReference": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                },
                "selection": {
                    "$ref": "#/definitions/Selection"
                }
            }
        },
        "ValueRule": {
            "type": "object",
            "properties": {
                "ageRule": {
                    "$ref": "#/definitions/AgeRule"
                },
                "dateRule": {
                    "$ref": "#/definitions/DateRule"
                },
                "listRule": {
                    "$ref": "#/definitions/ListRule"
                },
                "timeRule": {
                    "$ref": "#/definitions/TimeRule"
                },
                "predefinedRule": {
                    "enum": [
                        "DateRange",
                        "AdhocDates",
                        "AdhocValues",
                        "Today",
                        "Yesterday",
                        "Tomorrow",
                        "ThisWeek",
                        "ThisMonth",
                        "ThisQuarter",
                        "ThisYear",
                        "LastWeek",
                        "Last4Weeks",
                        "LastMonth",
                        "LastQuarter",
                        "LastYear",
                        "NextWeek",
                        "Next4Weeks",
                        "NextMonth",
                        "NextQuarter",
                        "NextYear",
                        "ThisWeekToDate",
                        "ThisMonthToDate",
                        "ThisQuarterToDate",
                        "ThisYearToDate",
                        "LastWeekToDate",
                        "LastMonthToDate",
                        "LastQuarterToDate",
                        "LastYearToDate",
                        "TheLastWeek",
                        "TheLast4Weeks",
                        "TheLastMonth",
                        "TheLastQuarter",
                        "TheLastYear",
                        "TheNextWeek",
                        "TheNext4Weeks",
                        "TheNextMonth",
                        "TheNextQuarter",
                        "TheNextYear",
                        "ThisBusinessMonth",
                        "ThisBusinessQuarter",
                        "ThisBusinessYear",
                        "LastBusinessMonth",
                        "LastBusinessQuarter",
                        "LastBusinessYear",
                        "NextBusinessMonth",
                        "NextBusinessQuarter",
                        "NextBusinessYear",
                        "ThisBusinessMonthToDate",
                        "ThisBusinessQuarterToDate",
                        "ThisBusinessYearToDate",
                        "LastBusinessMonthToDate",
                        "LastBusinessQuarterToDate",
                        "LastBusinessYearToDate",
                        "CustomRule",
                        "CustomAgeRule",
                        "CustomTimeRule"
                    ],
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "AgeRule": {
            "type": "object",
            "properties": {
                "rangeLow": {
                    "format": "int32",
                    "type": "integer"
                },
                "rangeHigh": {
                    "format": "int32",
                    "type": "integer"
                },
                "units": {
                    "enum": [
                        "Days",
                        "Weeks",
                        "Months",
                        "Quarters",
                        "Years"
                    ],
                    "type": "string"
                },
                "relativeTo": {
                    "enum": [
                        "Actual",
                        "Relative"
                    ],
                    "type": "string"
                },
                "referenceType": {
                    "enum": [
                        "Today",
                        "ThisWeek",
                        "ThisMonth",
                        "ThisQuarter",
                        "ThisYear",
                        "ThisBusinessMonth",
                        "ThisBusinessQuarter",
                        "ThisBusinessYear",
                        "LoadDate",
                        "LoadWeek",
                        "LoadMonth",
                        "LoadQuarter",
                        "LoadYear",
                        "FirstPopulatedDate",
                        "FirstPopulatedWeek",
                        "FirstPopulatedMonth",
                        "FirstPopulatedQuarter",
                        "FirstPopulatedYear",
                        "LastPopulatedDate",
                        "LastPopulatedWeek",
                        "LastPopulatedMonth",
                        "LastPopulatedQuarter",
                        "LastPopulatedYear"
                    ],
                    "type": "string"
                },
                "referenceDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "DateRule": {
            "type": "object",
            "properties": {
                "patternFrequency": {
                    "enum": [
                        "Daily",
                        "Weekly",
                        "Monthly",
                        "Yearly"
                    ],
                    "type": "string"
                },
                "patternInterval": {
                    "format": "int32",
                    "type": "integer"
                },
                "patternType": {
                    "enum": [
                        "CalculatedDay",
                        "CalculatedMonth",
                        "CalculatedYear",
                        "Explicit"
                    ],
                    "type": "string"
                },
                "patternDaysOfWeek": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "enum": [
                            "None",
                            "All",
                            "AllWeekdays",
                            "AllWeekendDays",
                            "Sunday",
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday"
                        ],
                        "type": "string"
                    }
                },
                "patternDayOfMonth": {
                    "format": "int32",
                    "type": "integer"
                },
                "patternMonthOfYear": {
                    "format": "int32",
                    "type": "integer"
                },
                "patternOccurrenceOfDayInMonth": {
                    "enum": [
                        "None",
                        "First",
                        "Second",
                        "Third",
                        "Fourth",
                        "Last"
                    ],
                    "type": "string"
                },
                "startRangeLimit": {
                    "enum": [
                        "Earliest",
                        "Latest",
                        "Actual",
                        "Relative"
                    ],
                    "type": "string"
                },
                "rangeStartDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "startRangeRelative": {
                    "enum": [
                        "Today",
                        "Tomorrow",
                        "Yesterday",
                        "ThisWeek",
                        "ThisMonth",
                        "ThisQuarter",
                        "ThisYear",
                        "ThisBusinessMonth",
                        "ThisBusinessQuarter",
                        "ThisBusinessYear",
                        "LoadDate",
                        "LoadWeek",
                        "LoadMonth",
                        "LoadQuarter",
                        "LoadYear",
                        "FirstPopulatedDate",
                        "FirstPopulatedWeek",
                        "FirstPopulatedMonth",
                        "FirstPopulatedQuarter",
                        "FirstPopulatedYear",
                        "LastPopulatedDate",
                        "LastPopulatedWeek",
                        "LastPopulatedMonth",
                        "LastPopulatedQuarter",
                        "LastPopulatedYear",
                        "CustomDate"
                    ],
                    "type": "string"
                },
                "startRangeOffsetDirection": {
                    "enum": [
                        "Forward",
                        "Backward"
                    ],
                    "type": "string"
                },
                "startRangeOffset": {
                    "format": "int32",
                    "type": "integer"
                },
                "startRangeOffsetUnits": {
                    "enum": [
                        "Days",
                        "Weeks",
                        "Months",
                        "Quarters",
                        "Years"
                    ],
                    "type": "string"
                },
                "endRangeLimit": {
                    "enum": [
                        "Earliest",
                        "Latest",
                        "Actual",
                        "Forward",
                        "Backward",
                        "Relative"
                    ],
                    "type": "string"
                },
                "rangeEndDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "endRangeRelative": {
                    "enum": [
                        "Today",
                        "Tomorrow",
                        "Yesterday",
                        "ThisWeek",
                        "ThisMonth",
                        "ThisQuarter",
                        "ThisYear",
                        "ThisBusinessMonth",
                        "ThisBusinessQuarter",
                        "ThisBusinessYear",
                        "LoadDate",
                        "LoadWeek",
                        "LoadMonth",
                        "LoadQuarter",
                        "LoadYear",
                        "FirstPopulatedDate",
                        "FirstPopulatedWeek",
                        "FirstPopulatedMonth",
                        "FirstPopulatedQuarter",
                        "FirstPopulatedYear",
                        "LastPopulatedDate",
                        "LastPopulatedWeek",
                        "LastPopulatedMonth",
                        "LastPopulatedQuarter",
                        "LastPopulatedYear",
                        "CustomDate"
                    ],
                    "type": "string"
                },
                "endRangeOffsetDirection": {
                    "enum": [
                        "Forward",
                        "Backward"
                    ],
                    "type": "string"
                },
                "endRangeOffset": {
                    "format": "int32",
                    "type": "integer"
                },
                "endRangeOffsetUnits": {
                    "enum": [
                        "Days",
                        "Weeks",
                        "Months",
                        "Quarters",
                        "Years"
                    ],
                    "type": "string"
                },
                "rangeMaxOccurrences": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "ListRule": {
            "type": "object",
            "properties": {
                "bandingType": {
                    "enum": [
                        "None",
                        "Years",
                        "Quarters",
                        "Months",
                        "Weeks",
                        "DayOfWeek",
                        "WeekOfYear",
                        "MonthOfYear",
                        "QuarterOfYear",
                        "DayMonthOfYear",
                        "HourOfDay",
                        "DayHour",
                        "DayHourMinute",
                        "Day",
                        "AgeInYears",
                        "AgeInMonths",
                        "AgeInQuarters",
                        "AgeInWeeks",
                        "AgeInDays",
                        "YearsBusiness",
                        "QuartersBusiness",
                        "QuarterOfYearBusiness",
                        "MonthsBusiness",
                        "MonthOfYearBusiness",
                        "WeeksBusiness",
                        "DaysBusiness",
                        "WeekOfYearBusiness",
                        "Custom"
                    ],
                    "type": "string"
                },
                "list": {
                    "type": "string"
                },
                "variableName": {
                    "type": "string"
                }
            }
        },
        "TimeRule": {
            "type": "object",
            "properties": {
                "rangeLow": {
                    "type": "string"
                },
                "rangeHigh": {
                    "type": "string"
                }
            }
        },
        "AudienceDetail": {
            "description": "Details for an audience",
            "required": [
                "id",
                "title",
                "description",
                "creationDate",
                "owner",
                "resolveTableName",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "numberOfHits",
                "systemName",
                "lastUpdatedUser",
                "lastUpdatedDate",
                "lastUpdateId"
            ],
            "type": "object",
            "properties": {
                "briefText": {
                    "description": "Notes associated with the audience",
                    "type": "string"
                },
                "excludeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to exclude from this audience"
                },
                "includeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to start with when defining this audience"
                },
                "bodyQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records that will make up this audience, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified)"
                },
                "selectionModifiers": {
                    "$ref": "#/definitions/SelectionModifiers",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "queriesLookup": {
                    "$ref": "#/definitions/SystemLookup",
                    "description": "A set of description lookups for variables used in the exclude, include and body queries"
                },
                "lastResult": {
                    "$ref": "#/definitions/AudienceResultDetail",
                    "description": "If this audience has been calculated, the last calculation result"
                },
                "id": {
                    "format": "int32",
                    "description": "The audience's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the audience",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the audience was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this audience"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the audience was deleted, or null if it has not been deleted",
                    "type": "string"
                },
                "resolveTableName": {
                    "description": "The FastStats table that the audience is defined against",
                    "type": "string"
                },
                "resolveTableNettCount": {
                    "format": "int64",
                    "description": "If the audience has been counted, the latest overall count for the resolve table",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this audience has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether the audience has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this audience, or null if the\r\naudience has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this audience",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this audience has been created against",
                    "type": "string"
                },
                "lastUpdatedUser": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that last updated this audience"
                },
                "lastUpdatedDate": {
                    "format": "date-time",
                    "description": "The date the audience was last updated",
                    "type": "string"
                },
                "lastUpdateId": {
                    "format": "int32",
                    "description": "The id of the last update for this audience",
                    "type": "integer"
                }
            }
        },
        "AudienceResultDetail": {
            "description": "Details for an audience result",
            "required": [
                "bodyResults",
                "id",
                "audienceUpdateId",
                "timestamp",
                "fastStatsBuildDate",
                "user",
                "nettResults",
                "urnFilePath"
            ],
            "type": "object",
            "properties": {
                "excludeResults": {
                    "$ref": "#/definitions/AudienceQueryResult",
                    "description": "The set of counts for just the exclude portion of the audience result, if specified"
                },
                "includeResults": {
                    "$ref": "#/definitions/AudienceQueryResult",
                    "description": "The set of counts for just the include portion of the audience result, if specified"
                },
                "bodyResults": {
                    "$ref": "#/definitions/AudienceQueryResult",
                    "description": "The set of counts for just the body portion of the audience result"
                },
                "id": {
                    "format": "int32",
                    "description": "The id for this audience result",
                    "type": "integer"
                },
                "audienceUpdateId": {
                    "format": "int32",
                    "description": "The id of the update (audience version) that this audience result was calculated with",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The date and time that this audience result was calculated",
                    "type": "string"
                },
                "fastStatsBuildDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system used to calculate this audience result was built",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user that triggered the calculation of this audience result"
                },
                "nettResults": {
                    "$ref": "#/definitions/AudienceQueryResult",
                    "description": "The set of overall results for this audience result"
                },
                "urnFilePath": {
                    "description": "If a URN file was generated as part of this audience result then this will be its path within the FastStats system",
                    "type": "string"
                }
            }
        },
        "AudienceQueryResult": {
            "description": "Details of a query results, returning counts and any associated server messages",
            "type": "object",
            "properties": {
                "counts": {
                    "description": "The set of counts for the result",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Count"
                    }
                },
                "messages": {
                    "description": "Any messages returned by the server for the result",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServerMessage"
                    }
                }
            }
        },
        "Count": {
            "description": "Details for a count of records from a particular table",
            "required": [
                "tableName",
                "countValue"
            ],
            "type": "object",
            "properties": {
                "tableName": {
                    "description": "The name of the table that the count comes from",
                    "type": "string"
                },
                "countValue": {
                    "format": "int64",
                    "description": "The count of the number of records selected on this table",
                    "type": "integer"
                }
            }
        },
        "ServerMessage": {
            "description": "A Message returned by the server",
            "required": [
                "type",
                "number",
                "text"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of the message",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information"
                    ],
                    "type": "string"
                },
                "number": {
                    "format": "int32",
                    "description": "The number of the message",
                    "type": "integer"
                },
                "text": {
                    "description": "The text associated with this message",
                    "type": "string"
                }
            }
        },
        "CopyAudienceDetail": {
            "description": "Details for copying an audience",
            "required": [
                "newTitle"
            ],
            "type": "object",
            "properties": {
                "newTitle": {
                    "description": "The title to use for the new audience",
                    "type": "string"
                }
            }
        },
        "TransferAudienceOwnershipDetails": {
            "description": "The details required to transfer the ownership of an audience",
            "required": [
                "newUsername"
            ],
            "type": "object",
            "properties": {
                "newUsername": {
                    "description": "The username of the new owning user",
                    "type": "string"
                }
            }
        },
        "PagedResults[AudienceUpdateSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AudienceUpdateSummary"
                    }
                }
            }
        },
        "AudienceUpdateSummary": {
            "description": "Summary for an audience update",
            "required": [
                "id",
                "timestamp",
                "user",
                "title",
                "description",
                "owner",
                "isDeleted",
                "resolveTableName"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The audience update's id",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The timestamp of when the update happened",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user that created this update"
                },
                "title": {
                    "description": "The title of the audience at the time of this update",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience at the time of this update",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owned this audience at the time of this update"
                },
                "isDeleted": {
                    "description": "Whether this update set the audience to be deleted or not",
                    "type": "boolean"
                },
                "resolveTableName": {
                    "description": "The FastStats table that the audience is defined against at the time of this update",
                    "type": "string"
                }
            }
        },
        "CreateAudienceUpdate": {
            "description": "Details used to create an audience update",
            "type": "object",
            "properties": {
                "title": {
                    "description": "The title of the audience",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience",
                    "type": "string"
                },
                "isDeleted": {
                    "description": "Whether this audience should be deleted or not",
                    "type": "boolean"
                },
                "excludeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "A query rule that defines the records to exclude from this audience"
                },
                "includeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "A query rule that defines the records to start with when defining this audience"
                },
                "bodyQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "A query rule that defines the records that will make up this audience, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified)"
                },
                "selectionModifiers": {
                    "$ref": "#/definitions/SelectionModifiers",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "briefText": {
                    "description": "Notes associated with the audience",
                    "type": "string"
                }
            }
        },
        "AudienceUpdateDetail": {
            "description": "Details for an audience update",
            "required": [
                "id",
                "timestamp",
                "user",
                "title",
                "description",
                "owner",
                "isDeleted",
                "resolveTableName"
            ],
            "type": "object",
            "properties": {
                "briefText": {
                    "description": "Notes associated with the audience at the time of this update",
                    "type": "string"
                },
                "excludeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to exclude from this audience at the time of this update"
                },
                "includeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to start with when defining this audience at the time of this update"
                },
                "bodyQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records that will make up this audience at the time of this update."
                },
                "selectionModifiers": {
                    "$ref": "#/definitions/SelectionModifiers",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "id": {
                    "format": "int32",
                    "description": "The audience update's id",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The timestamp of when the update happened",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user that created this update"
                },
                "title": {
                    "description": "The title of the audience at the time of this update",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience at the time of this update",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owned this audience at the time of this update"
                },
                "isDeleted": {
                    "description": "Whether this update set the audience to be deleted or not",
                    "type": "boolean"
                },
                "resolveTableName": {
                    "description": "The FastStats table that the audience is defined against at the time of this update",
                    "type": "string"
                }
            }
        },
        "PagedResults[AudienceResultSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AudienceResultSummary"
                    }
                }
            }
        },
        "AudienceResultSummary": {
            "description": "Summary information for an audience result",
            "required": [
                "id",
                "audienceUpdateId",
                "timestamp",
                "fastStatsBuildDate",
                "user",
                "nettResults",
                "urnFilePath"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id for this audience result",
                    "type": "integer"
                },
                "audienceUpdateId": {
                    "format": "int32",
                    "description": "The id of the update (audience version) that this audience result was calculated with",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The date and time that this audience result was calculated",
                    "type": "string"
                },
                "fastStatsBuildDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system used to calculate this audience result was built",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user that triggered the calculation of this audience result"
                },
                "nettResults": {
                    "$ref": "#/definitions/AudienceQueryResult",
                    "description": "The set of overall results for this audience result"
                },
                "urnFilePath": {
                    "description": "If a URN file was generated as part of this audience result then this will be its path within the FastStats system",
                    "type": "string"
                }
            }
        },
        "CalculateAudienceDetails": {
            "description": "The details required to perform a count of an audience",
            "required": [
                "generateUrnFile"
            ],
            "type": "object",
            "properties": {
                "generateUrnFile": {
                    "description": "Whether to generate a URN file with this count or not",
                    "type": "boolean"
                }
            }
        },
        "AudienceCalculateJobDetail": {
            "description": "Details for a job to count an audience",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "audienceResult": {
                    "$ref": "#/definitions/AudienceResultDetail",
                    "description": "If present, the end results of this job"
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "ExportAudienceDetails": {
            "description": "The details required to generate a data export for an audience",
            "required": [
                "maximumNumberOfRowsToBrowse",
                "returnBrowseRows",
                "columns",
                "generateUrnFile"
            ],
            "type": "object",
            "properties": {
                "maximumNumberOfRowsToBrowse": {
                    "format": "int64",
                    "description": "The maximum number of rows to return when browsing the data",
                    "type": "integer"
                },
                "returnBrowseRows": {
                    "description": "Whether to return data rows in the response or just export data to a file",
                    "type": "boolean"
                },
                "filename": {
                    "description": "If specified, the filename of a file to create, containing the full export data.\r\nThe file will be created in the directory for the associated audience, as configured in the API",
                    "type": "string"
                },
                "output": {
                    "$ref": "#/definitions/Output",
                    "description": "If this audience is exporting to a file, information about the how the export will be output"
                },
                "columns": {
                    "description": "The list of columns to include in this export",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Column"
                    }
                },
                "generateUrnFile": {
                    "description": "Whether to generate a URN file with this export or not",
                    "type": "boolean"
                }
            }
        },
        "Column": {
            "description": "A column to output for every row in the export",
            "required": [
                "id",
                "columnHeader"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the column",
                    "type": "string"
                },
                "variableName": {
                    "description": "The variable to output in this column",
                    "type": "string"
                },
                "query": {
                    "$ref": "#/definitions/Query",
                    "description": "A query to use to define the column.  Yes and No values will be returned for whether each row matches the query or not"
                },
                "columnHeader": {
                    "description": "The text to use as the column header",
                    "type": "string"
                },
                "detail": {
                    "description": "Whether to output the codes or descriptions for this column when data is exported to a file",
                    "enum": [
                        "Code",
                        "Description"
                    ],
                    "type": "string"
                },
                "unclassifiedFormat": {
                    "description": "How to format unclassified values for selector variables",
                    "enum": [
                        "FromDesign",
                        "Empty"
                    ],
                    "type": "string"
                },
                "userCode": {
                    "description": "Defines the user code for the column",
                    "type": "string"
                },
                "userCodeName": {
                    "description": "Defines the name of the user code for the column",
                    "type": "string"
                }
            }
        },
        "AudienceExportDetail": {
            "description": "Detail information for an audience export",
            "required": [
                "audienceUpdateId",
                "timestamp",
                "fastStatsBuildDate",
                "user",
                "nettCounts",
                "urnFilePath",
                "maximumNumberOfRowsToBrowse",
                "returnBrowseRows",
                "columns"
            ],
            "type": "object",
            "properties": {
                "audienceUpdateId": {
                    "format": "int32",
                    "description": "The id of the update (audience version) that the export was created from",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The date and time that the export was produced",
                    "type": "string"
                },
                "fastStatsBuildDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system used to create this export was built",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user that triggered the export"
                },
                "nettCounts": {
                    "description": "The set of overall counts for the audience behind this export",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Count"
                    }
                },
                "urnFilePath": {
                    "description": "If a URN file was generated as part of this export then this will be its path within the FastStats system",
                    "type": "string"
                },
                "maximumNumberOfRowsToBrowse": {
                    "format": "int64",
                    "description": "The requested maximum number of rows to return when browsing the data",
                    "type": "integer"
                },
                "returnBrowseRows": {
                    "description": "Whether data rows were requested to be returned or whether the data was exported directly to the specified file",
                    "type": "boolean"
                },
                "filePath": {
                    "description": "If specified, the path of a file that the data was exported to",
                    "type": "string"
                },
                "output": {
                    "$ref": "#/definitions/Output",
                    "description": "If this audience is exporting to a file, information about the how the export will be output"
                },
                "columns": {
                    "description": "The list of columns that have been included in this export",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Column"
                    }
                },
                "rows": {
                    "description": "If data rows were requested to be returned then the set of rows containing data for the given columns selected by the audience queries",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Row"
                    }
                }
            }
        },
        "Row": {
            "description": "A row of data in the export results",
            "required": [
                "codes",
                "descriptions"
            ],
            "type": "object",
            "properties": {
                "codes": {
                    "description": "A tab delimited list of variable codes for this row of the results.  There should be one value per column.\r\nIf the value of the item in the tab delimited list for a particular column is empty then the description\r\nfor the corresponding column should be used as the code.",
                    "type": "string"
                },
                "descriptions": {
                    "description": "A tab delimited list of variable descriptions for this row of the results.  There should be one value per column",
                    "type": "string"
                }
            }
        },
        "AudienceExportJobDetail": {
            "description": "Details for a job to export an audience",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "audienceExport": {
                    "$ref": "#/definitions/AudienceExportDetail",
                    "description": "If present, the end results of this job"
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "CheckAudienceDetails": {
            "description": "The details required to calculate check statistics for an audience",
            "required": [
                "dimensions"
            ],
            "type": "object",
            "properties": {
                "dimensions": {
                    "description": "The dimensions to check for this audience.  This can be one or more variables, queries, etc.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Dimension"
                    }
                }
            }
        },
        "Dimension": {
            "description": "A dimension to define the categories to break the data in the cube down by",
            "required": [
                "id",
                "type"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the dimension",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the dimension",
                    "enum": [
                        "Selector",
                        "NumericBand",
                        "DateBand",
                        "Text",
                        "Query"
                    ],
                    "type": "string"
                },
                "query": {
                    "$ref": "#/definitions/Query",
                    "description": "If the dimension is a query dimension - the definition of the query to use"
                },
                "variableName": {
                    "description": "If the dimension is a selector, numeric, date or text dimension then the name of the variable to use",
                    "type": "string"
                },
                "banding": {
                    "$ref": "#/definitions/DimensionBanding",
                    "description": "If the dimension is banded, details of the banding to use"
                },
                "function": {
                    "description": "Details of the function to use for this dimension",
                    "enum": [
                        "None",
                        "Sum",
                        "Mean",
                        "Min",
                        "Max",
                        "Median",
                        "Mode",
                        "Distinct",
                        "Frequency",
                        "Recency",
                        "RankCoefficient"
                    ],
                    "type": "string"
                },
                "noneCell": {
                    "description": "If this dimension represents something for a table lower down the hierarchy to the cube's resolve table,\r\nwhether to include a cell for where there a no records on the lower table.  I.e. for where a person has no orders",
                    "type": "boolean"
                },
                "omitUnclassified": {
                    "description": "If this dimension represents a selector with an unclassified code, whether to omit this from the cube",
                    "type": "boolean"
                },
                "filterQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "If defined, a query to use to filter the dimension"
                },
                "minimumCategoryCount": {
                    "format": "int32",
                    "description": "If defined, a minimum threshold for all categories in this dimension before they are included in the results for the cube.  The\r\nvalue for the threshold is the category's instant count.\r\nIf this property is specified then the TopNCategoryCount and PercentageOfMaximumCategoryThreshold properties must be left undefined.",
                    "type": "integer"
                },
                "topNCategoryCount": {
                    "format": "int32",
                    "description": "If defined, specifies how many categories to return for this dimension (sorted descending by their instant count). \r\nIf this property is specified then the MinimumCategoryCount and PercentageOfMaximumCategoryThreshold properties must be left undefined.",
                    "type": "integer"
                },
                "percentageOfMaximumCategoryThreshold": {
                    "format": "int32",
                    "description": "If defined, a threshold for all categories in this dimension before they are included in the results for the cube.  The\r\nthreshold is specified as a percentage of the biggest instant count for any category in this dimension.\r\nIf this property is specified then the MinimumCategoryCount and TopNCategoryCount properties must be left undefined.",
                    "type": "integer"
                }
            }
        },
        "DimensionBanding": {
            "description": "Information on how to band up numeric or date variables for a cube dimension",
            "required": [
                "type"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of banding to use",
                    "enum": [
                        "None",
                        "Years",
                        "Quarters",
                        "Months",
                        "Weeks",
                        "DayOfWeek",
                        "WeekOfYear",
                        "MonthOfYear",
                        "QuarterOfYear",
                        "DayMonthOfYear",
                        "HourOfDay",
                        "DayHour",
                        "DayHourMinute",
                        "Day",
                        "AgeInYears",
                        "AgeInMonths",
                        "AgeInQuarters",
                        "AgeInWeeks",
                        "AgeInDays",
                        "YearsBusiness",
                        "QuartersBusiness",
                        "QuarterOfYearBusiness",
                        "MonthsBusiness",
                        "MonthOfYearBusiness",
                        "WeeksBusiness",
                        "DaysBusiness",
                        "WeekOfYearBusiness",
                        "Custom"
                    ],
                    "type": "string"
                },
                "customValues": {
                    "description": "If the banding type is custom, than a tab-delimited list of bands to use",
                    "type": "string"
                }
            }
        },
        "AudienceCheckDetail": {
            "description": "Detail information for an audience check",
            "required": [
                "audienceUpdateId",
                "timestamp",
                "fastStatsBuildDate",
                "user",
                "nettCounts",
                "dimensionResults"
            ],
            "type": "object",
            "properties": {
                "audienceUpdateId": {
                    "format": "int32",
                    "description": "The id of the update (audience version) that the export was created from",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The date and time that the export was produced",
                    "type": "string"
                },
                "fastStatsBuildDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system used to create this export was built",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user that triggered the export"
                },
                "nettCounts": {
                    "description": "The set of overall counts for the audience behind this export",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Count"
                    }
                },
                "dimensionResults": {
                    "description": "The list of dimension results containing audience and base counts",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckDimensionResult"
                    }
                }
            }
        },
        "CheckDimensionResult": {
            "description": "Detail information for an audience check",
            "required": [
                "id",
                "codes",
                "descriptions",
                "baseCounts",
                "audienceCounts"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the dimension",
                    "type": "string"
                },
                "codes": {
                    "description": "A set of tab-delimited codes, one for each category in the dimension",
                    "type": "string"
                },
                "descriptions": {
                    "description": "A set of tab-delimited descriptions, one for each category in the dimension",
                    "type": "string"
                },
                "baseCounts": {
                    "description": "A set of tab-delimited counts for the universe, one for each category in the dimension",
                    "type": "string"
                },
                "audienceCounts": {
                    "description": "A set of tab-delimited counts for the audience, one for each category in the dimension",
                    "type": "string"
                }
            }
        },
        "AudienceCheckJobDetail": {
            "description": "Details for a job to calculate check statistics for an audience",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "audienceCheck": {
                    "$ref": "#/definitions/AudienceCheckDetail",
                    "description": "If present, the end results of this job"
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "CreateAudienceHitDetails": {
            "description": "Details for registering an audience hit",
            "type": "object",
            "properties": {
                "userAgentDetails": {
                    "description": "Details of the client application that made the view",
                    "type": "string"
                }
            }
        },
        "DataLicensingDetail": {
            "description": "The details required to get data licensing information for an audience",
            "type": "object",
            "properties": {
                "licensingSet": {
                    "description": "The name of the licensing set to get the information for",
                    "type": "string"
                }
            }
        },
        "LicensingInfo": {
            "description": "The details for licensing a given query",
            "required": [
                "creditRemaining",
                "grandTotalCost",
                "numberOfRecordsToLicense",
                "queryId"
            ],
            "type": "object",
            "properties": {
                "creditRemaining": {
                    "format": "double",
                    "description": "The remaining money available to license records",
                    "type": "number"
                },
                "grandTotalCost": {
                    "format": "double",
                    "description": "The total cost to license the records",
                    "type": "number"
                },
                "numberOfRecordsToLicense": {
                    "format": "int32",
                    "description": "The number of records from the given query that have not yet been licensed",
                    "type": "integer"
                },
                "queryId": {
                    "description": "The unique id of an audience data licensing query",
                    "type": "string"
                }
            }
        },
        "AudienceDataLicensingInfoJobDetail": {
            "description": "Details for a job to get data licensing info for an audience",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "licensingInfo": {
                    "$ref": "#/definitions/LicensingInfo",
                    "description": "If present, the end results of this job"
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "PagedResults[AudienceSettingsSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AudienceSettingsSummary"
                    }
                }
            }
        },
        "AudienceSettingsSummary": {
            "description": "Summary of audience settings for a system",
            "required": [
                "systemName",
                "allowAudienceBrowserDownloadDeliveryEntry",
                "allowAudienceFtpDeliveryEntry"
            ],
            "type": "object",
            "properties": {
                "systemName": {
                    "description": "The name of the system that the settings apply to",
                    "type": "string"
                },
                "allowAudienceBrowserDownloadDeliveryEntry": {
                    "description": "Whether an audience is allowed to have exported data delivered directly to the browser for download",
                    "type": "boolean"
                },
                "allowAudienceFtpDeliveryEntry": {
                    "description": "Whether an audience is allowed to have exported data delivered to an FTP site",
                    "type": "boolean"
                }
            }
        },
        "AudienceSettingsDetail": {
            "description": "Details of audience settings for a system",
            "required": [
                "systemName",
                "allowAudienceBrowserDownloadDeliveryEntry",
                "allowAudienceFtpDeliveryEntry"
            ],
            "type": "object",
            "properties": {
                "systemName": {
                    "description": "The name of the system that the settings apply to",
                    "type": "string"
                },
                "allowAudienceBrowserDownloadDeliveryEntry": {
                    "description": "Whether an audience is allowed to have exported data delivered directly to the browser for download",
                    "type": "boolean"
                },
                "allowAudienceFtpDeliveryEntry": {
                    "description": "Whether an audience is allowed to have exported data delivered to an FTP site",
                    "type": "boolean"
                }
            }
        },
        "PagedResults[CollectionHitSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CollectionHitSummary"
                    }
                }
            }
        },
        "CollectionHitSummary": {
            "description": "Summary for a collection hit",
            "required": [
                "id",
                "collectionId",
                "timestamp",
                "user"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id of the hit itself",
                    "type": "integer"
                },
                "collectionId": {
                    "format": "int32",
                    "description": "The id of the collection viewed",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The timestamp of when the hit was recorded",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "Details of the user that viewed the collection"
                }
            }
        },
        "CollectionHitDetail": {
            "description": "Details for a collection hit",
            "required": [
                "id",
                "collectionId",
                "timestamp",
                "user"
            ],
            "type": "object",
            "properties": {
                "userAgentDetails": {
                    "description": "Details of the client application that made the view",
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the hit itself",
                    "type": "integer"
                },
                "collectionId": {
                    "format": "int32",
                    "description": "The id of the collection viewed",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The timestamp of when the hit was recorded",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "Details of the user that viewed the collection"
                }
            }
        },
        "PagedResults[CollectionSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CollectionSummary"
                    }
                }
            }
        },
        "CollectionSummary": {
            "description": "Summary details for a collection",
            "required": [
                "id",
                "title",
                "description",
                "creationDate",
                "owner",
                "deletionDate",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "shareId",
                "numberOfHits",
                "systemName"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The collection's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the collection",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the collection",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the collection was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that created this collection"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the collection was deleted, or null if it has not been deleted",
                    "type": "string"
                },
                "numberOfParts": {
                    "format": "int32",
                    "description": "The number of parts within this collection",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this collection has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this collection has been shared with all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this collection, or null if the\r\ncollection has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this collection",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this collection has been created against",
                    "type": "string"
                }
            }
        },
        "UpsertCollectionDetail": {
            "description": "Details used to create or update a collection",
            "required": [
                "title",
                "description",
                "creationDate",
                "filePath"
            ],
            "type": "object",
            "properties": {
                "title": {
                    "description": "The title of the collection",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the collection",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the collection was created",
                    "type": "string"
                },
                "filePath": {
                    "description": "The path to the file that contains the parts of this collection",
                    "type": "string"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the collection was deleted, or null if it has not been deleted",
                    "type": "string"
                }
            }
        },
        "CollectionDetail": {
            "description": "Details for a collection",
            "required": [
                "id",
                "owner",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "shareId",
                "numberOfHits",
                "systemName",
                "title",
                "description",
                "creationDate",
                "filePath"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The collection's id",
                    "type": "integer"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that created this collection"
                },
                "numberOfParts": {
                    "format": "int32",
                    "description": "The number of parts within this collection",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this collection has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this collection has been shared with all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this collection, or null if the\r\ncollection has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this collection",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this collection has been created against",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the collection",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the collection",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the collection was created",
                    "type": "string"
                },
                "filePath": {
                    "description": "The path to the file that contains the parts of this collection",
                    "type": "string"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the collection was deleted, or null if it has not been deleted",
                    "type": "string"
                }
            }
        },
        "TransferCollectionOwnershipDetails": {
            "description": "The details required to transfer the ownership of a collection",
            "required": [
                "newUsername"
            ],
            "type": "object",
            "properties": {
                "newUsername": {
                    "description": "The username of the new owning user",
                    "type": "string"
                }
            }
        },
        "PagedResults[CollectionPartSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CollectionPartSummary"
                    }
                }
            }
        },
        "CollectionPartSummary": {
            "description": "Summary for a collection part",
            "required": [
                "title",
                "index",
                "visualisationType",
                "visualisationId"
            ],
            "type": "object",
            "properties": {
                "title": {
                    "description": "The collection part's title",
                    "type": "string"
                },
                "index": {
                    "format": "int32",
                    "description": "The part's index within the collection",
                    "type": "integer"
                },
                "visualisationType": {
                    "description": "The collection part's visualisation type",
                    "enum": [
                        "None",
                        "Cube",
                        "Venn",
                        "Chart",
                        "DataGrid"
                    ],
                    "type": "string"
                },
                "visualisationId": {
                    "description": "The id of the visualisation for this part",
                    "type": "string"
                }
            }
        },
        "CollectionPartDetail": {
            "description": "Details for a collection part",
            "required": [
                "notes",
                "title",
                "index",
                "visualisationType",
                "visualisationId"
            ],
            "type": "object",
            "properties": {
                "notes": {
                    "description": "The collection part's notes",
                    "type": "string"
                },
                "title": {
                    "description": "The collection part's title",
                    "type": "string"
                },
                "index": {
                    "format": "int32",
                    "description": "The part's index within the collection",
                    "type": "integer"
                },
                "visualisationType": {
                    "description": "The collection part's visualisation type",
                    "enum": [
                        "None",
                        "Cube",
                        "Venn",
                        "Chart",
                        "DataGrid"
                    ],
                    "type": "string"
                },
                "visualisationId": {
                    "description": "The id of the visualisation for this part",
                    "type": "string"
                }
            }
        },
        "CreateCollectionHitDetails": {
            "description": "Details for registering a collection hit",
            "type": "object",
            "properties": {
                "userAgentDetails": {
                    "description": "Details of the client application that made the view",
                    "type": "string"
                }
            }
        },
        "Cube": {
            "description": "Information to request the calculating of a cube from FastStats based upon a query",
            "required": [
                "baseQuery",
                "resolveTableName",
                "storage",
                "dimensions",
                "measures"
            ],
            "type": "object",
            "properties": {
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query that defines the records to base this cube on"
                },
                "resolveTableName": {
                    "description": "The name of the table to resolve this cube to.  I.e. all the counts in the cube will be counts of entities from this table",
                    "type": "string"
                },
                "storage": {
                    "description": "How the results of the cube will be returned",
                    "enum": [
                        "Full",
                        "Sparse"
                    ],
                    "type": "string"
                },
                "dimensions": {
                    "description": "The dimensions to build the cube with.  This can be one or more variables, queries, etc.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Dimension"
                    }
                },
                "measures": {
                    "description": "The measures to build the cube with.  This can be one or more aggregations to calculate for the specified dimensions such as counts, sums, means, etc.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Measure"
                    }
                }
            }
        },
        "Measure": {
            "description": "A measure to define the figures shown for each cell created by the dimensions of the cube",
            "required": [
                "id",
                "resolveTableName",
                "function"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the measure",
                    "type": "string"
                },
                "resolveTableName": {
                    "description": "The name of the table to resolve this measure to.  I.e. all the counts in this measure will be counts of entities from this table",
                    "type": "string"
                },
                "function": {
                    "description": "The function to use to aggregate up the data per cell within this measure",
                    "enum": [
                        "Count",
                        "Sum",
                        "Mean",
                        "VariableCount",
                        "Minimum",
                        "Maximum",
                        "Median",
                        "Mode",
                        "Variance",
                        "StandardDeviation",
                        "LowerQuartile",
                        "UpperQuartile",
                        "InterQuartileRange",
                        "Derived",
                        "CramersV",
                        "UCR",
                        "Phi",
                        "ChiSq",
                        "ChiSqProb",
                        "ContCoef",
                        "ZeroCells",
                        "LowCells",
                        "QueryCount",
                        "Percentile",
                        "CountDistinct",
                        "MaxDistinctCount"
                    ],
                    "type": "string"
                },
                "variableName": {
                    "description": "If the measure is based on a variable then the name of the variable to use",
                    "type": "string"
                },
                "query": {
                    "$ref": "#/definitions/Query",
                    "description": "If the measure is based on a query - the definition of the query to use"
                },
                "filterQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "A query used to filter the records for each cell in this measure"
                },
                "expression": {
                    "$ref": "#/definitions/Expression",
                    "description": "If the measure is based on an expression then the expression to use"
                },
                "sort": {
                    "description": "How the cells are sorted in this measure",
                    "enum": [
                        "None",
                        "Ascending",
                        "Descending"
                    ],
                    "type": "string"
                }
            }
        },
        "CubeResult": {
            "description": "Results for processing a cube request",
            "type": "object",
            "properties": {
                "title": {
                    "description": "The title of the cube that has been calculated",
                    "type": "string"
                },
                "notes": {
                    "description": "Any notes associated with the query that has been counted",
                    "type": "string"
                },
                "ranSuccessfully": {
                    "description": "Whether the query was counted successfully or not",
                    "type": "boolean"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this count has been produced by",
                    "type": "string"
                },
                "systemLoadDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system from which this count has come was last built",
                    "type": "string"
                },
                "userName": {
                    "description": "The name of the user that requested this count",
                    "type": "string"
                },
                "runDate": {
                    "format": "date-time",
                    "description": "The date and time that this count was run on",
                    "type": "string"
                },
                "queryDescription": {
                    "description": "A textual description of the query that was counted",
                    "type": "string"
                },
                "dimensionResults": {
                    "description": "The set of dimension results for this cube, containing the category codes and descriptions for each dimension in the cube",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DimensionResult"
                    }
                },
                "measureResults": {
                    "description": "The set of measure results for this cube, containing the values for each measure in the cube",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MeasureResult"
                    }
                },
                "cube": {
                    "$ref": "#/definitions/Cube",
                    "description": "The definition of the cube that was requested."
                },
                "counts": {
                    "description": "A list of counts for each affected table in the FastStats system.  The first count in the list is the main one.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Count"
                    }
                }
            }
        },
        "DimensionResult": {
            "description": "The results returned for a dimension defined in the cube",
            "required": [
                "id",
                "headerCodes",
                "headerDescriptions"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the dimension",
                    "type": "string"
                },
                "headerCodes": {
                    "description": "A set of tab-delimited codes, one for each category in the dimension",
                    "type": "string"
                },
                "headerDescriptions": {
                    "description": "A set of tab-delimited descriptions, one for each category in the dimension",
                    "type": "string"
                }
            }
        },
        "MeasureResult": {
            "description": "The results returned for a measure defined in the cube",
            "required": [
                "id",
                "rows",
                "cells"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the measure",
                    "type": "string"
                },
                "rows": {
                    "description": "If the cube is a full cube then a set of rows containing a tab delimeted set of values.  The number of values in each row will be one per category in the first dimension.\r\nIf there is a second dimension then there will be one row for each category in the second dimension.\r\nIf there are three dimensions then there will be a set of rows (holding the data for all the cells in dimensions 1 and 2) for each category in dimension 3.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cells": {
                    "description": "If he cube is a sparse cube then there will be a set of cells, each containing a way of indexing the cell in the cube and then the value of that cell.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DashboardItemData": {
            "type": "object",
            "properties": {
                "globalFilterApplied": {
                    "$ref": "#/definitions/Query"
                },
                "drillDownLevel": {
                    "format": "int32",
                    "type": "integer"
                },
                "dimensionFilter": {
                    "$ref": "#/definitions/Query"
                },
                "sortOrder": {
                    "enum": [
                        "Natural",
                        "AscendingByValue",
                        "DescendingByValue"
                    ],
                    "type": "string"
                }
            }
        },
        "DashboardItemDataResultDetail": {
            "description": "Results for processing a cube request",
            "type": "object",
            "properties": {
                "dimensionResults": {
                    "description": "The set of dimension results for this cube, containing the category codes and descriptions for each dimension in the cube",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DimensionResult"
                    }
                },
                "measureResults": {
                    "description": "The set of measure results for this cube, containing the values for each measure in the cube",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MeasureResult"
                    }
                },
                "messages": {
                    "description": "The set of measure results for this cube, containing the values for each measure in the cube",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServerMessage"
                    }
                }
            }
        },
        "CalculateDashboardData": {
            "type": "object",
            "properties": {
                "globalFilterApplied": {
                    "$ref": "#/definitions/Query"
                },
                "dashboardItemsToCalculate": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CalculateDashboardItem"
                    }
                }
            }
        },
        "CalculateDashboardItem": {
            "type": "object",
            "properties": {
                "dashboardItemId": {
                    "type": "string"
                },
                "drillDownLevel": {
                    "format": "int32",
                    "type": "integer"
                },
                "dimensionFilter": {
                    "$ref": "#/definitions/Query"
                },
                "sortOrder": {
                    "enum": [
                        "Natural",
                        "AscendingByValue",
                        "DescendingByValue"
                    ],
                    "type": "string"
                }
            }
        },
        "CalculateDashboardItemJobCreatedResult": {
            "type": "object",
            "properties": {
                "dashboardItemId": {
                    "type": "string"
                },
                "drillDownLevel": {
                    "format": "int32",
                    "type": "integer"
                },
                "jobId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "DashboardItemDataJobDetail": {
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "dashboardItemData": {
                    "$ref": "#/definitions/DashboardItemDataResultDetail",
                    "description": "Data calculated for the dashboard item."
                },
                "isCancelled": {
                    "description": "Has the job been cancelled",
                    "type": "boolean"
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "DashboardItemPreviewData": {
            "description": "Information to request the calculating the preview of a dashboard item (cube) from FastStats based upon a query",
            "required": [
                "dashboardItemId",
                "drillDownLevel",
                "sortOrder",
                "baseQuery"
            ],
            "type": "object",
            "properties": {
                "dashboardItemId": {
                    "description": "The id for this dashboard item",
                    "type": "string"
                },
                "drillDownLevel": {
                    "format": "int32",
                    "description": "The drill down level for this dashboard item",
                    "type": "integer"
                },
                "sortOrder": {
                    "description": "Whether the chart for the given drill down level should be sorted in it's natural order, by ascending or descending values",
                    "enum": [
                        "Natural",
                        "AscendingByValue",
                        "DescendingByValue"
                    ],
                    "type": "string"
                },
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query that defines the records to base this dashboard item preview on"
                },
                "dataSpecification": {
                    "$ref": "#/definitions/DashboardItemDataSpecification",
                    "description": "Details of the data specification used for the dashboard item"
                }
            }
        },
        "DashboardItemDataSpecification": {
            "description": "The details for any pre-defined dashboard items, that aren't specified using dimensions and measures",
            "type": "object",
            "properties": {
                "cubeSpecification": {
                    "$ref": "#/definitions/CubeSpecification",
                    "description": "The details needed to define a cube-based item"
                },
                "paretoSpecification": {
                    "$ref": "#/definitions/ParetoSpecification",
                    "description": "The details needed to define a Pareto item"
                }
            }
        },
        "CubeSpecification": {
            "description": "The details needed for specifying a cube-based dashboard item",
            "type": "object",
            "properties": {
                "dimensions": {
                    "description": "The dimensions of the dashboard item chart",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Dimension"
                    }
                },
                "measures": {
                    "description": "The measures of the dashboard item chart",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Measure"
                    }
                }
            }
        },
        "ParetoSpecification": {
            "description": "The details needed for specifying a pareto dashboard item",
            "required": [
                "valueVariableName",
                "resolveTableName"
            ],
            "type": "object",
            "properties": {
                "valueVariableName": {
                    "description": "The name of the variable to calculate the value for the pareto chart",
                    "type": "string"
                },
                "categoryVariableName": {
                    "description": "If specified, the name of the categories to show on the pareto chart.\r\nIf no categories are specified then records from the resolve table will be grouped together",
                    "type": "string"
                },
                "numberOfBands": {
                    "format": "int32",
                    "description": "If specified, and no category variable is specified, then the number of bands to group the records on the resolve table into.",
                    "type": "integer"
                },
                "resolveTableName": {
                    "description": "The name of the table to group together",
                    "type": "string"
                }
            }
        },
        "DashboardItemDataJobCreated": {
            "description": "Details for a created job to get the data for a dashboard item",
            "type": "object",
            "properties": {
                "dashboardItemId": {
                    "description": "The id for this dashboard item",
                    "type": "string"
                },
                "drillDownLevel": {
                    "format": "int32",
                    "description": "The drill down level for this dashboard item",
                    "type": "integer"
                },
                "jobId": {
                    "format": "int32",
                    "description": "The id of the created job for this dashboard item",
                    "type": "integer"
                }
            }
        },
        "CreateDashboardDetail": {
            "description": "Details for creating a dashboard",
            "required": [
                "title"
            ],
            "type": "object",
            "properties": {
                "title": {
                    "description": "The title of the dashboard",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the dashboard",
                    "type": "string"
                },
                "themeId": {
                    "format": "int32",
                    "description": "The theme id",
                    "type": "integer"
                },
                "logoId": {
                    "format": "int32",
                    "description": "The logo id",
                    "type": "integer"
                },
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The base query for the dashboard"
                },
                "dashboardItems": {
                    "description": "The items that are contained within the dashboard",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardContentItem"
                    }
                },
                "systemName": {
                    "description": "The connected system of the dashboard",
                    "type": "string"
                }
            }
        },
        "DashboardContentItem": {
            "description": "Outline for a dashboard item",
            "required": [
                "id",
                "title"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The dashboard items id",
                    "type": "string"
                },
                "title": {
                    "description": "The dashboard items title",
                    "type": "string"
                },
                "breakpoints": {
                    "description": "The breakpoint sizing data",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Breakpoint"
                    }
                },
                "dashboardItemDetails": {
                    "description": "The dashboard items details for each breakpoint",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardContentItemDetail"
                    }
                }
            }
        },
        "Breakpoint": {
            "required": [
                "breakpoint",
                "x",
                "y",
                "size",
                "notesAlignment"
            ],
            "type": "object",
            "properties": {
                "breakpoint": {
                    "description": "The target breakpoint size",
                    "enum": [
                        "xs",
                        "sm",
                        "md",
                        "lg",
                        "xl"
                    ],
                    "type": "string"
                },
                "x": {
                    "format": "int32",
                    "description": "The target breakpoint x location",
                    "type": "integer"
                },
                "y": {
                    "format": "int32",
                    "description": "The target breakpoint y location",
                    "type": "integer"
                },
                "size": {
                    "$ref": "#/definitions/Size",
                    "description": "The size of the dashboard item at the current target breakpoint"
                },
                "notesAlignment": {
                    "$ref": "#/definitions/NotesAlignment",
                    "description": "The alignment details for the dashboard item notes at the current target breakpoint"
                }
            }
        },
        "DashboardContentItemDetail": {
            "description": "The details of a dashboard item",
            "required": [
                "drilldownLevel",
                "chartType",
                "sortOrder"
            ],
            "type": "object",
            "properties": {
                "drilldownLevel": {
                    "format": "int32",
                    "description": "The drill down level of the dashboard item",
                    "type": "integer"
                },
                "description": {
                    "description": "The description of the dashboard item",
                    "type": "string"
                },
                "chartType": {
                    "description": "The chart type that will be shown in the dashboard item",
                    "enum": [
                        "Bar",
                        "Column",
                        "Pie",
                        "Donut",
                        "Line",
                        "UKPostArea",
                        "NLProvinces",
                        "NLMunicipalities",
                        "DE2DigitPostCode",
                        "CH2DigitPostCode",
                        "AU2DigitPostCode",
                        "USStates",
                        "NumberCard",
                        "Text",
                        "BandedPareto",
                        "CategoricalPareto",
                        "Area",
                        "ClusteredColumn",
                        "StackedColumn",
                        "Stacked100Column",
                        "RadarLine",
                        "RadarColumn",
                        "RadarArea",
                        "Funnel"
                    ],
                    "type": "string"
                },
                "dataSpecification": {
                    "$ref": "#/definitions/DashboardItemDataSpecification",
                    "description": "Details of the data specification used for the dashboard item"
                },
                "allowCategoryDisplay": {
                    "description": "Whether to allow category display on the dashboard item",
                    "type": "boolean"
                },
                "categoryDisplay": {
                    "$ref": "#/definitions/DashboardItemCategoryDisplay",
                    "description": "Details of any category display on the dashboard item"
                },
                "omitZeros": {
                    "description": "Whether to omit zeroes in the data of the dashboard item",
                    "type": "boolean"
                },
                "omitUnclassified": {
                    "description": "Whether to omit unclassifieds in the data of the dashboard item",
                    "type": "boolean"
                },
                "sortOrder": {
                    "description": "Whether the chart should be sorted in it's natural order, by ascending or descending values",
                    "enum": [
                        "Natural",
                        "AscendingByValue",
                        "DescendingByValue"
                    ],
                    "type": "string"
                },
                "showUnderlyingData": {
                    "description": "Whether to show the underlying data of the dashboard item",
                    "type": "boolean"
                },
                "notes": {
                    "description": "The notes for the dashboard item",
                    "type": "string"
                }
            }
        },
        "NotesAlignment": {
            "required": [
                "notesPosition",
                "notesContentVerticalAlignment",
                "notesContentHorizontalAlignment"
            ],
            "type": "object",
            "properties": {
                "notesPosition": {
                    "description": "The notes position",
                    "enum": [
                        "Top",
                        "Right",
                        "Bottom",
                        "Left"
                    ],
                    "type": "string"
                },
                "notesContentVerticalAlignment": {
                    "description": "The notes content vertical alignment",
                    "enum": [
                        "Top",
                        "Middle",
                        "Bottom"
                    ],
                    "type": "string"
                },
                "notesContentHorizontalAlignment": {
                    "description": "The notes content horizontal alignment",
                    "enum": [
                        "Left",
                        "Right",
                        "Center",
                        "Justify"
                    ],
                    "type": "string"
                }
            }
        },
        "DashboardItemCategoryDisplay": {
            "description": "The details of a dashboard item category display",
            "required": [
                "displayType",
                "limit"
            ],
            "type": "object",
            "properties": {
                "displayType": {
                    "description": "The filter type to filter the dashboard item categories",
                    "enum": [
                        "All",
                        "Top",
                        "Bottom",
                        "PercentageTotal",
                        "CategoryPercentageTotal"
                    ],
                    "type": "string"
                },
                "limit": {
                    "format": "int32",
                    "description": "The limit to use when displaying the dashboard item categories",
                    "type": "integer"
                },
                "autoAdjust": {
                    "description": "Whether to auto adjust the limit to the optimum value given the available tile space",
                    "type": "boolean"
                },
                "userAdjust": {
                    "description": "Whether to allow the user to adjust the category display",
                    "type": "boolean"
                }
            }
        },
        "DashboardDetail": {
            "description": "Details for a dashboard",
            "required": [
                "id",
                "title",
                "systemName",
                "owner",
                "lastUpdateId",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The base query for the dashboard"
                },
                "dashboardItems": {
                    "description": "The items that are contained within the dashboard",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardContentItem"
                    }
                },
                "baseQueryLookup": {
                    "$ref": "#/definitions/SystemLookup",
                    "description": "A set of description lookups for variables used in the exclude, include and body queries"
                },
                "themeId": {
                    "format": "int32",
                    "description": "The themeId of the dashboard",
                    "type": "integer"
                },
                "logoId": {
                    "format": "int32",
                    "description": "The logoId of the dashboard",
                    "type": "integer"
                },
                "id": {
                    "format": "int32",
                    "description": "The dashboard's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the dashboard",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the dashboard",
                    "type": "string"
                },
                "systemName": {
                    "description": "The FastStats system that this dashboard has been created against",
                    "type": "string"
                },
                "createdOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this dashboard"
                },
                "lastUpdatedOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was last updated",
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user details of the last update for this dashboard"
                },
                "lastUpdateId": {
                    "format": "int32",
                    "description": "The id of the last update for this dashboard",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this dashboard has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this dashboard has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this dashboard, or null if the\r\ndashboard has not yet been shared",
                    "type": "integer"
                },
                "deletedOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was deleted, or null if it has not been deleted",
                    "type": "string"
                }
            }
        },
        "CreateDashboardUpdateDetail": {
            "description": "Details for updating a dashboard",
            "required": [
                "id",
                "title"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The dashboard's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the dashboard",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the dashboard",
                    "type": "string"
                },
                "themeId": {
                    "format": "int32",
                    "description": "The dashboard theme id",
                    "type": "integer"
                },
                "logoId": {
                    "format": "int32",
                    "description": "The dashboard logo id",
                    "type": "integer"
                },
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The base query for the dashboard"
                },
                "dashboardItems": {
                    "description": "The items that are contained within the dashboard",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardContentItem"
                    }
                },
                "systemName": {
                    "description": "The connected system of the dashboard",
                    "type": "string"
                }
            }
        },
        "CopyDashboardDetail": {
            "description": "Details for copying a dashboard",
            "required": [
                "newTitle"
            ],
            "type": "object",
            "properties": {
                "newTitle": {
                    "description": "The title to use for the new dashboard",
                    "type": "string"
                }
            }
        },
        "ConvertDashboardToAudience": {
            "type": "object",
            "properties": {
                "globalFilterApplied": {
                    "$ref": "#/definitions/Query"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "ConvertDashboardToAudienceResult": {
            "type": "object",
            "properties": {
                "audienceId": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "DashboardExportData": {
            "type": "object",
            "properties": {
                "globalFilterApplied": {
                    "$ref": "#/definitions/Query"
                }
            }
        },
        "DashboardExportDataResult": {
            "description": "Results for processing a cube request",
            "type": "object",
            "properties": {
                "columns": {
                    "description": "The set of dimension results for this cube, containing the category codes and descriptions for each dimension in the cube",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Column"
                    }
                },
                "rows": {
                    "description": "The set of measure results for this cube, containing the values for each measure in the cube",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Row"
                    }
                }
            }
        },
        "PagedResults[DataLicensingSystemSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataLicensingSystemSummary"
                    }
                }
            }
        },
        "DataLicensingSystemSummary": {
            "description": "Top level summary for a FastStats system",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the FastStats system held in the API's configuration",
                    "type": "string"
                },
                "isVelocityEnabled": {
                    "description": "Whether export velocity checking is enabled for this system",
                    "type": "boolean"
                }
            }
        },
        "DataLicensingSystemDetail": {
            "description": "Top level details for a FastStats system",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the FastStats system held in the API's configuration",
                    "type": "string"
                },
                "isVelocityEnabled": {
                    "description": "Whether export velocity checking is enabled for this system",
                    "type": "boolean"
                }
            }
        },
        "DataPurchaseDetail": {
            "description": "Details used to create records purchase",
            "type": "object",
            "properties": {
                "queryId": {
                    "description": "The unique id of the data licensing query to purchase records for",
                    "type": "string"
                },
                "licensingSet": {
                    "description": "The name of the licensing set to purchase records for",
                    "type": "string"
                },
                "filename": {
                    "description": "The name of the file saved to the user's private directory",
                    "type": "string"
                },
                "grandTotalCost": {
                    "format": "double",
                    "description": "The total cost to license the records",
                    "type": "number"
                },
                "purchaseOrderNumber": {
                    "description": "The order number for this purchase of records",
                    "type": "string"
                },
                "password": {
                    "description": "String of characters to authorise purchase",
                    "type": "string"
                },
                "authorisationCode": {
                    "description": "Authorisation code to purchase records over velocity limit",
                    "type": "string"
                }
            }
        },
        "PurchaseInfo": {
            "description": "The details for licensing a given query",
            "required": [
                "numberOfRecordsLicensed",
                "creditRemaining",
                "grandTotalCost",
                "queryId",
                "urnFilePath"
            ],
            "type": "object",
            "properties": {
                "numberOfRecordsLicensed": {
                    "format": "int32",
                    "description": "The number of records from the given query that have not yet been licensed",
                    "type": "integer"
                },
                "creditRemaining": {
                    "format": "double",
                    "description": "The remaining money available to license records",
                    "type": "number"
                },
                "grandTotalCost": {
                    "format": "double",
                    "description": "The total cost of records licensed",
                    "type": "number"
                },
                "queryId": {
                    "description": "The unique id of an audience data licensing query",
                    "type": "string"
                },
                "urnFilePath": {
                    "description": "The location of the Urn file for the purchased records",
                    "type": "string"
                }
            }
        },
        "DataPurchaseJobDetail": {
            "description": "Details for a job to purchase data licensing records",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "purchaseInfo": {
                    "$ref": "#/definitions/PurchaseInfo",
                    "description": "If present, the end results of this job"
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "PagedResults[LicensingSet]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LicensingSet"
                    }
                }
            }
        },
        "LicensingSet": {
            "description": "Details for a licensing set",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the licensing set",
                    "type": "string"
                }
            }
        },
        "LicensingSetsJobDetail": {
            "description": "Details for a job to get data licensing sets",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "licensingSets": {
                    "description": "If present, the end results of this job",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LicensingSet"
                    }
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "PagedResults[FileSystemSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileSystemSummary"
                    }
                }
            }
        },
        "FileSystemSummary": {
            "description": "Top level summary for filesystem information",
            "required": [
                "systemName"
            ],
            "type": "object",
            "properties": {
                "systemName": {
                    "description": "The name of the system that has a filesystem available",
                    "type": "string"
                }
            }
        },
        "PagedResults[FileEntry]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileEntry"
                    }
                }
            }
        },
        "FileEntry": {
            "description": "Details for a visualisation",
            "required": [
                "name",
                "path",
                "type"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The file entry's name",
                    "type": "string"
                },
                "path": {
                    "description": "The file entry's full path",
                    "type": "string"
                },
                "type": {
                    "description": "The visualisation's type",
                    "enum": [
                        "Unknown",
                        "File",
                        "Directory",
                        "FTPDirectory",
                        "Chart",
                        "Cluster",
                        "Map",
                        "Cube",
                        "Tree",
                        "Venn",
                        "DataGrid",
                        "DecisionTree",
                        "Expression",
                        "ModellingEnvironment",
                        "ModelReport",
                        "Profile",
                        "Report",
                        "Segmentation",
                        "Selection",
                        "Storyboard",
                        "WordCloud"
                    ],
                    "type": "string"
                }
            }
        },
        "PagedResults[ExportSystemSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExportSystemSummary"
                    }
                }
            }
        },
        "ExportSystemSummary": {
            "description": "Top level summary for a FastStats system",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the FastStats system held in the API's configuration",
                    "type": "string"
                },
                "isVelocityEnabled": {
                    "description": "Whether export velocity checking is enabled for this system",
                    "type": "boolean"
                },
                "outputTypes": {
                    "description": "The set of export output types defined for this system",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutputType"
                    }
                }
            }
        },
        "OutputType": {
            "description": "A definition of an output format specified by an administrator",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the output type",
                    "type": "string"
                },
                "format": {
                    "description": "The format of the file to generate",
                    "enum": [
                        "CSV",
                        "SDF",
                        "XLS",
                        "XLSX",
                        "MDB",
                        "DBF",
                        "URN",
                        "NATIVEDUMP"
                    ],
                    "type": "string"
                },
                "exportExtraName": {
                    "description": "The name of the Export Extras post-processing job to run on exported file",
                    "type": "string"
                }
            }
        },
        "ExportSystemDetail": {
            "description": "Top level details for a FastStats system",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the FastStats system held in the API's configuration",
                    "type": "string"
                },
                "isVelocityEnabled": {
                    "description": "Whether export velocity checking is enabled for this system",
                    "type": "boolean"
                },
                "outputTypes": {
                    "description": "The set of export output types defined for this system",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutputType"
                    }
                }
            }
        },
        "Export": {
            "description": "Information to request the exporting data from FastStats based upon a query",
            "required": [
                "baseQuery",
                "resolveTableName",
                "maximumNumberOfRowsToBrowse",
                "returnBrowseRows",
                "columns"
            ],
            "type": "object",
            "properties": {
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query that defines the records to base this export on"
                },
                "resolveTableName": {
                    "description": "The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table",
                    "type": "string"
                },
                "maximumNumberOfRowsToBrowse": {
                    "format": "int64",
                    "description": "The maximum number of rows to return in the browse results",
                    "type": "integer"
                },
                "returnBrowseRows": {
                    "description": "Whether to output browse rows as well as generating a file",
                    "type": "boolean"
                },
                "pathToExportTo": {
                    "description": "The path of the file to export results to",
                    "type": "string"
                },
                "output": {
                    "$ref": "#/definitions/Output",
                    "description": "If this export is exporting to a file, information about the how the export will be output"
                },
                "columns": {
                    "description": "The name of the table to resolve this export to.  I.e. each row will correspond to one record from this table",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Column"
                    }
                },
                "limits": {
                    "$ref": "#/definitions/Limits",
                    "description": "Further limits to apply to the export on top of the base query"
                }
            }
        },
        "ExportResult": {
            "description": "Results for processing an export request",
            "type": "object",
            "properties": {
                "title": {
                    "description": "The title of the query that has been counted",
                    "type": "string"
                },
                "notes": {
                    "description": "Any notes associated with the query that has been counted",
                    "type": "string"
                },
                "ranSuccessfully": {
                    "description": "Whether the query was counted successfully or not",
                    "type": "boolean"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this count has been produced by",
                    "type": "string"
                },
                "systemLoadDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system from which this count has come was last built",
                    "type": "string"
                },
                "userName": {
                    "description": "The name of the user that requested this count",
                    "type": "string"
                },
                "runDate": {
                    "format": "date-time",
                    "description": "The date and time that this count was run on",
                    "type": "string"
                },
                "queryDescription": {
                    "description": "A textual description of the query that was counted",
                    "type": "string"
                },
                "rows": {
                    "description": "The rows of browse data for this export request.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Row"
                    }
                },
                "export": {
                    "$ref": "#/definitions/Export",
                    "description": "The definition of the export that was requested."
                },
                "counts": {
                    "description": "A list of counts for each affected table in the FastStats system.  The first count in the list is the main one.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Count"
                    }
                }
            }
        },
        "BuildDefinition": {
            "description": "The build definition for creating a FastStats system",
            "type": "object",
            "properties": {
                "designFilename": {
                    "description": "The name of a FastStats system design to use",
                    "type": "string"
                }
            }
        },
        "BuildResult": {
            "description": "The results of a FastStats system build",
            "required": [
                "success"
            ],
            "type": "object",
            "properties": {
                "success": {
                    "description": "Whether the build was successfil or not",
                    "type": "boolean"
                }
            }
        },
        "BuildJobDetail": {
            "description": "Details for a job to build a FastStats system",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "buildResult": {
                    "$ref": "#/definitions/BuildResult",
                    "description": "If present, the end results of this job"
                },
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                },
                "queuePosition": {
                    "format": "int32",
                    "description": "If present, the position that the job is in the job queue.  Jobs only start being actively processed once they reach the head of the queue",
                    "type": "integer"
                },
                "progress": {
                    "format": "int32",
                    "description": "If present, an estimate of how far through its processing this job is",
                    "type": "integer"
                }
            }
        },
        "PagedResults[JobSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JobSummary"
                    }
                }
            }
        },
        "JobSummary": {
            "description": "Summary information for a job in FastStats",
            "required": [
                "id",
                "priority",
                "state",
                "cancelRequested",
                "server",
                "systemName",
                "threadNumber",
                "username",
                "jobType"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id of the job",
                    "type": "integer"
                },
                "priority": {
                    "format": "int32",
                    "description": "The priority of the job.  The lower the number the more important the job",
                    "type": "integer"
                },
                "state": {
                    "description": "The state of the job.  Valid values can include 'cancel', 'done', 'incomplete', 'inserting' and 'unassigned'",
                    "type": "string"
                },
                "cancelRequested": {
                    "description": "Whether this job has been asked to cancel.  If it has then acted on this request and been cancelled then the state will be set to 'cancel'",
                    "type": "boolean"
                },
                "timeAdded": {
                    "format": "date-time",
                    "description": "The date and time that the job was added to the job queue",
                    "type": "string"
                },
                "timeSent": {
                    "format": "date-time",
                    "description": "The date and time that the job was sent from the queue to be processed",
                    "type": "string"
                },
                "timeFinished": {
                    "format": "date-time",
                    "description": "The date and time that the job finished processing",
                    "type": "string"
                },
                "server": {
                    "description": "The hostname of the server that is processing/processed this job",
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this job is running against",
                    "type": "string"
                },
                "threadNumber": {
                    "format": "int32",
                    "description": "The number of the thread within the FastStats Service that is running this job",
                    "type": "integer"
                },
                "username": {
                    "description": "The name of the user that submitted this job",
                    "type": "string"
                },
                "jobType": {
                    "description": "The type of the job",
                    "type": "string"
                }
            }
        },
        "ProcessingTimeStatisticsDetails": {
            "description": "Details for requesting some processing time statistics",
            "required": [
                "start",
                "end",
                "measure",
                "dimension",
                "jobPropertySelectionType",
                "jobPropertySelections"
            ],
            "type": "object",
            "properties": {
                "start": {
                    "format": "date-time",
                    "description": "The start date and time of window of jobs to analyse",
                    "type": "string"
                },
                "end": {
                    "format": "date-time",
                    "description": "The end date and time of window of jobs to analyse",
                    "type": "string"
                },
                "measure": {
                    "description": "The type of processing time to measure",
                    "enum": [
                        "ProcessingTime",
                        "QueueTime",
                        "TotalTime"
                    ],
                    "type": "string"
                },
                "dimension": {
                    "description": "The type of thing to break down the jobs into - either a time period or other property such as job type",
                    "enum": [
                        "Years",
                        "Quarters",
                        "Months",
                        "Weeks",
                        "Days",
                        "Hours",
                        "Minutes",
                        "JobType",
                        "Username"
                    ],
                    "type": "string"
                },
                "jobPropertySelectionType": {
                    "description": "The property to use to select on the jobs to analyse",
                    "enum": [
                        "AllJobs",
                        "Username",
                        "JobType"
                    ],
                    "type": "string"
                },
                "jobPropertySelections": {
                    "description": "The set of property values to use to select the jobs",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ProcessingTimeStatistics": {
            "description": "Communication statistics for a given set of days",
            "required": [
                "categories",
                "frequencies",
                "minimumDurationsInSeconds",
                "maximumDurationsInSeconds",
                "meanDurationsInSeconds",
                "standardDeviationOfDurationsInSeconds",
                "medianDurationsInSeconds",
                "percent75DurationsInSeconds",
                "percent90DurationsInSeconds",
                "percent95DurationsInSeconds",
                "percent99DurationsInSeconds"
            ],
            "type": "object",
            "properties": {
                "categories": {
                    "description": "The set of categories that the jobs have been broken down into",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "frequencies": {
                    "description": "The set of counts representing the number of jobs in each corresponding time period.  The first figure is data for the first category in the Categories list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "minimumDurationsInSeconds": {
                    "description": "The set of figures representing the minimum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "maximumDurationsInSeconds": {
                    "description": "The set of figures representing the maximum job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "meanDurationsInSeconds": {
                    "description": "The set of figures representing the mean job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "standardDeviationOfDurationsInSeconds": {
                    "description": "The set of figures representing the standard deviation for job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "medianDurationsInSeconds": {
                    "description": "The set of figures representing the median job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "percent75DurationsInSeconds": {
                    "description": "The set of figures representing the 75th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "percent90DurationsInSeconds": {
                    "description": "The set of figures representing the 90th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "percent95DurationsInSeconds": {
                    "description": "The set of figures representing the 95th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "percent99DurationsInSeconds": {
                    "description": "The set of figures representing the 99th percentile job duration for each corresponding time period.  The first figure is data for the first category in the Categories  list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                }
            }
        },
        "JobDetail": {
            "description": "Details for a job in FastStats",
            "required": [
                "request",
                "results",
                "id",
                "priority",
                "state",
                "cancelRequested",
                "server",
                "systemName",
                "threadNumber",
                "username",
                "jobType"
            ],
            "type": "object",
            "properties": {
                "request": {
                    "description": "The request XML for the job",
                    "type": "string"
                },
                "results": {
                    "description": "The results XML for the job",
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the job",
                    "type": "integer"
                },
                "priority": {
                    "format": "int32",
                    "description": "The priority of the job.  The lower the number the more important the job",
                    "type": "integer"
                },
                "state": {
                    "description": "The state of the job.  Valid values can include 'cancel', 'done', 'incomplete', 'inserting' and 'unassigned'",
                    "type": "string"
                },
                "cancelRequested": {
                    "description": "Whether this job has been asked to cancel.  If it has then acted on this request and been cancelled then the state will be set to 'cancel'",
                    "type": "boolean"
                },
                "timeAdded": {
                    "format": "date-time",
                    "description": "The date and time that the job was added to the job queue",
                    "type": "string"
                },
                "timeSent": {
                    "format": "date-time",
                    "description": "The date and time that the job was sent from the queue to be processed",
                    "type": "string"
                },
                "timeFinished": {
                    "format": "date-time",
                    "description": "The date and time that the job finished processing",
                    "type": "string"
                },
                "server": {
                    "description": "The hostname of the server that is processing/processed this job",
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this job is running against",
                    "type": "string"
                },
                "threadNumber": {
                    "format": "int32",
                    "description": "The number of the thread within the FastStats Service that is running this job",
                    "type": "integer"
                },
                "username": {
                    "description": "The name of the user that submitted this job",
                    "type": "string"
                },
                "jobType": {
                    "description": "The type of the job",
                    "type": "string"
                }
            }
        },
        "PagedResults[FastStatsSystemSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FastStatsSystemSummary"
                    }
                }
            }
        },
        "FastStatsSystemSummary": {
            "description": "Top level summary for a FastStats system",
            "required": [
                "name",
                "viewName",
                "description"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the FastStats system held in the API's configuration",
                    "type": "string"
                },
                "viewName": {
                    "description": "The name of the FastStats system as defined when the system was built",
                    "type": "string"
                },
                "description": {
                    "description": "The description for the FastStats system",
                    "type": "string"
                },
                "fastStatsBuildDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system was built",
                    "type": "string"
                }
            }
        },
        "FastStatsSystemDetail": {
            "description": "Top level details for a FastStats system",
            "required": [
                "dateSettings",
                "name",
                "viewName",
                "description"
            ],
            "type": "object",
            "properties": {
                "dateSettings": {
                    "$ref": "#/definitions/DateSettings",
                    "description": "The date settings for a FastStats system"
                },
                "name": {
                    "description": "The name of the FastStats system held in the API's configuration",
                    "type": "string"
                },
                "viewName": {
                    "description": "The name of the FastStats system as defined when the system was built",
                    "type": "string"
                },
                "description": {
                    "description": "The description for the FastStats system",
                    "type": "string"
                },
                "fastStatsBuildDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system was built",
                    "type": "string"
                }
            }
        },
        "DateSettings": {
            "description": "Date settings for a FastStats system",
            "required": [
                "useIso8601WeekOfYear"
            ],
            "type": "object",
            "properties": {
                "useIso8601WeekOfYear": {
                    "description": "Whether the FastStats system uses ISO 8601 date and time format",
                    "type": "boolean"
                },
                "businessYearStartDD": {
                    "format": "int32",
                    "description": "If defined, the day of the month that the \"Business year\" starts on.  For example, the UK tax year\r\nstarts on the 6th April, so this property would have a value of 6.",
                    "type": "integer"
                },
                "businessYearStartMM": {
                    "format": "int32",
                    "description": "If defined, the month of the ywear that the \"Business year\" starts on.  For example, the UK tax year\r\nstarts on the 6th April, so this property would have a value of 4.",
                    "type": "integer"
                }
            }
        },
        "PagedResults[Variable]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Variable"
                    }
                }
            }
        },
        "PagedResults[VarCode]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VarCode"
                    }
                }
            }
        },
        "PagedResults[Table]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Table"
                    }
                }
            }
        },
        "Table": {
            "description": "Details for a table in the FastStats system",
            "required": [
                "name",
                "singularDisplayName",
                "pluralDisplayName",
                "isDefaultTable",
                "isPeopleTable",
                "totalRecords",
                "childRelationshipName",
                "parentRelationshipName",
                "hasChildTables",
                "parentTable"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the table",
                    "type": "string"
                },
                "singularDisplayName": {
                    "description": "A description to use for this table when refering to a single entity (i.e. \"A Person\")",
                    "type": "string"
                },
                "pluralDisplayName": {
                    "description": "A description to use for this table when refering to multiple entities (i.e. \"Many People\")",
                    "type": "string"
                },
                "isDefaultTable": {
                    "description": "Whether this table is the default table in the FastStats system or not - i.e. the table to use when creating a blank query",
                    "type": "boolean"
                },
                "isPeopleTable": {
                    "description": "Whether this table is the one in the FastStats system used to represent natural people",
                    "type": "boolean"
                },
                "totalRecords": {
                    "format": "int64",
                    "description": "The total number of records in this table",
                    "type": "integer"
                },
                "childRelationshipName": {
                    "description": "A descriptive word or phrase to use when relating this table to one of its child tables (i.e. a Households \"is occupied by\" a Customer)",
                    "type": "string"
                },
                "parentRelationshipName": {
                    "description": "A descriptive word or phrase to use when relating this table to one of its parent tables (i.e. a Customer \"lives at\" a Households)",
                    "type": "string"
                },
                "hasChildTables": {
                    "description": "Whether this table has any child tables",
                    "type": "boolean"
                },
                "parentTable": {
                    "description": "The name of the parent table for this table.  The Master table is the only table without a parent",
                    "type": "string"
                }
            }
        },
        "PagedResults[FolderStructureNode]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FolderStructureNode"
                    }
                }
            }
        },
        "FolderStructureNode": {
            "description": "An item in the Folder structure tree",
            "type": "object",
            "properties": {
                "folder": {
                    "$ref": "#/definitions/Folder",
                    "description": "A folder in the folder structure tree"
                },
                "variable": {
                    "$ref": "#/definitions/Variable",
                    "description": "A variable in the folder structure tree"
                }
            }
        },
        "PagedResults[FastStatsSystemItem]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FastStatsSystemItem"
                    }
                }
            }
        },
        "FastStatsSystemItem": {
            "description": "Details for a FastStats system item",
            "required": [
                "type"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The type of this item",
                    "enum": [
                        "Variable",
                        "VarCode",
                        "Table",
                        "Folder"
                    ],
                    "type": "string"
                },
                "variable": {
                    "$ref": "#/definitions/Variable",
                    "description": "If this item is a variable then these are the details.\r\nIf this item is a var code then these are the details of the variable the var code belongs to."
                },
                "varCode": {
                    "$ref": "#/definitions/VarCode",
                    "description": "If this item is a var code then these are the details."
                },
                "table": {
                    "$ref": "#/definitions/TableItem",
                    "description": "If this item is a table then these are the details."
                },
                "folder": {
                    "$ref": "#/definitions/Folder",
                    "description": "If this item is a folder then these are the details."
                }
            }
        },
        "TableItem": {
            "description": "Details for a table in the FastStats system returned as part of the All items endpoint",
            "required": [
                "name",
                "pluralDisplayName"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the table",
                    "type": "string"
                },
                "pluralDisplayName": {
                    "description": "A description to use for this table when refering to multiple entities (i.e. \"Many People\")",
                    "type": "string"
                }
            }
        },
        "FileStream": {
            "type": "object",
            "properties": {
                "handle": {
                    "type": "object",
                    "readOnly": true
                },
                "canRead": {
                    "type": "boolean",
                    "readOnly": true
                },
                "canWrite": {
                    "type": "boolean",
                    "readOnly": true
                },
                "safeFileHandle": {
                    "$ref": "#/definitions/SafeFileHandle",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "readOnly": true
                },
                "isAsync": {
                    "type": "boolean",
                    "readOnly": true
                },
                "length": {
                    "format": "int64",
                    "type": "integer",
                    "readOnly": true
                },
                "position": {
                    "format": "int64",
                    "type": "integer"
                },
                "canSeek": {
                    "type": "boolean",
                    "readOnly": true
                },
                "canTimeout": {
                    "type": "boolean",
                    "readOnly": true
                },
                "readTimeout": {
                    "format": "int32",
                    "type": "integer"
                },
                "writeTimeout": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "SafeFileHandle": {
            "type": "object",
            "properties": {
                "isInvalid": {
                    "type": "boolean",
                    "readOnly": true
                },
                "isClosed": {
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "PagedResults[GroupSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupSummary"
                    }
                }
            }
        },
        "GroupSummary": {
            "description": "Summary details for a group",
            "required": [
                "id",
                "name"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The group's id",
                    "type": "integer"
                },
                "name": {
                    "description": "The group's name",
                    "type": "string"
                }
            }
        },
        "GroupDetail": {
            "description": "Details for a group",
            "required": [
                "id",
                "name"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The group's id",
                    "type": "integer"
                },
                "name": {
                    "description": "The group's name",
                    "type": "string"
                }
            }
        },
        "PagedResults[UserSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSummary"
                    }
                }
            }
        },
        "UserSummary": {
            "description": "Summary details for a user",
            "required": [
                "id",
                "username",
                "groupId",
                "teams",
                "firstname",
                "surname",
                "emailAddress",
                "userDisabledDate"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The user's id",
                    "type": "integer"
                },
                "username": {
                    "description": "The user's username",
                    "type": "string"
                },
                "groupId": {
                    "format": "int32",
                    "description": "The id of the group the user is in (or null if they aren't allocated to a group)",
                    "type": "integer"
                },
                "teams": {
                    "description": "The teams that the user is a member of",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamSummary"
                    }
                },
                "firstname": {
                    "description": "The user's first name",
                    "type": "string"
                },
                "surname": {
                    "description": "The user's surname",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The user's email address",
                    "type": "string"
                },
                "userDisabledDate": {
                    "format": "date-time",
                    "description": "The date on which the user was or will become disabled,\r\nor null if the user has not been disabled",
                    "type": "string"
                }
            }
        },
        "TeamSummary": {
            "description": "Summary details for a team",
            "required": [
                "id",
                "name"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The team's id",
                    "type": "integer"
                },
                "name": {
                    "description": "The team's name",
                    "type": "string"
                }
            }
        },
        "PagedResults[PeopleStageSystemSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PeopleStageSystemSummary"
                    }
                }
            }
        },
        "PeopleStageSystemSummary": {
            "description": "Top level summary for a PeopleStage system",
            "required": [
                "systemName",
                "diagramId",
                "programmeId",
                "programmeDescription",
                "isAbleToProvideStatistics"
            ],
            "type": "object",
            "properties": {
                "systemName": {
                    "description": "The name of the system that has PeopleStage configured",
                    "type": "string"
                },
                "diagramId": {
                    "description": "The top-level diagram id for this PeopleStage system",
                    "type": "string"
                },
                "programmeId": {
                    "description": "The id of the first programme configured within the PeopleStage diagram",
                    "type": "string"
                },
                "programmeDescription": {
                    "description": "The description of the first programme configured within the PeopleStage diagram",
                    "type": "string"
                },
                "isAbleToProvideStatistics": {
                    "description": "Whether statistics information can be gathered for this PeopleStage system",
                    "type": "boolean"
                }
            }
        },
        "PeopleStageSystemDetail": {
            "description": "Top level details for a PeopleStage system",
            "required": [
                "metadata",
                "systemName",
                "diagramId",
                "programmeId",
                "programmeDescription",
                "isAbleToProvideStatistics"
            ],
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/DiagramMetadata",
                    "description": "Metadata about the PeopleStage diagram"
                },
                "lastRequestedDataAt": {
                    "format": "date-time",
                    "description": "The date and time that the API last polled for PeopleStage data",
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the system that has PeopleStage configured",
                    "type": "string"
                },
                "diagramId": {
                    "description": "The top-level diagram id for this PeopleStage system",
                    "type": "string"
                },
                "programmeId": {
                    "description": "The id of the first programme configured within the PeopleStage diagram",
                    "type": "string"
                },
                "programmeDescription": {
                    "description": "The description of the first programme configured within the PeopleStage diagram",
                    "type": "string"
                },
                "isAbleToProvideStatistics": {
                    "description": "Whether statistics information can be gathered for this PeopleStage system",
                    "type": "boolean"
                }
            }
        },
        "DiagramMetadata": {
            "description": "Metadata information for a PeopleStage Diagram",
            "required": [
                "defaultCurrencyLocale"
            ],
            "type": "object",
            "properties": {
                "defaultCurrencyLocale": {
                    "description": "The locale string for the default currency for cost and revenue data in the PeopleStage diagram",
                    "type": "string"
                }
            }
        },
        "PagedResults[ChannelSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChannelSummary"
                    }
                }
            }
        },
        "ChannelSummary": {
            "description": "Summary information for a PeopleStage Channel",
            "required": [
                "id",
                "description",
                "type"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The channel's id",
                    "type": "string"
                },
                "schemaId": {
                    "format": "int32",
                    "description": "The channel's \"schema id\", used for looking up information about the channel in the run history of PeopleStage",
                    "type": "integer"
                },
                "description": {
                    "description": "The channel's description",
                    "type": "string"
                },
                "type": {
                    "description": "The channel's type",
                    "enum": [
                        "Unknown",
                        "Control",
                        "Broadcast",
                        "File",
                        "Ftp",
                        "Facebook",
                        "MicrosoftDynamics",
                        "SalesForce",
                        "PushNotification",
                        "Twitter",
                        "Google",
                        "LinkedIn",
                        "Composite"
                    ],
                    "type": "string"
                },
                "parentId": {
                    "description": "The id of the channel's parent",
                    "type": "string"
                }
            }
        },
        "ChannelDetail": {
            "description": "Details for a PeopleStage Channel",
            "required": [
                "id",
                "description",
                "type"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The channel's id",
                    "type": "string"
                },
                "schemaId": {
                    "format": "int32",
                    "description": "The channel's \"schema id\", used for looking up information about the channel in the run history of PeopleStage",
                    "type": "integer"
                },
                "description": {
                    "description": "The channel's description",
                    "type": "string"
                },
                "type": {
                    "description": "The channel's type",
                    "enum": [
                        "Unknown",
                        "Control",
                        "Broadcast",
                        "File",
                        "Ftp",
                        "Facebook",
                        "MicrosoftDynamics",
                        "SalesForce",
                        "PushNotification",
                        "Twitter",
                        "Google",
                        "LinkedIn",
                        "Composite"
                    ],
                    "type": "string"
                },
                "parentId": {
                    "description": "The id of the channel's parent",
                    "type": "string"
                }
            }
        },
        "PagedResults[ElementSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElementSummary"
                    }
                }
            }
        },
        "ElementSummary": {
            "description": "Summary information for a PeopleStage Element",
            "required": [
                "id",
                "description",
                "type",
                "parentId",
                "parentType"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The element's id",
                    "type": "string"
                },
                "description": {
                    "description": "The element's description",
                    "type": "string"
                },
                "type": {
                    "description": "The element's type",
                    "enum": [
                        "Unknown",
                        "Diagram",
                        "Programme",
                        "Area",
                        "Campaign",
                        "Message",
                        "Group",
                        "Audience",
                        "Content",
                        "Delivery",
                        "Pool",
                        "Responses",
                        "Transition",
                        "PauseAction"
                    ],
                    "type": "string"
                },
                "schemaId": {
                    "format": "int32",
                    "description": "The element's schema id - if it has one.  This is the key field into the PeopleStage schema tables such as ProcessDefinition.\r\nPublished elements should have a schema id.",
                    "type": "integer"
                },
                "schemaIdType": {
                    "description": "The type of the element's schema id - if it has a schema id.\r\nPublished elements should have a schema id and type.",
                    "enum": [
                        "Unknown",
                        "ProcessId"
                    ],
                    "type": "string"
                },
                "parentId": {
                    "description": "The parent of this element's id",
                    "type": "string"
                },
                "parentType": {
                    "description": "The parent of this element's type",
                    "enum": [
                        "Unknown",
                        "Diagram",
                        "Programme",
                        "Area",
                        "Campaign",
                        "Message",
                        "Group",
                        "Audience",
                        "Content",
                        "Delivery",
                        "Pool",
                        "Responses",
                        "Transition",
                        "PauseAction"
                    ],
                    "type": "string"
                },
                "path": {
                    "description": "The element's path",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElementKey"
                    }
                }
            }
        },
        "ElementKey": {
            "description": "Summary information for a PeopleStage Element Key",
            "required": [
                "id",
                "description"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The element's id",
                    "type": "string"
                },
                "description": {
                    "description": "The element's description",
                    "type": "string"
                }
            }
        },
        "ElementDetail": {
            "description": "Details for a PeopleStage Element",
            "required": [
                "id",
                "description",
                "type",
                "parentId",
                "parentType"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The element's id",
                    "type": "string"
                },
                "description": {
                    "description": "The element's description",
                    "type": "string"
                },
                "type": {
                    "description": "The element's type",
                    "enum": [
                        "Unknown",
                        "Diagram",
                        "Programme",
                        "Area",
                        "Campaign",
                        "Message",
                        "Group",
                        "Audience",
                        "Content",
                        "Delivery",
                        "Pool",
                        "Responses",
                        "Transition",
                        "PauseAction"
                    ],
                    "type": "string"
                },
                "schemaId": {
                    "format": "int32",
                    "description": "The element's schema id - if it has one.  This is the key field into the PeopleStage schema tables such as ProcessDefinition.\r\nPublished elements should have a schema id.",
                    "type": "integer"
                },
                "schemaIdType": {
                    "description": "The type of the element's schema id - if it has a schema id.\r\nPublished elements should have a schema id and type.",
                    "enum": [
                        "Unknown",
                        "ProcessId"
                    ],
                    "type": "string"
                },
                "parentId": {
                    "description": "The parent of this element's id",
                    "type": "string"
                },
                "parentType": {
                    "description": "The parent of this element's type",
                    "enum": [
                        "Unknown",
                        "Diagram",
                        "Programme",
                        "Area",
                        "Campaign",
                        "Message",
                        "Group",
                        "Audience",
                        "Content",
                        "Delivery",
                        "Pool",
                        "Responses",
                        "Transition",
                        "PauseAction"
                    ],
                    "type": "string"
                },
                "path": {
                    "description": "The element's path",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElementKey"
                    }
                }
            }
        },
        "CommunicationStatistics": {
            "description": "Communication statistics for a given set of days",
            "required": [
                "days",
                "communicationsCounts",
                "totalCommunicationsCount",
                "deliveriesCounts",
                "totalDeliveriesCount",
                "messagesCounts",
                "totalMessagesCount",
                "campaignsCounts",
                "totalCampaignsCount",
                "peopleCounts"
            ],
            "type": "object",
            "properties": {
                "days": {
                    "description": "The set of days where communication information is available",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "communicationsCounts": {
                    "description": "The set of counts representing the number of communications on the corresponding day.  The first figure is data for the first day in the Days list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "totalCommunicationsCount": {
                    "format": "int64",
                    "description": "The total number of communications across all days",
                    "type": "integer"
                },
                "deliveriesCounts": {
                    "description": "The set of counts representing the number of deliveries that have run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "totalDeliveriesCount": {
                    "format": "int64",
                    "description": "The total number of deliveries that have run across all days",
                    "type": "integer"
                },
                "messagesCounts": {
                    "description": "The set of counts representing the number of messages that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "totalMessagesCount": {
                    "format": "int64",
                    "description": "The total number of messages that have had at least one delivery run across all days",
                    "type": "integer"
                },
                "campaignsCounts": {
                    "description": "The set of counts representing the number of campaigns that have had at least one delivery run on the corresponding day.  The first figure is data for the first day in the Days list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "totalCampaignsCount": {
                    "format": "int64",
                    "description": "The total number of campaigns that have had at least one delivery run across all days",
                    "type": "integer"
                },
                "peopleCounts": {
                    "description": "The set of counts representing the number of unique people processed on the corresponding day.  The first figure is data for the first day in the Days list, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "communicationStatisticsTimestamp": {
                    "format": "date-time",
                    "description": "The date and time that the communication statistics were calculated",
                    "type": "string"
                },
                "campaignStatisticsTimestamp": {
                    "format": "date-time",
                    "description": "The date and time that the delivery, message and campaign statistics were calculated",
                    "type": "string"
                },
                "peopleStatisticsTimestamp": {
                    "format": "date-time",
                    "description": "The date and time that the people statistics were calculated",
                    "type": "string"
                }
            }
        },
        "ChannelStatistics": {
            "description": "Channel communication statistics",
            "required": [
                "days",
                "perChannelStats",
                "totalCommunicationsCount",
                "totalCost"
            ],
            "type": "object",
            "properties": {
                "days": {
                    "description": "The set of days where channel information is available",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "perChannelStats": {
                    "description": "A map between a channel's id and its statistics data",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerChannelStatistics"
                    }
                },
                "totalCommunicationsCount": {
                    "format": "int64",
                    "description": "The total number of communications across all channels",
                    "type": "integer"
                },
                "totalCost": {
                    "format": "double",
                    "description": "The total cost across all channels",
                    "type": "number"
                },
                "statisticsTimestamp": {
                    "format": "date-time",
                    "description": "The date and time that the channel statistics were calculated",
                    "type": "string"
                }
            }
        },
        "PerChannelStatistics": {
            "description": "Per-channel communication and cost data",
            "required": [
                "communicationsCounts",
                "costs",
                "totalCommunicationsCount",
                "totalCost"
            ],
            "type": "object",
            "properties": {
                "communicationsCounts": {
                    "description": "The set of counts representing the number of communications for the corresponding channel.  The first figure is data for the first day in the days list in the parent object, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "costs": {
                    "description": "The set of figures representing the total cost for the corresponding channel.  The first figure is data for the first day in the days list in the parent object, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "double",
                        "type": "number"
                    }
                },
                "totalCommunicationsCount": {
                    "format": "int64",
                    "description": "The total number of communications",
                    "type": "integer"
                },
                "totalCost": {
                    "format": "double",
                    "description": "The total cost",
                    "type": "number"
                }
            }
        },
        "ResponseStatistics": {
            "description": "Response statistics",
            "required": [
                "days",
                "perResponseTypeStatisticsMap"
            ],
            "type": "object",
            "properties": {
                "days": {
                    "description": "The set of days where response information is available",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "perResponseTypeStatisticsMap": {
                    "description": "A map between a response type and its response statistics data",
                    "type": "object",
                    "properties": {
                        "Unknown": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastBounce": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastOpen": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastClick": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastReply": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastOptIn": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastOptOut": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastDelivered": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "BroadcastFailed": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "FacebookLike": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "FacebookComment": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "FacebookShare": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "FacebookLinkClick": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "TwitterLike": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        },
                        "TwitterRetweet": {
                            "$ref": "#/definitions/PerResponseTypeStatistics"
                        }
                    }
                },
                "statisticsTimestamp": {
                    "format": "date-time",
                    "description": "The date and time that the response statistics were calculated",
                    "type": "string"
                }
            }
        },
        "PerResponseTypeStatistics": {
            "description": "Per-response type response data",
            "required": [
                "perChannelStatisticsMap",
                "totalResponsesCount"
            ],
            "type": "object",
            "properties": {
                "perChannelStatisticsMap": {
                    "description": "A map between a channel's id and its response statistics data",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerResponseTypePerChannelStatistics"
                    }
                },
                "totalResponsesCount": {
                    "format": "int64",
                    "description": "The total number of responses for the given response type",
                    "type": "integer"
                }
            }
        },
        "PerResponseTypePerChannelStatistics": {
            "description": "Per-response type, per-channel response data",
            "required": [
                "responsesCounts",
                "totalResponsesCount"
            ],
            "type": "object",
            "properties": {
                "responsesCounts": {
                    "description": "The set of counts representing the number of responses for the corresponding response type and channel.  The first figure is data for the first day in the days list in the parent object, and so on.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "totalResponsesCount": {
                    "format": "int64",
                    "description": "The total number of responses for the given response type and channel",
                    "type": "integer"
                }
            }
        },
        "ElementStatus": {
            "description": "Status information for a PeopleStage element",
            "required": [
                "id",
                "description",
                "type"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The element's id",
                    "type": "string"
                },
                "description": {
                    "description": "The element's description",
                    "type": "string"
                },
                "type": {
                    "description": "The element's type",
                    "enum": [
                        "Unknown",
                        "Diagram",
                        "Programme",
                        "Area",
                        "Campaign",
                        "Message",
                        "Group",
                        "Audience",
                        "Content",
                        "Delivery",
                        "Pool",
                        "Responses",
                        "Transition",
                        "PauseAction"
                    ],
                    "type": "string"
                },
                "successfulCampaignsCount": {
                    "format": "int32",
                    "description": "The number of campaigns that currently have a success status within this element",
                    "type": "integer"
                },
                "erroredCampaignsCount": {
                    "format": "int32",
                    "description": "The number of campaigns that currently have an errored status within this element",
                    "type": "integer"
                },
                "inactiveCampaignsCount": {
                    "format": "int32",
                    "description": "The number of campaigns that currently have an inactive status within this element",
                    "type": "integer"
                },
                "needsApprovalCampaignsCount": {
                    "format": "int32",
                    "description": "The number of campaigns that currently have a message that needs approval within this element",
                    "type": "integer"
                },
                "channelTypes": {
                    "description": "The different types of channel that have been used by deliveries within this element",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "enum": [
                            "Unknown",
                            "Control",
                            "Broadcast",
                            "File",
                            "Ftp",
                            "Facebook",
                            "MicrosoftDynamics",
                            "SalesForce",
                            "PushNotification",
                            "Twitter",
                            "Google",
                            "LinkedIn",
                            "Composite"
                        ],
                        "type": "string"
                    }
                },
                "firstRan": {
                    "format": "date-time",
                    "description": "The first time that any deliveries ran within this element",
                    "type": "string"
                },
                "lastRan": {
                    "format": "date-time",
                    "description": "The last time that any deliveries ran within this element",
                    "type": "string"
                },
                "statisticsTimestamp": {
                    "format": "date-time",
                    "description": "The date and time that the statistics were calculated",
                    "type": "string"
                },
                "path": {
                    "description": "The element's path",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElementKey"
                    }
                }
            }
        },
        "PagedResults[ElementStatus]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElementStatus"
                    }
                }
            }
        },
        "RangeStatistics": {
            "description": "Communication statistics for the specified date range",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The element's id",
                    "type": "string"
                },
                "communicationsCount": {
                    "format": "int64",
                    "description": "The number of communications sent within this element during the specified date range",
                    "type": "integer"
                },
                "deliveriesCount": {
                    "format": "int64",
                    "description": "The number of deliveries that have run within this element during the specified date range",
                    "type": "integer"
                },
                "messagesCount": {
                    "format": "int64",
                    "description": "The number of messages that have had at least one delivery run within this element during the specified date range",
                    "type": "integer"
                },
                "campaignsCount": {
                    "format": "int64",
                    "description": "The number of campaigns that have had at least one delivery run within this element during the specified date range",
                    "type": "integer"
                },
                "firstRan": {
                    "format": "date-time",
                    "description": "The first time that any deliveries ran within this element during the specified date range",
                    "type": "string"
                },
                "lastRan": {
                    "format": "date-time",
                    "description": "The last time that any deliveries ran within this element during the specified date range",
                    "type": "string"
                },
                "statisticsTimestamp": {
                    "format": "date-time",
                    "description": "The date and time that the campaign statistics were calculated",
                    "type": "string"
                }
            }
        },
        "PagedResults[AuthorisedPermissionWithLookups]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthorisedPermissionWithLookups"
                    }
                }
            }
        },
        "AuthorisedPermissionWithLookups": {
            "required": [
                "authorisedPermission"
            ],
            "type": "object",
            "properties": {
                "authorisedPermission": {
                    "$ref": "#/definitions/AuthorisedPermission"
                },
                "lookups": {
                    "$ref": "#/definitions/Lookups"
                }
            }
        },
        "AuthorisedPermission": {
            "description": "Details for a permission in the system",
            "required": [
                "id",
                "permissionType",
                "resourceType",
                "grant",
                "deny",
                "inherit"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "type": "integer"
                },
                "permission": {
                    "type": "object"
                },
                "permissionType": {
                    "enum": [
                        "Unknown",
                        "AccessRights",
                        "PublishRights",
                        "ExecutionRights",
                        "SettingsRights",
                        "DataRights",
                        "DiagramRights",
                        "StageRights",
                        "UsageRights"
                    ],
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "resourceType": {
                    "enum": [
                        "Unknown",
                        "File",
                        "PeopleStageElement",
                        "PeopleStageDiagram",
                        "PeopleStageSeed",
                        "PeopleStageSeedSet",
                        "PeopleStageChannel",
                        "PeopleStageAggregation",
                        "PeopleStageVoucherSet",
                        "PeopleStageTemplate",
                        "CascadeElement",
                        "FastStatsElement",
                        "UserElement"
                    ],
                    "type": "string"
                },
                "grant": {
                    "type": "boolean"
                },
                "deny": {
                    "type": "boolean"
                },
                "inherit": {
                    "type": "boolean"
                },
                "permissionSet": {
                    "$ref": "#/definitions/PermissionSet"
                },
                "authority": {
                    "$ref": "#/definitions/Authority"
                },
                "team": {
                    "$ref": "#/definitions/TeamSummary"
                }
            }
        },
        "Lookups": {
            "type": "object",
            "properties": {
                "systemLookup": {
                    "$ref": "#/definitions/SystemLookup"
                },
                "peopleStageLookup": {
                    "$ref": "#/definitions/PeopleStageLookup"
                },
                "usersLookup": {
                    "$ref": "#/definitions/UsersLookup"
                }
            }
        },
        "PermissionSet": {
            "required": [
                "id",
                "name",
                "systemName"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "systemName": {
                    "type": "string"
                },
                "systemPermissionSet": {
                    "type": "boolean"
                }
            }
        },
        "Authority": {
            "type": "object",
            "properties": {
                "authorityId": {
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "$ref": "#/definitions/Id"
                }
            }
        },
        "PeopleStageLookup": {
            "description": "Lookup information for peoplestage elements",
            "required": [
                "peopleStageElementsLookup"
            ],
            "type": "object",
            "properties": {
                "peopleStageElementsLookup": {
                    "description": "A list of peoplestage elements",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ElementSummary"
                    }
                }
            }
        },
        "UsersLookup": {
            "description": "Lookup information for users, groups and teams returned in a result",
            "type": "object",
            "properties": {
                "userLookup": {
                    "description": "A list of users",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserSummary"
                    }
                },
                "groupLookup": {
                    "description": "A list of groups",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupSummary"
                    }
                },
                "teamLookup": {
                    "description": "A list of teams",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamSummary"
                    }
                }
            }
        },
        "Id": {
            "required": [
                "idType",
                "idValue"
            ],
            "type": "object",
            "properties": {
                "idType": {
                    "enum": [
                        "None",
                        "User",
                        "Group",
                        "Default"
                    ],
                    "type": "string"
                },
                "idValue": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Permission": {
            "required": [
                "id",
                "permissionType",
                "resourceType",
                "grant",
                "deny",
                "inherit"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "type": "integer"
                },
                "permission": {
                    "type": "object"
                },
                "permissionType": {
                    "enum": [
                        "Unknown",
                        "AccessRights",
                        "PublishRights",
                        "ExecutionRights",
                        "SettingsRights",
                        "DataRights",
                        "DiagramRights",
                        "StageRights",
                        "UsageRights"
                    ],
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "resourceType": {
                    "enum": [
                        "Unknown",
                        "File",
                        "PeopleStageElement",
                        "PeopleStageDiagram",
                        "PeopleStageSeed",
                        "PeopleStageSeedSet",
                        "PeopleStageChannel",
                        "PeopleStageAggregation",
                        "PeopleStageVoucherSet",
                        "PeopleStageTemplate",
                        "CascadeElement",
                        "FastStatsElement",
                        "UserElement"
                    ],
                    "type": "string"
                },
                "grant": {
                    "type": "boolean"
                },
                "deny": {
                    "type": "boolean"
                },
                "inherit": {
                    "type": "boolean"
                }
            }
        },
        "QueryResult": {
            "description": "Details for a count of a particular query",
            "required": [
                "ranSuccessfully"
            ],
            "type": "object",
            "properties": {
                "title": {
                    "description": "The title of the query that has been counted",
                    "type": "string"
                },
                "notes": {
                    "description": "Any notes associated with the query that has been counted",
                    "type": "string"
                },
                "ranSuccessfully": {
                    "description": "Whether the query was counted successfully or not",
                    "type": "boolean"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this count has been produced by",
                    "type": "string"
                },
                "systemLoadDate": {
                    "format": "date-time",
                    "description": "The date and time that the FastStats system from which this count has come was last built",
                    "type": "string"
                },
                "userName": {
                    "description": "The name of the user that requested this count",
                    "type": "string"
                },
                "runDate": {
                    "format": "date-time",
                    "description": "The date and time that this count was run on",
                    "type": "string"
                },
                "queryDescription": {
                    "description": "A textual description of the query that was counted",
                    "type": "string"
                },
                "counts": {
                    "description": "A list of counts for each affected table in the FastStats system.  The first count in the list is the main one.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Count"
                    }
                },
                "messages": {
                    "description": "A list of messages associated with this result",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServerMessage"
                    }
                },
                "query": {
                    "$ref": "#/definitions/Query",
                    "description": "The definition of the query that was requested."
                }
            }
        },
        "QueryFile": {
            "description": "Information to request the counting of a query stored in a file",
            "required": [
                "path"
            ],
            "type": "object",
            "properties": {
                "path": {
                    "description": "The path of the query to count",
                    "type": "string"
                }
            }
        },
        "SaveQueryFile": {
            "description": "Information to request the saving of a query to a file",
            "required": [
                "path",
                "query"
            ],
            "type": "object",
            "properties": {
                "path": {
                    "description": "The path of the query to save",
                    "type": "string"
                },
                "query": {
                    "$ref": "#/definitions/Query",
                    "description": "The query definition"
                }
            }
        },
        "CreateSessionParameters": {
            "description": "The parameters needed to create a valid password hash value when creating a session",
            "required": [
                "loginSalt",
                "saltPassword",
                "userSalt",
                "usePasswordHashes",
                "hashAlgorithm"
            ],
            "type": "object",
            "properties": {
                "loginSalt": {
                    "description": "The salt to use when creating a session",
                    "type": "string"
                },
                "saltPassword": {
                    "description": "Whether you have to use the UserSalt to create the password hash when logging in via the SaltedLogin method",
                    "type": "boolean"
                },
                "userSalt": {
                    "description": "The password salt for the particular user",
                    "type": "string"
                },
                "usePasswordHashes": {
                    "description": "Whether you have to hash the password with the given algorithm before it is combined with the login salt or not",
                    "type": "boolean"
                },
                "hashAlgorithm": {
                    "description": "The hash algorithm to use when generating the password hash",
                    "enum": [
                        "BasicCipher",
                        "MD5",
                        "SHA1",
                        "SHA256",
                        "SHA384",
                        "SHA512"
                    ],
                    "type": "string"
                }
            }
        },
        "Link": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                },
                "templated": {
                    "type": "boolean",
                    "readOnly": true
                },
                "type": {
                    "type": "string"
                },
                "deprecation": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "profile": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "hreflang": {
                    "type": "string"
                }
            }
        },
        "SessionDetails": {
            "description": "The details for a newly created session",
            "required": [
                "accessToken",
                "user",
                "sessionId",
                "licence"
            ],
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "The access token that needs to be included when making requests that require authentication",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "Details of the user associated with this current session"
                },
                "sessionId": {
                    "description": "The id for this current session",
                    "type": "string"
                },
                "lastLogin": {
                    "format": "date-time",
                    "description": "The last login for the user",
                    "type": "string"
                },
                "licence": {
                    "$ref": "#/definitions/Licence",
                    "description": "Licence details for the user associated with this current session"
                }
            }
        },
        "Licence": {
            "description": "The licence details for the user",
            "required": [
                "audienceSelection",
                "audiencePreview",
                "export",
                "advancedQuery",
                "cube",
                "profile",
                "dashboards",
                "dashboardsPareto"
            ],
            "type": "object",
            "properties": {
                "audienceSelection": {
                    "description": "Whether this user is allowed to access \"Audience Selection\" functionality",
                    "type": "boolean"
                },
                "audiencePreview": {
                    "description": "Whether this user is allowed to access \"Audience Preview\" functionality",
                    "type": "boolean"
                },
                "export": {
                    "description": "Whether this user is allowed to access \"Export\" functionality",
                    "type": "boolean"
                },
                "advancedQuery": {
                    "description": "Whether this user is allowed to access \"Advanced Query\" functionality",
                    "type": "boolean"
                },
                "cube": {
                    "description": "Whether this user is allowed to access \"Cube\" functionality",
                    "type": "boolean"
                },
                "profile": {
                    "description": "Whether this user is allowed to access \"Profile\" functionality.",
                    "type": "boolean"
                },
                "dashboards": {
                    "description": "Whether this user is allowed to access \"Dashboards\" functionality.",
                    "type": "boolean"
                },
                "dashboardsPareto": {
                    "description": "Whether this user is allowed to access \"Dashboards Pareto\" functionality.",
                    "type": "boolean"
                }
            }
        },
        "TokenLoginDetails": {
            "description": "The details required to create a session to log in with using the TokenLogin method",
            "required": [
                "token"
            ],
            "type": "object",
            "properties": {
                "token": {
                    "description": "The login JWT token used to create the session",
                    "type": "string"
                },
                "clientType": {
                    "description": "If specified, the type of client creating the session.  Otherwise a default value will be used.",
                    "type": "string"
                }
            }
        },
        "PagedResults[SessionAndUserDetails]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SessionAndUserDetails"
                    }
                }
            }
        },
        "SessionAndUserDetails": {
            "description": "The username associated with a given session",
            "required": [
                "user",
                "sessionId"
            ],
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "Details of the user associated with the session"
                },
                "sessionId": {
                    "description": "The id for this session",
                    "type": "string"
                }
            }
        },
        "PagedResults[ShareSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ShareSummary"
                    }
                }
            }
        },
        "ShareSummary": {
            "description": "Summary details for how a shareable item is shared",
            "required": [
                "id",
                "shareableType",
                "shareableId",
                "shareableTitle",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id of the share",
                    "type": "integer"
                },
                "shareableType": {
                    "description": "The type of the shareable item (collection, list, etc.)",
                    "enum": [
                        "Unknown",
                        "Collection",
                        "Audience",
                        "Dashboard",
                        "AudienceComposition"
                    ],
                    "type": "string"
                },
                "shareableId": {
                    "format": "int32",
                    "description": "The id of the shareable item",
                    "type": "integer"
                },
                "shareableTitle": {
                    "description": "The title of the shareable item",
                    "type": "string"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people the shareable item has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether the shareable item has been shared with all users",
                    "type": "boolean"
                }
            }
        },
        "CreateShareDetail": {
            "description": "The details required to create a new share",
            "required": [
                "shareableType",
                "shareableId",
                "emailAddressesToAdd",
                "userIdsToAdd",
                "groupIdsToAdd",
                "notifyAddedRecipients"
            ],
            "type": "object",
            "properties": {
                "shareableType": {
                    "description": "The type of the shareable item (collection, audience, etc.) being shared",
                    "enum": [
                        "Collection",
                        "Audience",
                        "Dashboard",
                        "AudienceComposition"
                    ],
                    "type": "string"
                },
                "shareableId": {
                    "format": "int32",
                    "description": "The id of the shareable item being shared",
                    "type": "integer"
                },
                "emailAddressesToAdd": {
                    "description": "The list of email addresses to share this shareable item with",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIdsToAdd": {
                    "description": "The list of user id's to share this shareable item with",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "groupIdsToAdd": {
                    "description": "The list of group id's to share this shareable item with",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "shareToAll": {
                    "description": "Whether to share to all users",
                    "type": "boolean"
                },
                "notifyAddedRecipients": {
                    "description": "Whether to notify the users added in this share that the shareable item has now been shared with them",
                    "type": "boolean"
                },
                "addedRecipientNotificationMessage": {
                    "description": "If added recipients are to be notified, this is the message to be sent to them.\r\nThe URL of the view of the shareable item (specified when the shareable item was created)\r\nwill be added to the notification after this message.",
                    "type": "string"
                },
                "notes": {
                    "description": "The notes associated with this share update",
                    "type": "string"
                },
                "viewShareableUrl": {
                    "description": "A URL of a page to view the shareable item.  If specified this will be used in notification\r\nmessages to show added or removed users where to view the shareable item\r\n\r\nIf the URL is specified, it can use {shareableId} and {emailAddress} parameters\r\n\r\nhttp://www.example.com/collections/{shareableId}?email={emailAddress}\r\n\r\nIf present, these parameters will be replaced with the id of the shareable item and the email address of the user being added/removed",
                    "type": "string"
                }
            }
        },
        "ShareDetail": {
            "description": "Details for how a shareable item is shared",
            "required": [
                "id",
                "shareableType",
                "shareableId",
                "shareableTitle",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "viewShareableUrl"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id of the share",
                    "type": "integer"
                },
                "shareableType": {
                    "description": "The type of the shareable item (collection, audience, etc.)",
                    "enum": [
                        "Unknown",
                        "Collection",
                        "Audience",
                        "Dashboard",
                        "AudienceComposition"
                    ],
                    "type": "string"
                },
                "shareableId": {
                    "format": "int32",
                    "description": "The id of the shareable item being shared",
                    "type": "integer"
                },
                "shareableTitle": {
                    "description": "The title of the shareable item being shared",
                    "type": "string"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people the shareable item has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether the shareable item has been shared to all users",
                    "type": "boolean"
                },
                "viewShareableUrl": {
                    "description": "The URL of a page that will allow users to view the shareable item.",
                    "type": "string"
                }
            }
        },
        "PagedResults[UserDisplayDetails]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserDisplayDetails"
                    }
                }
            }
        },
        "PagedResults[GroupDetail]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GroupDetail"
                    }
                }
            }
        },
        "PagedResults[ShareUpdate]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ShareUpdate"
                    }
                }
            }
        },
        "ShareUpdate": {
            "description": "Details for a particular update that happened to a share",
            "required": [
                "id",
                "timestamp",
                "user",
                "notes",
                "numberOfAddedUsers",
                "firstAddedUser",
                "sharedToAll",
                "numberOfRemovedUsers",
                "firstRemovedUser",
                "numberOfAddedGroups",
                "firstAddedGroup",
                "numberOfRemovedGroups",
                "firstRemovedGroup"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The id of the update",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The timestamp of when the update happened",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user that initiated this share update"
                },
                "notes": {
                    "description": "The notes associated with this share update",
                    "type": "string"
                },
                "numberOfAddedUsers": {
                    "format": "int32",
                    "description": "The number of users that were added to this share as part of this update",
                    "type": "integer"
                },
                "firstAddedUser": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The first of the users that were added to this share as part of this update"
                },
                "sharedToAll": {
                    "description": "Whether this share was shared to all as part of this update",
                    "type": "boolean"
                },
                "numberOfRemovedUsers": {
                    "format": "int32",
                    "description": "The number of users that were removed from this share as part of this update",
                    "type": "integer"
                },
                "firstRemovedUser": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The first of the users that were removed from this share as part of this update"
                },
                "numberOfAddedGroups": {
                    "format": "int32",
                    "description": "The number of groups that were added to this share as part of this update",
                    "type": "integer"
                },
                "firstAddedGroup": {
                    "$ref": "#/definitions/GroupSummary",
                    "description": "The first of the groups that were added to this share as part of this update"
                },
                "numberOfRemovedGroups": {
                    "format": "int32",
                    "description": "The number of groups that were removed from this share as part of this update",
                    "type": "integer"
                },
                "firstRemovedGroup": {
                    "$ref": "#/definitions/GroupSummary",
                    "description": "The first of the groups that were removed from this share as part of this update"
                }
            }
        },
        "CreateShareUpdate": {
            "description": "The details required to create a new share update",
            "required": [
                "notifyAddedRecipients",
                "notifyRemovedRecipients",
                "notifyUnchangedRecipients"
            ],
            "type": "object",
            "properties": {
                "notes": {
                    "description": "The notes associated with this share update",
                    "type": "string"
                },
                "emailAddressesToAdd": {
                    "description": "Email addresses of new users to share this shareable item with",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIdsToAdd": {
                    "description": "Ids of new users to share this shareable item with",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "groupIdsToAdd": {
                    "description": "Ids of new groups to share this shareable item with",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "shareToAll": {
                    "description": "Whether to share this shareable item with all users",
                    "type": "boolean"
                },
                "notifyAddedRecipients": {
                    "description": "Whether to notify new recipients that the shareable item has now been shared with them",
                    "type": "boolean"
                },
                "addedRecipientNotificationMessage": {
                    "description": "If added recipients are to be notified, this is the message to be sent to them.\r\nThe URL of the view of the shareable item (specified when the shareable item was created)\r\nwill be added to the notification after this message.",
                    "type": "string"
                },
                "emailAddressesToRemove": {
                    "description": "Email addresses of users that this shareable item has already been shared with that should be removed from the share",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userIdsToRemove": {
                    "description": "Ids of users that this shareable item has already been shared with that should be removed from the share",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "groupIdsToRemove": {
                    "description": "Ids of groups that this shareable item has already been shared with that should be removed from the share",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "notifyRemovedRecipients": {
                    "description": "Whether to notify existing recipients that the share has been updated",
                    "type": "boolean"
                },
                "removedRecipientNotificationMessage": {
                    "description": "If removed recipients are to be notified, this is the message to be sent to them.\r\nThe URL of the view of the shareable item (specified when the shareable item was created)\r\nwill be added to the notification after this message.",
                    "type": "string"
                },
                "notifyUnchangedRecipients": {
                    "description": "Whether to notify recipients that the shareable item is shared with, but that haven't \r\nbeen added or removed that the share has been updated",
                    "type": "boolean"
                },
                "unchangedRecipientNotificationMessage": {
                    "description": "If unchanged recipients are to be notified, this is the message to be sent to them.\r\nThe URL of the view of the shareable item (specified when the shareable item was created)\r\nwill be added to the notification after this message.",
                    "type": "string"
                }
            }
        },
        "CreatedShareUpdateDetail": {
            "description": "Details about the creation of a new share update",
            "required": [
                "shareUpdate",
                "invalidUsersToAdd",
                "invalidUsersToRemove"
            ],
            "type": "object",
            "properties": {
                "shareUpdate": {
                    "$ref": "#/definitions/ShareUpdate",
                    "description": "The details of the newly created share update"
                },
                "invalidUsersToAdd": {
                    "description": "Details of the users that were specified to be added to the\r\nshare in the update, but that were not valid users to be shared to",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InvalidToShareUserDisplayDetails"
                    }
                },
                "invalidUsersToRemove": {
                    "description": "Details of the users that were specified to be removed from the\r\nshare in the update, but that were not valid users to be removed from\r\nsharing the shareable item",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InvalidToShareUserDisplayDetails"
                    }
                }
            }
        },
        "InvalidToShareUserDisplayDetails": {
            "description": "Display details for a user that was invalid for being added or removed\r\nfrom sharing a particular shareable item",
            "required": [
                "reason",
                "id",
                "username",
                "firstname",
                "surname",
                "emailAddress"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "description": "The reason why the user was not valid for updating the share",
                    "enum": [
                        "ShareableAlreadySharedToUser",
                        "ShareableNotSharedToUser",
                        "ShareableOwnedByUser",
                        "InvalidEmailDomain"
                    ],
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "description": "The user's id",
                    "type": "integer"
                },
                "username": {
                    "description": "The user's username",
                    "type": "string"
                },
                "firstname": {
                    "description": "The user's first name",
                    "type": "string"
                },
                "surname": {
                    "description": "The user's surname",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The user's email address",
                    "type": "string"
                }
            }
        },
        "PagedResults[ResourceCategorySummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceCategorySummary"
                    }
                }
            }
        },
        "ResourceCategorySummary": {
            "description": "The summary information for a particular category of static resources",
            "required": [
                "name",
                "description"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the resource category",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the resource category",
                    "type": "string"
                }
            }
        },
        "ResourceCategoryDetails": {
            "description": "The details of a particular category of static resources",
            "required": [
                "name",
                "description"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the resource category",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the resource category",
                    "type": "string"
                }
            }
        },
        "PagedResults[ResourceSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSummary"
                    }
                }
            }
        },
        "ResourceSummary": {
            "description": "The summary information for a particular static resource",
            "required": [
                "name",
                "id",
                "size",
                "lastModified",
                "url"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the resource",
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the resource",
                    "type": "integer"
                },
                "size": {
                    "format": "int64",
                    "description": "The size of the resource in bytes",
                    "type": "integer"
                },
                "lastModified": {
                    "format": "date-time",
                    "description": "The datetime that the resource was last modified",
                    "type": "string"
                },
                "url": {
                    "description": "The API URL to access the content of the resource",
                    "type": "string"
                }
            }
        },
        "ResourceDetails": {
            "description": "The details of a particular static resource",
            "required": [
                "name",
                "id",
                "size",
                "lastModified",
                "url"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the resource",
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the resource",
                    "type": "integer"
                },
                "size": {
                    "format": "int64",
                    "description": "The size of the resource in bytes",
                    "type": "integer"
                },
                "lastModified": {
                    "format": "date-time",
                    "description": "The datetime that the resource was last modified",
                    "type": "string"
                },
                "url": {
                    "description": "The API URL to access the content of the resource",
                    "type": "string"
                }
            }
        },
        "PagedResults[TeamSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamSummary"
                    }
                }
            }
        },
        "CreateTeamDetails": {
            "description": "Details to create a team with",
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name for the new team",
                    "type": "string"
                }
            }
        },
        "TeamDetail": {
            "description": "Details for a group",
            "required": [
                "id",
                "name"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The team's id",
                    "type": "integer"
                },
                "name": {
                    "description": "The team's name",
                    "type": "string"
                }
            }
        },
        "UpdateTeamDetails": {
            "description": "Details to update a team with",
            "type": "object",
            "properties": {
                "name": {
                    "description": "When specified, the new name for the team",
                    "type": "string"
                }
            }
        },
        "CreateTelemetryStateDetails": {
            "required": [
                "username"
            ],
            "type": "object",
            "properties": {
                "username": {
                    "description": "The username for this telemetry state",
                    "type": "string"
                }
            }
        },
        "TelemetryState": {
            "required": [
                "id",
                "optState",
                "logins"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id for this telemetry state",
                    "type": "string"
                },
                "optState": {
                    "description": "The opt state for this telemetry state",
                    "enum": [
                        "NotOpted",
                        "OptedOut",
                        "OptedIn",
                        "ForcedOut",
                        "ForcedIn"
                    ],
                    "type": "string"
                },
                "logins": {
                    "format": "int64",
                    "description": "The number of logins for this telemetry state",
                    "type": "integer"
                }
            }
        },
        "UpdateTelemetryStateDetails": {
            "required": [
                "optState"
            ],
            "type": "object",
            "properties": {
                "optState": {
                    "description": "The optState for this telemetry state",
                    "enum": [
                        "NotOpted",
                        "OptedOut",
                        "OptedIn",
                        "ForcedOut",
                        "ForcedIn"
                    ],
                    "type": "string"
                }
            }
        },
        "TelemetrySession": {
            "required": [
                "id",
                "clientType"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The Id for this telemetry session",
                    "type": "string"
                },
                "apiVersion": {
                    "description": "The API version for this telemetry session",
                    "type": "string"
                },
                "clientType": {
                    "description": "The client type for this telemetry session",
                    "enum": [
                        "Orbit"
                    ],
                    "type": "string"
                },
                "clientVersion": {
                    "description": "The client version for this telemetry session",
                    "type": "string"
                },
                "sessionStart": {
                    "format": "date-time",
                    "description": "The start time for this telemetry session",
                    "type": "string"
                },
                "sessionEnd": {
                    "format": "date-time",
                    "description": "The end time for this telemetry session",
                    "type": "string"
                },
                "lastSessionAction": {
                    "format": "date-time",
                    "description": "The last action time for this telemetry session",
                    "type": "string"
                },
                "userAgentDetails": {
                    "description": "The user agent details for this telemetry session",
                    "type": "string"
                }
            }
        },
        "CreateTelemetrySessionDetails": {
            "required": [
                "clientType"
            ],
            "type": "object",
            "properties": {
                "clientType": {
                    "description": "The client type for this telemetry session",
                    "enum": [
                        "Orbit"
                    ],
                    "type": "string"
                },
                "clientVersion": {
                    "description": "The client version for this telemetry session",
                    "type": "string"
                },
                "userAgentDetails": {
                    "description": "The user agent details for this telemetry session",
                    "type": "string"
                }
            }
        },
        "UpdateTelemetrySessionDetails": {
            "type": "object",
            "properties": {
                "bugReports": {
                    "description": "The details of a bug received in this telemetry session",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TelemetryBugReport"
                    }
                },
                "sessionEnd": {
                    "format": "date-time",
                    "description": "The end time for this telemetry session",
                    "type": "string"
                }
            }
        },
        "TelemetryBugReport": {
            "type": "object",
            "properties": {
                "occurred": {
                    "format": "date-time",
                    "description": "The time this bug occurred",
                    "type": "string"
                },
                "errorMessage": {
                    "description": "The error message for the bug",
                    "type": "string"
                },
                "stackTrace": {
                    "description": "The stack trace collected from the bug",
                    "type": "string"
                }
            }
        },
        "TemporaryFile": {
            "description": "Details of a temporary file",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the temporary file",
                    "type": "string"
                }
            }
        },
        "TemporaryFilePart": {
            "description": "Details of a temporary file part",
            "required": [
                "id",
                "partNumber",
                "temporaryFileCreated"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The id of the temporary file that this part is for",
                    "type": "string"
                },
                "partNumber": {
                    "format": "int32",
                    "description": "The number of this part of the temporary file",
                    "type": "integer"
                },
                "temporaryFileCreated": {
                    "description": "Whether the specified temporary file has been created from all the given parts or not.\r\nIf this is the case then the parts will no longer exist separately and will have been\r\ncombined into the temporary file.",
                    "type": "boolean"
                }
            }
        },
        "Theme": {
            "required": [
                "id",
                "name",
                "default",
                "systemThemeId",
                "published",
                "definition",
                "logoId"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The theme's id",
                    "type": "integer"
                },
                "name": {
                    "description": "The name of the theme",
                    "type": "string"
                },
                "default": {
                    "description": "If this is the default theme to use",
                    "type": "boolean"
                },
                "systemThemeId": {
                    "format": "int32",
                    "description": "If this is a system theme - the Id of the theme",
                    "type": "integer"
                },
                "published": {
                    "description": "If this theme has been published",
                    "type": "boolean"
                },
                "definition": {
                    "$ref": "#/definitions/ThemeDefinition",
                    "description": "The definition used to define the theme colours, fonts etc"
                },
                "logoId": {
                    "format": "int32",
                    "description": "The Id of the Logo to use",
                    "type": "integer"
                }
            }
        },
        "ThemeDefinition": {
            "type": "object",
            "properties": {
                "visualisation": {
                    "$ref": "#/definitions/Visualisation",
                    "description": "The visualisation definition of the theme"
                }
            }
        },
        "Visualisation": {
            "required": [
                "titleColour",
                "noteColour",
                "labelColour",
                "visualisationColours",
                "highlightColours"
            ],
            "type": "object",
            "properties": {
                "titleColour": {
                    "description": "The hex colour to use when displaying a title",
                    "type": "string"
                },
                "titleFont": {
                    "description": "The font to use when displaying a title",
                    "type": "string"
                },
                "noteColour": {
                    "description": "The hex colour to use when displaying a description",
                    "type": "string"
                },
                "noteFont": {
                    "description": "The font to use when displaying a note",
                    "type": "string"
                },
                "labelColour": {
                    "description": "The hex colour to use when displaying a label",
                    "type": "string"
                },
                "visualisationColours": {
                    "description": "The hex colour(s) to use when displaying a visualisation",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "highlightColours": {
                    "description": "The hex colour(s) to use when displaying a highlight",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CreateUpdateTheme": {
            "required": [
                "name",
                "default",
                "published",
                "definition",
                "logoId"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the theme",
                    "type": "string"
                },
                "default": {
                    "description": "If this is the default theme to use",
                    "type": "boolean"
                },
                "published": {
                    "description": "If this theme is published",
                    "type": "boolean"
                },
                "definition": {
                    "$ref": "#/definitions/ThemeDefinition",
                    "description": "The definition used to define the theme colours, fonts etc"
                },
                "logoId": {
                    "format": "int32",
                    "description": "The Id of the Logo to use",
                    "type": "integer"
                }
            }
        },
        "ThemeUsage": {
            "type": "object",
            "properties": {
                "numberOfDashboardsSetToDefaultTheme": {
                    "format": "int32",
                    "description": "The number of dashboards set to use the default theme in the dataview",
                    "type": "integer"
                },
                "themeUsageSummaries": {
                    "description": "A list of summaries of the usage for each theme in the dataview",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ThemeUsageSummary"
                    }
                }
            }
        },
        "ThemeUsageSummary": {
            "type": "object",
            "properties": {
                "themeId": {
                    "format": "int32",
                    "description": "The theme Id the summary information is for",
                    "type": "integer"
                },
                "numberOfDashboards": {
                    "format": "int32",
                    "description": "The number of dashboards using this theme",
                    "type": "integer"
                }
            }
        },
        "PagedResults[UserRegistrationRequestSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserRegistrationRequestSummary"
                    }
                }
            }
        },
        "UserRegistrationRequestSummary": {
            "description": "Summary of a user registration request",
            "required": [
                "token",
                "username",
                "emailAddress",
                "creationDate"
            ],
            "type": "object",
            "properties": {
                "token": {
                    "format": "uuid",
                    "description": "The token for this registration request",
                    "type": "string"
                },
                "username": {
                    "description": "The requested username",
                    "type": "string"
                },
                "firstname": {
                    "description": "The requested first name",
                    "type": "string"
                },
                "surname": {
                    "description": "The requested surname",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The requested email address",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date and time this request was created",
                    "type": "string"
                },
                "confirmedDate": {
                    "format": "date-time",
                    "description": "The date and time this request was confirmed",
                    "type": "string"
                },
                "expiredDate": {
                    "format": "date-time",
                    "description": "The date and time this request expired",
                    "type": "string"
                }
            }
        },
        "CreateUserRegistrationRequest": {
            "description": "The parameters needed to create a new user registration request",
            "required": [
                "username",
                "emailAddress",
                "password"
            ],
            "type": "object",
            "properties": {
                "username": {
                    "description": "The username for the new user to be created with",
                    "type": "string"
                },
                "firstname": {
                    "description": "The first name for the new user",
                    "type": "string"
                },
                "surname": {
                    "description": "The surname for the new user",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The email address for the new user",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the new user",
                    "type": "string"
                },
                "confirmRegistrationUrl": {
                    "description": "A URL to send in the notification to the user to allow them to confirm their registration.\r\n\r\nIf the URL is specified, it can use the {token} parameter:\r\n\r\nhttp://www.example.com/register/{token}\r\n\r\nIf present, this parameter will be replaced with the token of the registration request, which will be needed when confirming the registration",
                    "type": "string"
                }
            }
        },
        "UserRegistrationRequestDetail": {
            "description": "Details of a user registration request",
            "required": [
                "hasNotificationBeenSent",
                "token",
                "username",
                "emailAddress",
                "creationDate"
            ],
            "type": "object",
            "properties": {
                "confirmRegistrationUrl": {
                    "description": "The URL sent in the notification to the user to allow them to confirm their registration",
                    "type": "string"
                },
                "hasNotificationBeenSent": {
                    "description": "Whether the notification has been sent to the user or not.",
                    "type": "boolean"
                },
                "token": {
                    "format": "uuid",
                    "description": "The token for this registration request",
                    "type": "string"
                },
                "username": {
                    "description": "The requested username",
                    "type": "string"
                },
                "firstname": {
                    "description": "The requested first name",
                    "type": "string"
                },
                "surname": {
                    "description": "The requested surname",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The requested email address",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date and time this request was created",
                    "type": "string"
                },
                "confirmedDate": {
                    "format": "date-time",
                    "description": "The date and time this request was confirmed",
                    "type": "string"
                },
                "expiredDate": {
                    "format": "date-time",
                    "description": "The date and time this request expired",
                    "type": "string"
                }
            }
        },
        "CreateResetPasswordRequest": {
            "description": "The parameters needed to create a new reset password request",
            "required": [
                "emailAddress"
            ],
            "type": "object",
            "properties": {
                "emailAddress": {
                    "description": "The email address for the user resetting their password",
                    "type": "string"
                },
                "resetPasswordUrl": {
                    "description": "A URL to send in the notification to the user to allow them to confirm they want to reset their password.\r\n\r\nIf the URL is specified, it can use the {token}, {emailAddress} and {username} parameters:\r\n\r\nhttp://www.example.com/resetPassword/{token}?email={emailAddress}&amp;username={username}\r\n\r\nIf present, the {token} parameter will be replaced with the token of the password reset request, which\r\nwill be needed when performing the reset.  The {emailAddress} parameter will be replaced with the email address\r\nof the user resetting their password.  The {username} parameter will be replaced with the username of the\r\nuser resetting their password.",
                    "type": "string"
                }
            }
        },
        "ResetPasswordRequestDetail": {
            "description": "Details of a reset password request",
            "required": [
                "hasNotificationBeenSent",
                "token",
                "emailAddress",
                "creationDate"
            ],
            "type": "object",
            "properties": {
                "resetPasswordUrl": {
                    "description": "The URL sent in the notification to the user to allow them to confirm they want to reset their password.",
                    "type": "string"
                },
                "hasNotificationBeenSent": {
                    "description": "Whether the notification has been sent to the user or not.",
                    "type": "boolean"
                },
                "token": {
                    "format": "uuid",
                    "description": "The token for this reset password request",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The email address of the user requesting the reset password",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date and time this request was created",
                    "type": "string"
                },
                "confirmedDate": {
                    "format": "date-time",
                    "description": "The date and time this request was confirmed",
                    "type": "string"
                },
                "expiredDate": {
                    "format": "date-time",
                    "description": "The date and time this request expired",
                    "type": "string"
                }
            }
        },
        "ConfirmResetPasswordRequest": {
            "description": "The parameters needed to confirm an existing reset password request",
            "required": [
                "emailAddress",
                "newPassword"
            ],
            "type": "object",
            "properties": {
                "emailAddress": {
                    "description": "The email address for the user resetting their password",
                    "type": "string"
                },
                "newPassword": {
                    "description": "The new password to use",
                    "type": "string"
                }
            }
        },
        "UserConfigurationDetails": {
            "description": "The details of the user configuration",
            "required": [
                "passwordRequirements",
                "emailRequirements"
            ],
            "type": "object",
            "properties": {
                "passwordRequirements": {
                    "$ref": "#/definitions/PasswordRequirements",
                    "description": "The requirements for new passwords"
                },
                "emailRequirements": {
                    "$ref": "#/definitions/EmailRequirements",
                    "description": "The requirements for email addresses when creating users or sharing to users"
                }
            }
        },
        "PasswordRequirements": {
            "description": "The details of the password requirements within the user configuration",
            "required": [
                "minimumPasswordLength",
                "minimumNumberOfDigitsInPassword",
                "minimumNumberOfLettersInPassword",
                "minimumNumberOfLowercaseLettersInPassword",
                "minimumNumberOfUppercaseLettersInPassword",
                "minimumNumberOfSymbolsInPassword"
            ],
            "type": "object",
            "properties": {
                "minimumPasswordLength": {
                    "format": "int32",
                    "description": "The minimum number of characters required for a new password",
                    "type": "integer"
                },
                "minimumNumberOfDigitsInPassword": {
                    "format": "int32",
                    "description": "The minimum number of numeric digit characters required in a new password",
                    "type": "integer"
                },
                "minimumNumberOfLettersInPassword": {
                    "format": "int32",
                    "description": "The minimum number of alphabetic characters required in a new password",
                    "type": "integer"
                },
                "minimumNumberOfLowercaseLettersInPassword": {
                    "format": "int32",
                    "description": "The minimum number of lowercase characters required in a new password",
                    "type": "integer"
                },
                "minimumNumberOfUppercaseLettersInPassword": {
                    "format": "int32",
                    "description": "The minimum number of uppercase characters required in a new password",
                    "type": "integer"
                },
                "minimumNumberOfSymbolsInPassword": {
                    "format": "int32",
                    "description": "The minimum number of symbols (i.e. not digits or letters) required in a new password",
                    "type": "integer"
                }
            }
        },
        "EmailRequirements": {
            "description": "The details of the email requirements within the user configuration",
            "required": [
                "allowUnrestrictedEmailDomains",
                "restrictedEmailDomains"
            ],
            "type": "object",
            "properties": {
                "allowUnrestrictedEmailDomains": {
                    "description": "Whether the domains of email addresses used to create users or share to users will\r\nbe checked against the list of RestrictedEmailDomains",
                    "type": "boolean"
                },
                "restrictedEmailDomains": {
                    "description": "The list of valid email domains available for creating user or sharing with users\r\nIf AllowUnrestrictedEmailDomains is false and an attempt is made to create a user\r\nor share to a user with an email address that has a domain not in the list then an\r\nerror will be returned.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CreateUserDetails": {
            "description": "Details to create a user with",
            "required": [
                "username",
                "password"
            ],
            "type": "object",
            "properties": {
                "username": {
                    "description": "The username for the new user",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the new user",
                    "type": "string"
                },
                "firstname": {
                    "description": "When specified, the first name for the new user",
                    "type": "string"
                },
                "surname": {
                    "description": "When specified, the surname for the new user",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "When specified, the email address for the new user",
                    "type": "string"
                },
                "groupId": {
                    "format": "int32",
                    "description": "When specified, the group id for the new user",
                    "type": "integer"
                }
            }
        },
        "UserDetail": {
            "description": "Details for a user",
            "required": [
                "licence",
                "id",
                "username",
                "groupId",
                "teams",
                "firstname",
                "surname",
                "emailAddress",
                "userDisabledDate"
            ],
            "type": "object",
            "properties": {
                "licence": {
                    "$ref": "#/definitions/Licence",
                    "description": "Licence details for the user"
                },
                "id": {
                    "format": "int32",
                    "description": "The user's id",
                    "type": "integer"
                },
                "username": {
                    "description": "The user's username",
                    "type": "string"
                },
                "groupId": {
                    "format": "int32",
                    "description": "The id of the group the user is in (or null if they aren't allocated to a group)",
                    "type": "integer"
                },
                "teams": {
                    "description": "The teams that the user is a member of",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamSummary"
                    }
                },
                "firstname": {
                    "description": "The user's first name",
                    "type": "string"
                },
                "surname": {
                    "description": "The user's surname",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The user's email address",
                    "type": "string"
                },
                "userDisabledDate": {
                    "format": "date-time",
                    "description": "The date on which the user was or will become disabled,\r\nor null if the user has not been disabled",
                    "type": "string"
                }
            }
        },
        "UpdateUserDetails": {
            "description": "Details to update a user with",
            "type": "object",
            "properties": {
                "firstname": {
                    "description": "When specified, the new first name for the user",
                    "type": "string"
                },
                "surname": {
                    "description": "When specified, the new surname for the user",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "When specified, the new email address for the user",
                    "type": "string"
                }
            }
        },
        "ChangePasswordDetails": {
            "description": "Details to change a user's password with",
            "required": [
                "currentPassword",
                "newPassword"
            ],
            "type": "object",
            "properties": {
                "currentPassword": {
                    "description": "The user's current password",
                    "type": "string"
                },
                "newPassword": {
                    "description": "The new password to use",
                    "type": "string"
                }
            }
        },
        "PagedResults[UserLogin]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserLogin"
                    }
                }
            }
        },
        "UserLogin": {
            "description": "The last login details for the user",
            "required": [
                "userId",
                "username",
                "systemName",
                "clientType",
                "timestamp"
            ],
            "type": "object",
            "properties": {
                "userId": {
                    "format": "int32",
                    "description": "The user's id",
                    "type": "integer"
                },
                "username": {
                    "description": "The user's name",
                    "type": "string"
                },
                "systemName": {
                    "description": "The system name logged in to",
                    "type": "string"
                },
                "clientType": {
                    "description": "The Client Type logged in to",
                    "type": "string"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "The DateTime of the users last login",
                    "type": "string"
                }
            }
        },
        "PagedResults[UserCollectionSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserCollectionSummary"
                    }
                }
            }
        },
        "UserCollectionSummary": {
            "description": "Summary details for a collection viewable by a given user",
            "required": [
                "viewingUsername",
                "status",
                "sharedToMe",
                "sharedByMe",
                "id",
                "title",
                "description",
                "creationDate",
                "owner",
                "deletionDate",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "shareId",
                "numberOfHits",
                "systemName"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this collection",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the collection",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived"
                    ],
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this collection has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this collection has been shared to others by the given user",
                    "type": "boolean"
                },
                "id": {
                    "format": "int32",
                    "description": "The collection's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the collection",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the collection",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the collection was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that created this collection"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the collection was deleted, or null if it has not been deleted",
                    "type": "string"
                },
                "numberOfParts": {
                    "format": "int32",
                    "description": "The number of parts within this collection",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this collection has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this collection has been shared with all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this collection, or null if the\r\ncollection has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this collection",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this collection has been created against",
                    "type": "string"
                }
            }
        },
        "ModifyItems[ModifyUserCollection]": {
            "description": "A set of items to modify",
            "required": [
                "returnModifiedItem",
                "list"
            ],
            "type": "object",
            "properties": {
                "returnModifiedItem": {
                    "description": "Whether to return the modified item in the results",
                    "type": "boolean"
                },
                "list": {
                    "description": "The list of items to modify",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifyUserCollection"
                    }
                }
            }
        },
        "ModifyUserCollection": {
            "description": "Details used to modify a collection for a given user",
            "required": [
                "collection",
                "id",
                "modificationType"
            ],
            "type": "object",
            "properties": {
                "collection": {
                    "$ref": "#/definitions/ModifyUserCollectionDetail",
                    "description": "The collection to modify"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the item to update",
                    "type": "integer"
                },
                "modificationType": {
                    "description": "The type of modification to perform.  If the type is delete or undelete, any other specified item details will be ignored",
                    "enum": [
                        "Modify",
                        "Delete",
                        "Undelete"
                    ],
                    "type": "string"
                }
            }
        },
        "ModifyUserCollectionDetail": {
            "description": "Details used to modify an existing collection for a given user",
            "type": "object",
            "properties": {
                "status": {
                    "description": "The status of the collection",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived"
                    ],
                    "type": "string"
                },
                "title": {
                    "description": "The title of the collection",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the collection",
                    "type": "string"
                },
                "filePath": {
                    "description": "The path to the file that contains the parts of this collection",
                    "type": "string"
                }
            }
        },
        "PagedResults[ModifyUserCollectionDetailResults]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifyUserCollectionDetailResults"
                    }
                }
            }
        },
        "ModifyUserCollectionDetailResults": {
            "description": "Details used to modify a collection for a given user",
            "required": [
                "id",
                "succeeded",
                "status",
                "statusCode"
            ],
            "type": "object",
            "properties": {
                "collection": {
                    "$ref": "#/definitions/UserCollectionDetail",
                    "description": "The details of the modified collection"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the updated item",
                    "type": "integer"
                },
                "succeeded": {
                    "description": "Whether the modification succeeded or not",
                    "type": "boolean"
                },
                "status": {
                    "description": "A status message associated with the modification",
                    "type": "string"
                },
                "statusCode": {
                    "format": "int32",
                    "description": "A status code associated with the modification",
                    "type": "integer"
                }
            }
        },
        "UserCollectionDetail": {
            "description": "Details for a collection viewable by a given user",
            "required": [
                "viewingUsername",
                "status",
                "sharedToMe",
                "sharedByMe",
                "id",
                "owner",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "shareId",
                "numberOfHits",
                "systemName",
                "title",
                "description",
                "creationDate",
                "filePath"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this collection",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the collection",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived"
                    ],
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this collection has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this collection has been shared to others by the given user",
                    "type": "boolean"
                },
                "id": {
                    "format": "int32",
                    "description": "The collection's id",
                    "type": "integer"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that created this collection"
                },
                "numberOfParts": {
                    "format": "int32",
                    "description": "The number of parts within this collection",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this collection has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this collection has been shared with all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this collection, or null if the\r\ncollection has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this collection",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this collection has been created against",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the collection",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the collection",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the collection was created",
                    "type": "string"
                },
                "filePath": {
                    "description": "The path to the file that contains the parts of this collection",
                    "type": "string"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the collection was deleted, or null if it has not been deleted",
                    "type": "string"
                }
            }
        },
        "PagedResults[UserAudienceSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserAudienceSummary"
                    }
                }
            }
        },
        "UserAudienceSummary": {
            "description": "Summary details for an audience viewable by a given user",
            "required": [
                "viewingUsername",
                "status",
                "sharedToMe",
                "sharedByMe",
                "id",
                "title",
                "description",
                "creationDate",
                "owner",
                "resolveTableName",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "numberOfHits",
                "systemName",
                "lastUpdatedUser",
                "lastUpdatedDate",
                "lastUpdateId"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this audience",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the audience",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived"
                    ],
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this audience has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this audience has been shared to others by the given user",
                    "type": "boolean"
                },
                "id": {
                    "format": "int32",
                    "description": "The audience's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the audience",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the audience was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this audience"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the audience was deleted, or null if it has not been deleted",
                    "type": "string"
                },
                "resolveTableName": {
                    "description": "The FastStats table that the audience is defined against",
                    "type": "string"
                },
                "resolveTableNettCount": {
                    "format": "int64",
                    "description": "If the audience has been counted, the latest overall count for the resolve table",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this audience has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether the audience has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this audience, or null if the\r\naudience has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this audience",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this audience has been created against",
                    "type": "string"
                },
                "lastUpdatedUser": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that last updated this audience"
                },
                "lastUpdatedDate": {
                    "format": "date-time",
                    "description": "The date the audience was last updated",
                    "type": "string"
                },
                "lastUpdateId": {
                    "format": "int32",
                    "description": "The id of the last update for this audience",
                    "type": "integer"
                }
            }
        },
        "ModifyItems[ModifyUserAudience]": {
            "description": "A set of items to modify",
            "required": [
                "returnModifiedItem",
                "list"
            ],
            "type": "object",
            "properties": {
                "returnModifiedItem": {
                    "description": "Whether to return the modified item in the results",
                    "type": "boolean"
                },
                "list": {
                    "description": "The list of items to modify",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifyUserAudience"
                    }
                }
            }
        },
        "ModifyUserAudience": {
            "description": "Details used to modify an audience for a given user",
            "required": [
                "audience",
                "id",
                "modificationType"
            ],
            "type": "object",
            "properties": {
                "audience": {
                    "$ref": "#/definitions/ModifyUserAudienceDetail",
                    "description": "The audience to modify"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the item to update",
                    "type": "integer"
                },
                "modificationType": {
                    "description": "The type of modification to perform.  If the type is delete or undelete, any other specified item details will be ignored",
                    "enum": [
                        "Modify",
                        "Delete",
                        "Undelete"
                    ],
                    "type": "string"
                }
            }
        },
        "ModifyUserAudienceDetail": {
            "description": "Details used to modify an existing audience for a given user",
            "type": "object",
            "properties": {
                "status": {
                    "description": "The status of the audience",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived"
                    ],
                    "type": "string"
                },
                "title": {
                    "description": "The title of the audience",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience",
                    "type": "string"
                },
                "briefText": {
                    "description": "Notes associated with the audience",
                    "type": "string"
                },
                "excludeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to exclude from this audience"
                },
                "includeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to start with when defining this audience"
                },
                "bodyQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records that will make up this audience, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified)"
                },
                "selectionModifiers": {
                    "$ref": "#/definitions/SelectionModifiers",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                }
            }
        },
        "PagedResults[ModifyUserAudienceDetailResults]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifyUserAudienceDetailResults"
                    }
                }
            }
        },
        "ModifyUserAudienceDetailResults": {
            "description": "Details used to modify an audience for a given user",
            "required": [
                "id",
                "succeeded",
                "status",
                "statusCode"
            ],
            "type": "object",
            "properties": {
                "audience": {
                    "$ref": "#/definitions/UserAudienceDetail",
                    "description": "The details of the modified audience"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the updated item",
                    "type": "integer"
                },
                "succeeded": {
                    "description": "Whether the modification succeeded or not",
                    "type": "boolean"
                },
                "status": {
                    "description": "A status message associated with the modification",
                    "type": "string"
                },
                "statusCode": {
                    "format": "int32",
                    "description": "A status code associated with the modification",
                    "type": "integer"
                }
            }
        },
        "UserAudienceDetail": {
            "description": "Details for an audience viewable by a given user",
            "required": [
                "viewingUsername",
                "status",
                "sharedToMe",
                "sharedByMe",
                "id",
                "title",
                "description",
                "creationDate",
                "owner",
                "resolveTableName",
                "numberOfUsersSharedWith",
                "sharedToAll",
                "numberOfHits",
                "systemName",
                "lastUpdatedUser",
                "lastUpdatedDate",
                "lastUpdateId"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this audience",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the audience",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived"
                    ],
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this audience has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this audience has been shared to others by the given user",
                    "type": "boolean"
                },
                "briefText": {
                    "description": "Notes associated with the audience",
                    "type": "string"
                },
                "excludeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to exclude from this audience"
                },
                "includeQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records to start with when defining this audience"
                },
                "bodyQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The query rule that defines the records that will make up this audience, after starting with the records defined by the include query (if specified) and then removing the records defined by the exclude query (if specified)"
                },
                "selectionModifiers": {
                    "$ref": "#/definitions/SelectionModifiers",
                    "description": "A definition of how to limit the number of records selected in the nett query built from the exclude, include and body queries"
                },
                "queriesLookup": {
                    "$ref": "#/definitions/SystemLookup",
                    "description": "A set of description lookups for variables used in the exclude, include and body queries"
                },
                "lastResult": {
                    "$ref": "#/definitions/AudienceResultDetail",
                    "description": "If this audience has been calculated, the last calculation result"
                },
                "id": {
                    "format": "int32",
                    "description": "The audience's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the audience",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the audience",
                    "type": "string"
                },
                "creationDate": {
                    "format": "date-time",
                    "description": "The date the audience was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this audience"
                },
                "deletionDate": {
                    "format": "date-time",
                    "description": "The date the audience was deleted, or null if it has not been deleted",
                    "type": "string"
                },
                "resolveTableName": {
                    "description": "The FastStats table that the audience is defined against",
                    "type": "string"
                },
                "resolveTableNettCount": {
                    "format": "int64",
                    "description": "If the audience has been counted, the latest overall count for the resolve table",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this audience has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether the audience has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this audience, or null if the\r\naudience has not yet been shared",
                    "type": "integer"
                },
                "numberOfHits": {
                    "format": "int32",
                    "description": "The number of hits associated with this audience",
                    "type": "integer"
                },
                "systemName": {
                    "description": "The FastStats system that this audience has been created against",
                    "type": "string"
                },
                "lastUpdatedUser": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that last updated this audience"
                },
                "lastUpdatedDate": {
                    "format": "date-time",
                    "description": "The date the audience was last updated",
                    "type": "string"
                },
                "lastUpdateId": {
                    "format": "int32",
                    "description": "The id of the last update for this audience",
                    "type": "integer"
                }
            }
        },
        "UserDashboardDetail": {
            "description": "Details for an dashboard viewable by a given user",
            "required": [
                "viewingUsername",
                "sharedToMe",
                "sharedByMe",
                "id",
                "title",
                "systemName",
                "owner",
                "lastUpdateId",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this dashboard",
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this dashboard has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this dashboard has been shared to others by the given user",
                    "type": "boolean"
                },
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The base query for the dashboard"
                },
                "dashboardItems": {
                    "description": "The items that are contained within the dashboard",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardContentItem"
                    }
                },
                "baseQueryLookup": {
                    "$ref": "#/definitions/SystemLookup",
                    "description": "A set of description lookups for variables used in the exclude, include and body queries"
                },
                "themeId": {
                    "format": "int32",
                    "description": "The themeId of the dashboard",
                    "type": "integer"
                },
                "logoId": {
                    "format": "int32",
                    "description": "The logoId of the dashboard",
                    "type": "integer"
                },
                "id": {
                    "format": "int32",
                    "description": "The dashboard's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the dashboard",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the dashboard",
                    "type": "string"
                },
                "systemName": {
                    "description": "The FastStats system that this dashboard has been created against",
                    "type": "string"
                },
                "createdOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this dashboard"
                },
                "lastUpdatedOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was last updated",
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user details of the last update for this dashboard"
                },
                "lastUpdateId": {
                    "format": "int32",
                    "description": "The id of the last update for this dashboard",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this dashboard has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this dashboard has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this dashboard, or null if the\r\ndashboard has not yet been shared",
                    "type": "integer"
                },
                "deletedOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was deleted, or null if it has not been deleted",
                    "type": "string"
                }
            }
        },
        "PagedResults[UserDashboardSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserDashboardSummary"
                    }
                }
            }
        },
        "UserDashboardSummary": {
            "description": "Summary details for a dashboard viewable by a given user",
            "required": [
                "viewingUsername",
                "status",
                "sharedToMe",
                "sharedByMe",
                "id",
                "title",
                "systemName",
                "owner",
                "lastUpdateId",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this dashboard",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the dashboard",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived",
                        "Home"
                    ],
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this dashboard has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this dashboard has been shared to others by the given user",
                    "type": "boolean"
                },
                "id": {
                    "format": "int32",
                    "description": "The dashboard's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the dashboard",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the dashboard",
                    "type": "string"
                },
                "systemName": {
                    "description": "The FastStats system that this dashboard has been created against",
                    "type": "string"
                },
                "createdOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was created",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this dashboard"
                },
                "lastUpdatedOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was last updated",
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The user details of the last update for this dashboard"
                },
                "lastUpdateId": {
                    "format": "int32",
                    "description": "The id of the last update for this dashboard",
                    "type": "integer"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this dashboard has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this dashboard has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this dashboard, or null if the\r\ndashboard has not yet been shared",
                    "type": "integer"
                },
                "deletedOn": {
                    "format": "date-time",
                    "description": "The date the dashboard was deleted, or null if it has not been deleted",
                    "type": "string"
                }
            }
        },
        "ModifyItems[ModifyUserDashboard]": {
            "description": "A set of items to modify",
            "required": [
                "returnModifiedItem",
                "list"
            ],
            "type": "object",
            "properties": {
                "returnModifiedItem": {
                    "description": "Whether to return the modified item in the results",
                    "type": "boolean"
                },
                "list": {
                    "description": "The list of items to modify",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifyUserDashboard"
                    }
                }
            }
        },
        "ModifyUserDashboard": {
            "description": "Details used to modify an audience for a given user",
            "required": [
                "dashboard",
                "id",
                "modificationType"
            ],
            "type": "object",
            "properties": {
                "dashboard": {
                    "$ref": "#/definitions/ModifyUserDashboardDetail",
                    "description": "The audience to modify"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the item to update",
                    "type": "integer"
                },
                "modificationType": {
                    "description": "The type of modification to perform.  If the type is delete or undelete, any other specified item details will be ignored",
                    "enum": [
                        "Modify",
                        "Delete",
                        "Undelete"
                    ],
                    "type": "string"
                }
            }
        },
        "ModifyUserDashboardDetail": {
            "description": "Details used to modify an existing dashboard for a given user",
            "required": [
                "id",
                "title"
            ],
            "type": "object",
            "properties": {
                "status": {
                    "description": "The status of the dashboard",
                    "enum": [
                        "Default",
                        "Pinned",
                        "Archived",
                        "Home"
                    ],
                    "type": "string"
                },
                "id": {
                    "format": "int32",
                    "description": "The dashboard's id",
                    "type": "integer"
                },
                "title": {
                    "description": "The title of the dashboard",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the dashboard",
                    "type": "string"
                },
                "themeId": {
                    "format": "int32",
                    "description": "The dashboard theme id",
                    "type": "integer"
                },
                "logoId": {
                    "format": "int32",
                    "description": "The dashboard logo id",
                    "type": "integer"
                },
                "baseQuery": {
                    "$ref": "#/definitions/Query",
                    "description": "The base query for the dashboard"
                },
                "dashboardItems": {
                    "description": "The items that are contained within the dashboard",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DashboardContentItem"
                    }
                },
                "systemName": {
                    "description": "The connected system of the dashboard",
                    "type": "string"
                }
            }
        },
        "PagedResults[ModifyUserDashboardDetailResults]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifyUserDashboardDetailResults"
                    }
                }
            }
        },
        "ModifyUserDashboardDetailResults": {
            "description": "Details used to modify an audience for a given user",
            "required": [
                "id",
                "succeeded",
                "status",
                "statusCode"
            ],
            "type": "object",
            "properties": {
                "dashboard": {
                    "$ref": "#/definitions/UserDashboardDetail",
                    "description": "The details of the modified audience"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of the updated item",
                    "type": "integer"
                },
                "succeeded": {
                    "description": "Whether the modification succeeded or not",
                    "type": "boolean"
                },
                "status": {
                    "description": "A status message associated with the modification",
                    "type": "string"
                },
                "statusCode": {
                    "format": "int32",
                    "description": "A status code associated with the modification",
                    "type": "integer"
                }
            }
        },
        "PagedResults[UserAudienceCompositionSummary]": {
            "description": "Summary details for a user",
            "required": [
                "offset",
                "count",
                "totalCount",
                "list"
            ],
            "type": "object",
            "properties": {
                "offset": {
                    "format": "int32",
                    "description": "The number of items that were skipped over from the (potentially filtered) result set",
                    "type": "integer"
                },
                "count": {
                    "format": "int32",
                    "description": "The number of items returned in this page of the result set",
                    "type": "integer"
                },
                "totalCount": {
                    "format": "int32",
                    "description": "The total number of items available in the (potentially filtered) result set",
                    "type": "integer"
                },
                "list": {
                    "description": "The list of results",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserAudienceCompositionSummary"
                    }
                }
            }
        },
        "UserAudienceCompositionSummary": {
            "description": "Summary details for an audience composition viewable by a given user",
            "required": [
                "viewingUsername",
                "sharedToMe",
                "sharedByMe",
                "id",
                "description",
                "type",
                "systemName",
                "owner",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this audience composition",
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this audience composition has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this audience composition has been shared to others by the given user",
                    "type": "boolean"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of this composition",
                    "type": "integer"
                },
                "description": {
                    "description": "The description of this composition",
                    "type": "string"
                },
                "type": {
                    "description": "The type of this composition",
                    "enum": [
                        "Check",
                        "Export"
                    ],
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this composition is for",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this composition"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this composition has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this composition has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this composition, or null if the\r\ncomposition has not yet been shared",
                    "type": "integer"
                }
            }
        },
        "UserAudienceCompositionDetail": {
            "description": "Details for an audience viewable by a given user",
            "required": [
                "viewingUsername",
                "sharedToMe",
                "sharedByMe",
                "id",
                "description",
                "type",
                "systemName",
                "owner",
                "numberOfUsersSharedWith",
                "sharedToAll"
            ],
            "type": "object",
            "properties": {
                "viewingUsername": {
                    "description": "The username of the user that has access to this composition",
                    "type": "string"
                },
                "sharedToMe": {
                    "description": "Whether this composition has been shared to the given user by someone else",
                    "type": "boolean"
                },
                "sharedByMe": {
                    "description": "Whether this composition has been shared to others by the given user",
                    "type": "boolean"
                },
                "checkCompositionDefinition": {
                    "$ref": "#/definitions/CheckCompositionDefinition",
                    "description": "If this is a check composition, the definition of the composition"
                },
                "exportCompositionDefinition": {
                    "$ref": "#/definitions/ExportCompositionDefinition",
                    "description": "If this is an export composition, the definition of the composition"
                },
                "compositionsLookup": {
                    "$ref": "#/definitions/SystemLookup",
                    "description": "A set of description lookups for variables used in the composition definitions"
                },
                "id": {
                    "format": "int32",
                    "description": "The id of this composition",
                    "type": "integer"
                },
                "description": {
                    "description": "The description of this composition",
                    "type": "string"
                },
                "type": {
                    "description": "The type of this composition",
                    "enum": [
                        "Check",
                        "Export"
                    ],
                    "type": "string"
                },
                "systemName": {
                    "description": "The name of the FastStats system that this composition is for",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/UserDisplayDetails",
                    "description": "The details of the user that owns this composition"
                },
                "numberOfUsersSharedWith": {
                    "format": "int32",
                    "description": "The number of people this composition has been shared with",
                    "type": "integer"
                },
                "sharedToAll": {
                    "description": "Whether this composition has been shared to all users",
                    "type": "boolean"
                },
                "shareId": {
                    "format": "int32",
                    "description": "The id of the share associated with this composition, or null if the\r\ncomposition has not yet been shared",
                    "type": "integer"
                }
            }
        },
        "VisualisationDetail": {
            "description": "Details for a visualisation",
            "required": [
                "id",
                "type"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "The visualisation's id",
                    "type": "string"
                },
                "type": {
                    "description": "The visualisation's type",
                    "enum": [
                        "None",
                        "Cube",
                        "Venn",
                        "Chart",
                        "DataGrid"
                    ],
                    "type": "string"
                }
            }
        },
        "AbstractRenderSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "pageWidth": {
                    "format": "int32",
                    "type": "integer"
                },
                "pageHeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "visualisationWidth": {
                    "format": "int32",
                    "type": "integer"
                },
                "visualisationHeight": {
                    "format": "int32",
                    "type": "integer"
                },
                "ranSuccessfully": {
                    "type": "boolean"
                },
                "notesTitle": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "showNotes": {
                    "type": "boolean"
                },
                "selectionTitle": {
                    "type": "string"
                },
                "showSelection": {
                    "type": "boolean"
                },
                "lastRunDetails": {
                    "$ref": "#/definitions/LastRunDetails"
                },
                "queryDetails": {
                    "$ref": "#/definitions/QueryDetails"
                }
            }
        },
        "LastRunDetails": {
            "type": "object",
            "properties": {
                "systemName": {
                    "type": "string"
                },
                "systemLoadDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "runDate": {
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "QueryDetails": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "counts": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QueryDetailCount"
                    }
                },
                "properties": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                }
            }
        },
        "QueryDetailCount": {
            "type": "object",
            "properties": {
                "tableName": {
                    "type": "string"
                },
                "tableDescription": {
                    "type": "string"
                },
                "countValue": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "Property": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "propertyValue": {
                    "type": "string"
                },
                "hidden": {
                    "type": "boolean"
                }
            }
        },
        "RenderDataRefreshJobDetail": {
            "description": "Details for a job to refresh the render data",
            "required": [
                "id",
                "isComplete"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int32",
                    "description": "The job's id",
                    "type": "integer"
                },
                "isComplete": {
                    "description": "Whether the job is complete or not",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "faststats_auth": {
            "name": "Authorization",
            "in": "header",
            "type": "apiKey"
        }
    }
}